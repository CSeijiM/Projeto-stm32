
Receptor NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004128  08004128  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004128  08004128  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004128  08004128  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004130  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000078  080041a8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080041a8  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093cf  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001809  00000000  00000000  00029470  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000990  00000000  00000000  0002ac80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d52  00000000  00000000  0002bed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f82  00000000  00000000  0003fc2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006cf47  00000000  00000000  00046bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  000b3b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b6c 	.word	0x08003b6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003b6c 	.word	0x08003b6c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d008      	beq.n	800017c <NRF24_csn+0x20>
 800016a:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <NRF24_csn+0x38>)
 800016c:	6818      	ldr	r0, [r3, #0]
 800016e:	4b0a      	ldr	r3, [pc, #40]	; (8000198 <NRF24_csn+0x3c>)
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	2201      	movs	r2, #1
 8000174:	4619      	mov	r1, r3
 8000176:	f001 fd5b 	bl	8001c30 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800017a:	e007      	b.n	800018c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <NRF24_csn+0x38>)
 800017e:	6818      	ldr	r0, [r3, #0]
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <NRF24_csn+0x3c>)
 8000182:	881b      	ldrh	r3, [r3, #0]
 8000184:	2200      	movs	r2, #0
 8000186:	4619      	mov	r1, r3
 8000188:	f001 fd52 	bl	8001c30 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	20000098 	.word	0x20000098
 8000198:	2000009c 	.word	0x2000009c

0800019c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d008      	beq.n	80001bc <NRF24_ce+0x20>
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <NRF24_ce+0x38>)
 80001ac:	6818      	ldr	r0, [r3, #0]
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <NRF24_ce+0x3c>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	2201      	movs	r2, #1
 80001b4:	4619      	mov	r1, r3
 80001b6:	f001 fd3b 	bl	8001c30 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001ba:	e007      	b.n	80001cc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <NRF24_ce+0x38>)
 80001be:	6818      	ldr	r0, [r3, #0]
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <NRF24_ce+0x3c>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4619      	mov	r1, r3
 80001c8:	f001 fd32 	bl	8001c30 <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000098 	.word	0x20000098
 80001d8:	2000009e 	.word	0x2000009e

080001dc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f7ff ffb8 	bl	800015c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80001f6:	f107 010c 	add.w	r1, r7, #12
 80001fa:	2364      	movs	r3, #100	; 0x64
 80001fc:	2201      	movs	r2, #1
 80001fe:	480a      	ldr	r0, [pc, #40]	; (8000228 <NRF24_read_register+0x4c>)
 8000200:	f002 f9ab 	bl	800255a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	1c59      	adds	r1, r3, #1
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	2201      	movs	r2, #1
 800020e:	4806      	ldr	r0, [pc, #24]	; (8000228 <NRF24_read_register+0x4c>)
 8000210:	f002 fad7 	bl	80027c2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000214:	7b7b      	ldrb	r3, [r7, #13]
 8000216:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000218:	2001      	movs	r0, #1
 800021a:	f7ff ff9f 	bl	800015c <NRF24_csn>
	return retData;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	200000a0 	.word	0x200000a0

0800022c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800023c:	2000      	movs	r0, #0
 800023e:	f7ff ff8d 	bl	800015c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 031f 	and.w	r3, r3, #31
 8000248:	b2db      	uxtb	r3, r3
 800024a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800024c:	f107 010c 	add.w	r1, r7, #12
 8000250:	2364      	movs	r3, #100	; 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <NRF24_read_registerN+0x4c>)
 8000256:	f002 f980 	bl	800255a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	b29a      	uxth	r2, r3
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	6839      	ldr	r1, [r7, #0]
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <NRF24_read_registerN+0x4c>)
 8000264:	f002 faad 	bl	80027c2 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000268:	2001      	movs	r0, #1
 800026a:	f7ff ff77 	bl	800015c <NRF24_csn>
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	200000a0 	.word	0x200000a0

0800027c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	460a      	mov	r2, r1
 8000286:	71fb      	strb	r3, [r7, #7]
 8000288:	4613      	mov	r3, r2
 800028a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800028c:	2000      	movs	r0, #0
 800028e:	f7ff ff65 	bl	800015c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	b2db      	uxtb	r3, r3
 800029a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002a0:	f107 010c 	add.w	r1, r7, #12
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	2202      	movs	r2, #2
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <NRF24_write_register+0x40>)
 80002aa:	f002 f956 	bl	800255a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f7ff ff54 	bl	800015c <NRF24_csn>
}
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	200000a0 	.word	0x200000a0

080002c0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	4613      	mov	r3, r2
 80002ce:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002d0:	2000      	movs	r0, #0
 80002d2:	f7ff ff43 	bl	800015c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	f043 0320 	orr.w	r3, r3, #32
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80002e0:	f107 010c 	add.w	r1, r7, #12
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2201      	movs	r2, #1
 80002e8:	4808      	ldr	r0, [pc, #32]	; (800030c <NRF24_write_registerN+0x4c>)
 80002ea:	f002 f936 	bl	800255a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	6839      	ldr	r1, [r7, #0]
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <NRF24_write_registerN+0x4c>)
 80002f8:	f002 f92f 	bl	800255a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ff2d 	bl	800015c <NRF24_csn>
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200000a0 	.word	0x200000a0

08000310 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000314:	21ff      	movs	r1, #255	; 0xff
 8000316:	20e1      	movs	r0, #225	; 0xe1
 8000318:	f7ff ffb0 	bl	800027c <NRF24_write_register>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000324:	21ff      	movs	r1, #255	; 0xff
 8000326:	20e2      	movs	r0, #226	; 0xe2
 8000328:	f7ff ffa8 	bl	800027c <NRF24_write_register>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000330:	b082      	sub	sp, #8
 8000332:	b580      	push	{r7, lr}
 8000334:	b084      	sub	sp, #16
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	61fb      	str	r3, [r7, #28]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]
 8000340:	4613      	mov	r3, r2
 8000342:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000344:	4b66      	ldr	r3, [pc, #408]	; (80004e0 <NRF24_begin+0x1b0>)
 8000346:	4618      	mov	r0, r3
 8000348:	f107 031c 	add.w	r3, r7, #28
 800034c:	2258      	movs	r2, #88	; 0x58
 800034e:	4619      	mov	r1, r3
 8000350:	f002 fff0 	bl	8003334 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000354:	4a63      	ldr	r2, [pc, #396]	; (80004e4 <NRF24_begin+0x1b4>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800035a:	4a63      	ldr	r2, [pc, #396]	; (80004e8 <NRF24_begin+0x1b8>)
 800035c:	887b      	ldrh	r3, [r7, #2]
 800035e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000360:	4a62      	ldr	r2, [pc, #392]	; (80004ec <NRF24_begin+0x1bc>)
 8000362:	883b      	ldrh	r3, [r7, #0]
 8000364:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f7ff fef8 	bl	800015c <NRF24_csn>
	NRF24_ce(0);
 800036c:	2000      	movs	r0, #0
 800036e:	f7ff ff15 	bl	800019c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000372:	2005      	movs	r0, #5
 8000374:	f001 f9fc 	bl	8001770 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000378:	2108      	movs	r1, #8
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ff7e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000380:	213f      	movs	r1, #63	; 0x3f
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff ff7a 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000388:	2103      	movs	r1, #3
 800038a:	2002      	movs	r0, #2
 800038c:	f7ff ff76 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000390:	2103      	movs	r1, #3
 8000392:	2003      	movs	r0, #3
 8000394:	f7ff ff72 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000398:	2103      	movs	r1, #3
 800039a:	2004      	movs	r0, #4
 800039c:	f7ff ff6e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80003a0:	2102      	movs	r1, #2
 80003a2:	2005      	movs	r0, #5
 80003a4:	f7ff ff6a 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80003a8:	210f      	movs	r1, #15
 80003aa:	2006      	movs	r0, #6
 80003ac:	f7ff ff66 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80003b0:	210e      	movs	r1, #14
 80003b2:	2007      	movs	r0, #7
 80003b4:	f7ff ff62 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80003b8:	2100      	movs	r1, #0
 80003ba:	2008      	movs	r0, #8
 80003bc:	f7ff ff5e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80003c0:	2100      	movs	r1, #0
 80003c2:	2009      	movs	r0, #9
 80003c4:	f7ff ff5a 	bl	800027c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80003c8:	23e7      	movs	r3, #231	; 0xe7
 80003ca:	733b      	strb	r3, [r7, #12]
 80003cc:	23e7      	movs	r3, #231	; 0xe7
 80003ce:	72fb      	strb	r3, [r7, #11]
 80003d0:	23e7      	movs	r3, #231	; 0xe7
 80003d2:	72bb      	strb	r3, [r7, #10]
 80003d4:	23e7      	movs	r3, #231	; 0xe7
 80003d6:	727b      	strb	r3, [r7, #9]
 80003d8:	23e7      	movs	r3, #231	; 0xe7
 80003da:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	2205      	movs	r2, #5
 80003e2:	4619      	mov	r1, r3
 80003e4:	200a      	movs	r0, #10
 80003e6:	f7ff ff6b 	bl	80002c0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80003ea:	23c2      	movs	r3, #194	; 0xc2
 80003ec:	733b      	strb	r3, [r7, #12]
 80003ee:	23c2      	movs	r3, #194	; 0xc2
 80003f0:	72fb      	strb	r3, [r7, #11]
 80003f2:	23c2      	movs	r3, #194	; 0xc2
 80003f4:	72bb      	strb	r3, [r7, #10]
 80003f6:	23c2      	movs	r3, #194	; 0xc2
 80003f8:	727b      	strb	r3, [r7, #9]
 80003fa:	23c2      	movs	r3, #194	; 0xc2
 80003fc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	2205      	movs	r2, #5
 8000404:	4619      	mov	r1, r3
 8000406:	200b      	movs	r0, #11
 8000408:	f7ff ff5a 	bl	80002c0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800040c:	21c3      	movs	r1, #195	; 0xc3
 800040e:	200c      	movs	r0, #12
 8000410:	f7ff ff34 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000414:	21c4      	movs	r1, #196	; 0xc4
 8000416:	200d      	movs	r0, #13
 8000418:	f7ff ff30 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800041c:	21c5      	movs	r1, #197	; 0xc5
 800041e:	200e      	movs	r0, #14
 8000420:	f7ff ff2c 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000424:	21c6      	movs	r1, #198	; 0xc6
 8000426:	200f      	movs	r0, #15
 8000428:	f7ff ff28 	bl	800027c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800042c:	23e7      	movs	r3, #231	; 0xe7
 800042e:	733b      	strb	r3, [r7, #12]
 8000430:	23e7      	movs	r3, #231	; 0xe7
 8000432:	72fb      	strb	r3, [r7, #11]
 8000434:	23e7      	movs	r3, #231	; 0xe7
 8000436:	72bb      	strb	r3, [r7, #10]
 8000438:	23e7      	movs	r3, #231	; 0xe7
 800043a:	727b      	strb	r3, [r7, #9]
 800043c:	23e7      	movs	r3, #231	; 0xe7
 800043e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	2205      	movs	r2, #5
 8000446:	4619      	mov	r1, r3
 8000448:	2010      	movs	r0, #16
 800044a:	f7ff ff39 	bl	80002c0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800044e:	2100      	movs	r1, #0
 8000450:	2011      	movs	r0, #17
 8000452:	f7ff ff13 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000456:	2100      	movs	r1, #0
 8000458:	2012      	movs	r0, #18
 800045a:	f7ff ff0f 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800045e:	2100      	movs	r1, #0
 8000460:	2013      	movs	r0, #19
 8000462:	f7ff ff0b 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000466:	2100      	movs	r1, #0
 8000468:	2014      	movs	r0, #20
 800046a:	f7ff ff07 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800046e:	2100      	movs	r1, #0
 8000470:	2015      	movs	r0, #21
 8000472:	f7ff ff03 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000476:	2100      	movs	r1, #0
 8000478:	2016      	movs	r0, #22
 800047a:	f7ff feff 	bl	800027c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800047e:	f000 f999 	bl	80007b4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000482:	2100      	movs	r1, #0
 8000484:	201c      	movs	r0, #28
 8000486:	f7ff fef9 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800048a:	2100      	movs	r1, #0
 800048c:	201d      	movs	r0, #29
 800048e:	f7ff fef5 	bl	800027c <NRF24_write_register>
	printRadioSettings();
 8000492:	f000 f9a9 	bl	80007e8 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000496:	210f      	movs	r1, #15
 8000498:	200f      	movs	r0, #15
 800049a:	f000 f859 	bl	8000550 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800049e:	2003      	movs	r0, #3
 80004a0:	f000 f8c9 	bl	8000636 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 f8ff 	bl	80006a8 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 f942 	bl	8000734 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80004b0:	f000 f894 	bl	80005dc <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80004b4:	2020      	movs	r0, #32
 80004b6:	f000 f87b 	bl	80005b0 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80004ba:	f000 f972 	bl	80007a2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80004be:	204c      	movs	r0, #76	; 0x4c
 80004c0:	f000 f861 	bl	8000586 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80004c4:	f7ff ff24 	bl	8000310 <NRF24_flush_tx>
	NRF24_flush_rx();
 80004c8:	f7ff ff2a 	bl	8000320 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80004cc:	f000 f95a 	bl	8000784 <NRF24_powerDown>
	
}
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004da:	b002      	add	sp, #8
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	200000a0 	.word	0x200000a0
 80004e4:	20000098 	.word	0x20000098
 80004e8:	2000009c 	.word	0x2000009c
 80004ec:	2000009e 	.word	0x2000009e

080004f0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fe51 	bl	800019c <NRF24_ce>
	NRF24_flush_tx();
 80004fa:	f7ff ff09 	bl	8000310 <NRF24_flush_tx>
	NRF24_flush_rx();
 80004fe:	f7ff ff0f 	bl	8000320 <NRF24_flush_rx>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000512:	463b      	mov	r3, r7
 8000514:	2205      	movs	r2, #5
 8000516:	4619      	mov	r1, r3
 8000518:	200a      	movs	r0, #10
 800051a:	f7ff fed1 	bl	80002c0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800051e:	463b      	mov	r3, r7
 8000520:	2205      	movs	r2, #5
 8000522:	4619      	mov	r1, r3
 8000524:	2010      	movs	r0, #16
 8000526:	f7ff fecb 	bl	80002c0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800052a:	2320      	movs	r3, #32
 800052c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <NRF24_openWritingPipe+0x44>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	7bfa      	ldrb	r2, [r7, #15]
 8000534:	4293      	cmp	r3, r2
 8000536:	bf28      	it	cs
 8000538:	4613      	movcs	r3, r2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	2011      	movs	r0, #17
 8000540:	f7ff fe9c 	bl	800027c <NRF24_write_register>
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000094 	.word	0x20000094

08000550 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	460a      	mov	r2, r1
 800055a:	71fb      	strb	r3, [r7, #7]
 800055c:	4613      	mov	r3, r2
 800055e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	b25a      	sxtb	r2, r3
 8000566:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800056a:	f003 030f 	and.w	r3, r3, #15
 800056e:	b25b      	sxtb	r3, r3
 8000570:	4313      	orrs	r3, r2
 8000572:	b25b      	sxtb	r3, r3
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4619      	mov	r1, r3
 8000578:	2004      	movs	r0, #4
 800057a:	f7ff fe7f 	bl	800027c <NRF24_write_register>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b084      	sub	sp, #16
 800058a:	af00      	add	r7, sp, #0
 800058c:	4603      	mov	r3, r0
 800058e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000590:	237f      	movs	r3, #127	; 0x7f
 8000592:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000594:	7bfa      	ldrb	r2, [r7, #15]
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4293      	cmp	r3, r2
 800059a:	bf28      	it	cs
 800059c:	4613      	movcs	r3, r2
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	2005      	movs	r0, #5
 80005a4:	f7ff fe6a 	bl	800027c <NRF24_write_register>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80005ba:	2320      	movs	r3, #32
 80005bc:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80005be:	7bfa      	ldrb	r2, [r7, #15]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4293      	cmp	r3, r2
 80005c4:	bf28      	it	cs
 80005c6:	4613      	movcs	r3, r2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <NRF24_setPayloadSize+0x28>)
 80005cc:	701a      	strb	r2, [r3, #0]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20000094 	.word	0x20000094

080005dc <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80005e0:	201d      	movs	r0, #29
 80005e2:	f7ff fdfb 	bl	80001dc <NRF24_read_register>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f023 0304 	bic.w	r3, r3, #4
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	201d      	movs	r0, #29
 80005f2:	f7ff fe43 	bl	800027c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80005f6:	2100      	movs	r1, #0
 80005f8:	201c      	movs	r0, #28
 80005fa:	f7ff fe3f 	bl	800027c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80005fe:	4b02      	ldr	r3, [pc, #8]	; (8000608 <NRF24_disableDynamicPayloads+0x2c>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000095 	.word	0x20000095

0800060c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d004      	beq.n	8000626 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 800061c:	213f      	movs	r1, #63	; 0x3f
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff fe2c 	bl	800027c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000624:	e003      	b.n	800062e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff fe27 	bl	800027c <NRF24_write_register>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff fdcb 	bl	80001dc <NRF24_read_register>
 8000646:	4603      	mov	r3, r0
 8000648:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	f023 0306 	bic.w	r3, r3, #6
 8000650:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d104      	bne.n	8000662 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	f043 0306 	orr.w	r3, r3, #6
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e019      	b.n	8000696 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d104      	bne.n	8000672 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e011      	b.n	8000696 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d104      	bne.n	8000682 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e009      	b.n	8000696 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d006      	beq.n	8000696 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b04      	cmp	r3, #4
 800068c:	d103      	bne.n	8000696 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	f043 0306 	orr.w	r3, r3, #6
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	4619      	mov	r1, r3
 800069a:	2006      	movs	r0, #6
 800069c:	f7ff fdee 	bl	800027c <NRF24_write_register>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80006b2:	2300      	movs	r3, #0
 80006b4:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80006b6:	2006      	movs	r0, #6
 80006b8:	f7ff fd90 	bl	80001dc <NRF24_read_register>
 80006bc:	4603      	mov	r3, r0
 80006be:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <NRF24_setDataRate+0x88>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80006cc:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d107      	bne.n	80006e4 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <NRF24_setDataRate+0x88>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	73bb      	strb	r3, [r7, #14]
 80006e2:	e00d      	b.n	8000700 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d107      	bne.n	80006fa <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <NRF24_setDataRate+0x88>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	e002      	b.n	8000700 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <NRF24_setDataRate+0x88>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	4619      	mov	r1, r3
 8000704:	2006      	movs	r0, #6
 8000706:	f7ff fdb9 	bl	800027c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800070a:	2006      	movs	r0, #6
 800070c:	f7ff fd66 	bl	80001dc <NRF24_read_register>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	7bbb      	ldrb	r3, [r7, #14]
 8000716:	4293      	cmp	r3, r2
 8000718:	d102      	bne.n	8000720 <NRF24_setDataRate+0x78>
  {
    result = true;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e002      	b.n	8000726 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <NRF24_setDataRate+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000096 	.word	0x20000096

08000734 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff fd4c 	bl	80001dc <NRF24_read_register>
 8000744:	4603      	mov	r3, r0
 8000746:	f023 030c 	bic.w	r3, r3, #12
 800074a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00f      	beq.n	8000772 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d104      	bne.n	8000762 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e007      	b.n	8000772 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4619      	mov	r1, r3
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff fd80 	bl	800027c <NRF24_write_register>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fd27 	bl	80001dc <NRF24_read_register>
 800078e:	4603      	mov	r3, r0
 8000790:	f023 0302 	bic.w	r3, r3, #2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4619      	mov	r1, r3
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff fd6f 	bl	800027c <NRF24_write_register>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80007a6:	2170      	movs	r1, #112	; 0x70
 80007a8:	2007      	movs	r0, #7
 80007aa:	f7ff fd67 	bl	800027c <NRF24_write_register>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff fcce 	bl	800015c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80007c0:	2350      	movs	r3, #80	; 0x50
 80007c2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80007c4:	2373      	movs	r3, #115	; 0x73
 80007c6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80007c8:	1d39      	adds	r1, r7, #4
 80007ca:	2364      	movs	r3, #100	; 0x64
 80007cc:	2202      	movs	r2, #2
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <NRF24_ACTIVATE_cmd+0x30>)
 80007d0:	f001 fec3 	bl	800255a <HAL_SPI_Transmit>
	NRF24_csn(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fcc1 	bl	800015c <NRF24_csn>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000a0 	.word	0x200000a0

080007e8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ea:	b0a1      	sub	sp, #132	; 0x84
 80007ec:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4ab6      	ldr	r2, [pc, #728]	; (8000acc <printRadioSettings+0x2e4>)
 80007f4:	461c      	mov	r4, r3
 80007f6:	4615      	mov	r5, r2
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000804:	682b      	ldr	r3, [r5, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	8022      	strh	r2, [r4, #0]
 800080a:	3402      	adds	r4, #2
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fc99 	bl	800014c <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 0108 	add.w	r1, r7, #8
 8000822:	230a      	movs	r3, #10
 8000824:	48aa      	ldr	r0, [pc, #680]	; (8000ad0 <printRadioSettings+0x2e8>)
 8000826:	f002 fb9e 	bl	8002f66 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fcd6 	bl	80001dc <NRF24_read_register>
 8000830:	4603      	mov	r3, r0
 8000832:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000836:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	2b00      	cmp	r3, #0
 8000840:	d020      	beq.n	8000884 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000842:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00b      	beq.n	8000866 <printRadioSettings+0x7e>
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	4aa0      	ldr	r2, [pc, #640]	; (8000ad4 <printRadioSettings+0x2ec>)
 8000854:	461c      	mov	r4, r3
 8000856:	4615      	mov	r5, r2
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000864:	e017      	b.n	8000896 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4a9b      	ldr	r2, [pc, #620]	; (8000ad8 <printRadioSettings+0x2f0>)
 800086c:	461c      	mov	r4, r3
 800086e:	4615      	mov	r5, r2
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000878:	c403      	stmia	r4!, {r0, r1}
 800087a:	8022      	strh	r2, [r4, #0]
 800087c:	3402      	adds	r4, #2
 800087e:	0c13      	lsrs	r3, r2, #16
 8000880:	7023      	strb	r3, [r4, #0]
 8000882:	e008      	b.n	8000896 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4a94      	ldr	r2, [pc, #592]	; (8000adc <printRadioSettings+0x2f4>)
 800088a:	461c      	mov	r4, r3
 800088c:	4615      	mov	r5, r2
 800088e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fc56 	bl	800014c <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f107 0108 	add.w	r1, r7, #8
 80008a8:	230a      	movs	r3, #10
 80008aa:	4889      	ldr	r0, [pc, #548]	; (8000ad0 <printRadioSettings+0x2e8>)
 80008ac:	f002 fb5b 	bl	8002f66 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff fc93 	bl	80001dc <NRF24_read_register>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008c0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bfcc      	ite	gt
 80008c8:	2301      	movgt	r3, #1
 80008ca:	2300      	movle	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008d4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bfcc      	ite	gt
 80008dc:	2301      	movgt	r3, #1
 80008de:	2300      	movle	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008e8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bfcc      	ite	gt
 80008f0:	2301      	movgt	r3, #1
 80008f2:	2300      	movle	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008fc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000900:	2b00      	cmp	r3, #0
 8000902:	bfcc      	ite	gt
 8000904:	2301      	movgt	r3, #1
 8000906:	2300      	movle	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800090c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000910:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000914:	2b00      	cmp	r3, #0
 8000916:	bfcc      	ite	gt
 8000918:	2301      	movgt	r3, #1
 800091a:	2300      	movle	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000920:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000924:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000928:	2b00      	cmp	r3, #0
 800092a:	bfcc      	ite	gt
 800092c:	2301      	movgt	r3, #1
 800092e:	2300      	movle	r3, #0
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f107 0008 	add.w	r0, r7, #8
 8000936:	9303      	str	r3, [sp, #12]
 8000938:	9402      	str	r4, [sp, #8]
 800093a:	9101      	str	r1, [sp, #4]
 800093c:	9200      	str	r2, [sp, #0]
 800093e:	4633      	mov	r3, r6
 8000940:	462a      	mov	r2, r5
 8000942:	4967      	ldr	r1, [pc, #412]	; (8000ae0 <printRadioSettings+0x2f8>)
 8000944:	f002 fd0a 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fbfd 	bl	800014c <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	f107 0108 	add.w	r1, r7, #8
 800095a:	230a      	movs	r3, #10
 800095c:	485c      	ldr	r0, [pc, #368]	; (8000ad0 <printRadioSettings+0x2e8>)
 800095e:	f002 fb02 	bl	8002f66 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff fc3a 	bl	80001dc <NRF24_read_register>
 8000968:	4603      	mov	r3, r0
 800096a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800096e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000972:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000976:	2b00      	cmp	r3, #0
 8000978:	bfcc      	ite	gt
 800097a:	2301      	movgt	r3, #1
 800097c:	2300      	movle	r3, #0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000982:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000986:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800098a:	2b00      	cmp	r3, #0
 800098c:	bfcc      	ite	gt
 800098e:	2301      	movgt	r3, #1
 8000990:	2300      	movle	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000996:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800099a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800099e:	2b00      	cmp	r3, #0
 80009a0:	bfcc      	ite	gt
 80009a2:	2301      	movgt	r3, #1
 80009a4:	2300      	movle	r3, #0
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80009aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009ae:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bfcc      	ite	gt
 80009b6:	2301      	movgt	r3, #1
 80009b8:	2300      	movle	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80009be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009c2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	bfcc      	ite	gt
 80009ca:	2301      	movgt	r3, #1
 80009cc:	2300      	movle	r3, #0
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80009d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009d6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80009da:	2b00      	cmp	r3, #0
 80009dc:	bfcc      	ite	gt
 80009de:	2301      	movgt	r3, #1
 80009e0:	2300      	movle	r3, #0
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f107 0008 	add.w	r0, r7, #8
 80009e8:	9303      	str	r3, [sp, #12]
 80009ea:	9402      	str	r4, [sp, #8]
 80009ec:	9101      	str	r1, [sp, #4]
 80009ee:	9200      	str	r2, [sp, #0]
 80009f0:	4633      	mov	r3, r6
 80009f2:	462a      	mov	r2, r5
 80009f4:	493b      	ldr	r1, [pc, #236]	; (8000ae4 <printRadioSettings+0x2fc>)
 80009f6:	f002 fcb1 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fba4 	bl	800014c <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f107 0108 	add.w	r1, r7, #8
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	4830      	ldr	r0, [pc, #192]	; (8000ad0 <printRadioSettings+0x2e8>)
 8000a10:	f002 faa9 	bl	8002f66 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000a14:	2003      	movs	r0, #3
 8000a16:	f7ff fbe1 	bl	80001dc <NRF24_read_register>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000a24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a28:	3302      	adds	r3, #2
 8000a2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000a2e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	492c      	ldr	r1, [pc, #176]	; (8000ae8 <printRadioSettings+0x300>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fc8f 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fb82 	bl	800014c <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f107 0108 	add.w	r1, r7, #8
 8000a50:	230a      	movs	r3, #10
 8000a52:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <printRadioSettings+0x2e8>)
 8000a54:	f002 fa87 	bl	8002f66 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000a58:	2005      	movs	r0, #5
 8000a5a:	f7ff fbbf 	bl	80001dc <NRF24_read_register>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000a64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	491e      	ldr	r1, [pc, #120]	; (8000aec <printRadioSettings+0x304>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fc72 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fb65 	bl	800014c <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f107 0108 	add.w	r1, r7, #8
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <printRadioSettings+0x2e8>)
 8000a8e:	f002 fa6a 	bl	8002f66 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000a92:	2006      	movs	r0, #6
 8000a94:	f7ff fba2 	bl	80001dc <NRF24_read_register>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000a9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d024      	beq.n	8000af4 <printRadioSettings+0x30c>
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <printRadioSettings+0x308>)
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	4615      	mov	r5, r2
 8000ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000abc:	6020      	str	r0, [r4, #0]
 8000abe:	3404      	adds	r4, #4
 8000ac0:	8021      	strh	r1, [r4, #0]
 8000ac2:	3402      	adds	r4, #2
 8000ac4:	0c0b      	lsrs	r3, r1, #16
 8000ac6:	7023      	strb	r3, [r4, #0]
 8000ac8:	e023      	b.n	8000b12 <printRadioSettings+0x32a>
 8000aca:	bf00      	nop
 8000acc:	08003b84 	.word	0x08003b84
 8000ad0:	200000f8 	.word	0x200000f8
 8000ad4:	08003bb8 	.word	0x08003bb8
 8000ad8:	08003bd4 	.word	0x08003bd4
 8000adc:	08003bf0 	.word	0x08003bf0
 8000ae0:	08003c04 	.word	0x08003c04
 8000ae4:	08003c48 	.word	0x08003c48
 8000ae8:	08003c94 	.word	0x08003c94
 8000aec:	08003cb0 	.word	0x08003cb0
 8000af0:	08003cc4 	.word	0x08003cc4
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4a29      	ldr	r2, [pc, #164]	; (8000ba0 <printRadioSettings+0x3b8>)
 8000afa:	461c      	mov	r4, r3
 8000afc:	4615      	mov	r5, r2
 8000afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b06:	6020      	str	r0, [r4, #0]
 8000b08:	3404      	adds	r4, #4
 8000b0a:	8021      	strh	r1, [r4, #0]
 8000b0c:	3402      	adds	r4, #2
 8000b0e:	0c0b      	lsrs	r3, r1, #16
 8000b10:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fb18 	bl	800014c <strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f107 0108 	add.w	r1, r7, #8
 8000b24:	230a      	movs	r3, #10
 8000b26:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <printRadioSettings+0x3bc>)
 8000b28:	f002 fa1d 	bl	8002f66 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000b2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b30:	f003 0306 	and.w	r3, r3, #6
 8000b34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000b38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b3c:	085b      	lsrs	r3, r3, #1
 8000b3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000b42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d109      	bne.n	8000b5e <printRadioSettings+0x376>
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <printRadioSettings+0x3c0>)
 8000b50:	461c      	mov	r4, r3
 8000b52:	4615      	mov	r5, r2
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	6023      	str	r3, [r4, #0]
 8000b5c:	e037      	b.n	8000bce <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000b5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d109      	bne.n	8000b7a <printRadioSettings+0x392>
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <printRadioSettings+0x3c4>)
 8000b6c:	461c      	mov	r4, r3
 8000b6e:	4615      	mov	r5, r2
 8000b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	6023      	str	r3, [r4, #0]
 8000b78:	e029      	b.n	8000bce <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000b7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d118      	bne.n	8000bb4 <printRadioSettings+0x3cc>
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <printRadioSettings+0x3c8>)
 8000b88:	461c      	mov	r4, r3
 8000b8a:	4615      	mov	r5, r2
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	8022      	strh	r2, [r4, #0]
 8000b96:	3402      	adds	r4, #2
 8000b98:	0c1b      	lsrs	r3, r3, #16
 8000b9a:	7023      	strb	r3, [r4, #0]
 8000b9c:	e017      	b.n	8000bce <printRadioSettings+0x3e6>
 8000b9e:	bf00      	nop
 8000ba0:	08003cdc 	.word	0x08003cdc
 8000ba4:	200000f8 	.word	0x200000f8
 8000ba8:	08003cf4 	.word	0x08003cf4
 8000bac:	08003d08 	.word	0x08003d08
 8000bb0:	08003d1c 	.word	0x08003d1c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000bb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d108      	bne.n	8000bce <printRadioSettings+0x3e6>
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4ad7      	ldr	r2, [pc, #860]	; (8000f20 <printRadioSettings+0x738>)
 8000bc2:	461c      	mov	r4, r3
 8000bc4:	4615      	mov	r5, r2
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff faba 	bl	800014c <strlen>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	f107 0108 	add.w	r1, r7, #8
 8000be0:	230a      	movs	r3, #10
 8000be2:	48d0      	ldr	r0, [pc, #832]	; (8000f24 <printRadioSettings+0x73c>)
 8000be4:	f002 f9bf 	bl	8002f66 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000be8:	463b      	mov	r3, r7
 8000bea:	2205      	movs	r2, #5
 8000bec:	4619      	mov	r1, r3
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f7ff fb1c 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	461c      	mov	r4, r3
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	78bb      	ldrb	r3, [r7, #2]
 8000bfe:	787a      	ldrb	r2, [r7, #1]
 8000c00:	7839      	ldrb	r1, [r7, #0]
 8000c02:	f107 0008 	add.w	r0, r7, #8
 8000c06:	9102      	str	r1, [sp, #8]
 8000c08:	9201      	str	r2, [sp, #4]
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	462b      	mov	r3, r5
 8000c0e:	4622      	mov	r2, r4
 8000c10:	49c5      	ldr	r1, [pc, #788]	; (8000f28 <printRadioSettings+0x740>)
 8000c12:	f002 fba3 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fa96 	bl	800014c <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	f107 0108 	add.w	r1, r7, #8
 8000c28:	230a      	movs	r3, #10
 8000c2a:	48be      	ldr	r0, [pc, #760]	; (8000f24 <printRadioSettings+0x73c>)
 8000c2c:	f002 f99b 	bl	8002f66 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000c30:	463b      	mov	r3, r7
 8000c32:	2205      	movs	r2, #5
 8000c34:	4619      	mov	r1, r3
 8000c36:	200b      	movs	r0, #11
 8000c38:	f7ff faf8 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000c3c:	793b      	ldrb	r3, [r7, #4]
 8000c3e:	461c      	mov	r4, r3
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	461d      	mov	r5, r3
 8000c44:	78bb      	ldrb	r3, [r7, #2]
 8000c46:	787a      	ldrb	r2, [r7, #1]
 8000c48:	7839      	ldrb	r1, [r7, #0]
 8000c4a:	f107 0008 	add.w	r0, r7, #8
 8000c4e:	9102      	str	r1, [sp, #8]
 8000c50:	9201      	str	r2, [sp, #4]
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	462b      	mov	r3, r5
 8000c56:	4622      	mov	r2, r4
 8000c58:	49b4      	ldr	r1, [pc, #720]	; (8000f2c <printRadioSettings+0x744>)
 8000c5a:	f002 fb7f 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fa72 	bl	800014c <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f107 0108 	add.w	r1, r7, #8
 8000c70:	230a      	movs	r3, #10
 8000c72:	48ac      	ldr	r0, [pc, #688]	; (8000f24 <printRadioSettings+0x73c>)
 8000c74:	f002 f977 	bl	8002f66 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f7ff fad4 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000c84:	783b      	ldrb	r3, [r7, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	49a8      	ldr	r1, [pc, #672]	; (8000f30 <printRadioSettings+0x748>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 fb64 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fa57 	bl	800014c <strlen>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	f107 0108 	add.w	r1, r7, #8
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	489e      	ldr	r0, [pc, #632]	; (8000f24 <printRadioSettings+0x73c>)
 8000caa:	f002 f95c 	bl	8002f66 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	200d      	movs	r0, #13
 8000cb6:	f7ff fab9 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000cba:	783b      	ldrb	r3, [r7, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	499c      	ldr	r1, [pc, #624]	; (8000f34 <printRadioSettings+0x74c>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fb49 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa3c 	bl	800014c <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	f107 0108 	add.w	r1, r7, #8
 8000cdc:	230a      	movs	r3, #10
 8000cde:	4891      	ldr	r0, [pc, #580]	; (8000f24 <printRadioSettings+0x73c>)
 8000ce0:	f002 f941 	bl	8002f66 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4619      	mov	r1, r3
 8000cea:	200e      	movs	r0, #14
 8000cec:	f7ff fa9e 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000cf0:	783b      	ldrb	r3, [r7, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	498f      	ldr	r1, [pc, #572]	; (8000f38 <printRadioSettings+0x750>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fb2e 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fa21 	bl	800014c <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	f107 0108 	add.w	r1, r7, #8
 8000d12:	230a      	movs	r3, #10
 8000d14:	4883      	ldr	r0, [pc, #524]	; (8000f24 <printRadioSettings+0x73c>)
 8000d16:	f002 f926 	bl	8002f66 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4619      	mov	r1, r3
 8000d20:	200f      	movs	r0, #15
 8000d22:	f7ff fa83 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000d26:	783b      	ldrb	r3, [r7, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4983      	ldr	r1, [pc, #524]	; (8000f3c <printRadioSettings+0x754>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 fb13 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fa06 	bl	800014c <strlen>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	f107 0108 	add.w	r1, r7, #8
 8000d48:	230a      	movs	r3, #10
 8000d4a:	4876      	ldr	r0, [pc, #472]	; (8000f24 <printRadioSettings+0x73c>)
 8000d4c:	f002 f90b 	bl	8002f66 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8000d50:	463b      	mov	r3, r7
 8000d52:	2205      	movs	r2, #5
 8000d54:	4619      	mov	r1, r3
 8000d56:	2010      	movs	r0, #16
 8000d58:	f7ff fa68 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	461c      	mov	r4, r3
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	461d      	mov	r5, r3
 8000d64:	78bb      	ldrb	r3, [r7, #2]
 8000d66:	787a      	ldrb	r2, [r7, #1]
 8000d68:	7839      	ldrb	r1, [r7, #0]
 8000d6a:	f107 0008 	add.w	r0, r7, #8
 8000d6e:	9102      	str	r1, [sp, #8]
 8000d70:	9201      	str	r2, [sp, #4]
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	462b      	mov	r3, r5
 8000d76:	4622      	mov	r2, r4
 8000d78:	4971      	ldr	r1, [pc, #452]	; (8000f40 <printRadioSettings+0x758>)
 8000d7a:	f002 faef 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff f9e2 	bl	800014c <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f107 0108 	add.w	r1, r7, #8
 8000d90:	230a      	movs	r3, #10
 8000d92:	4864      	ldr	r0, [pc, #400]	; (8000f24 <printRadioSettings+0x73c>)
 8000d94:	f002 f8e7 	bl	8002f66 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8000d98:	2011      	movs	r0, #17
 8000d9a:	f7ff fa1f 	bl	80001dc <NRF24_read_register>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000da4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000da8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4964      	ldr	r1, [pc, #400]	; (8000f44 <printRadioSettings+0x75c>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fad2 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff f9c5 	bl	800014c <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	f107 0108 	add.w	r1, r7, #8
 8000dca:	230a      	movs	r3, #10
 8000dcc:	4855      	ldr	r0, [pc, #340]	; (8000f24 <printRadioSettings+0x73c>)
 8000dce:	f002 f8ca 	bl	8002f66 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8000dd2:	2012      	movs	r0, #18
 8000dd4:	f7ff fa02 	bl	80001dc <NRF24_read_register>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000dde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4957      	ldr	r1, [pc, #348]	; (8000f48 <printRadioSettings+0x760>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f002 fab5 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff f9a8 	bl	800014c <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	f107 0108 	add.w	r1, r7, #8
 8000e04:	230a      	movs	r3, #10
 8000e06:	4847      	ldr	r0, [pc, #284]	; (8000f24 <printRadioSettings+0x73c>)
 8000e08:	f002 f8ad 	bl	8002f66 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8000e0c:	2013      	movs	r0, #19
 8000e0e:	f7ff f9e5 	bl	80001dc <NRF24_read_register>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000e18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	4949      	ldr	r1, [pc, #292]	; (8000f4c <printRadioSettings+0x764>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 fa98 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff f98b 	bl	800014c <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	f107 0108 	add.w	r1, r7, #8
 8000e3e:	230a      	movs	r3, #10
 8000e40:	4838      	ldr	r0, [pc, #224]	; (8000f24 <printRadioSettings+0x73c>)
 8000e42:	f002 f890 	bl	8002f66 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8000e46:	2014      	movs	r0, #20
 8000e48:	f7ff f9c8 	bl	80001dc <NRF24_read_register>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000e52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	493c      	ldr	r1, [pc, #240]	; (8000f50 <printRadioSettings+0x768>)
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fa7b 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff f96e 	bl	800014c <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f107 0108 	add.w	r1, r7, #8
 8000e78:	230a      	movs	r3, #10
 8000e7a:	482a      	ldr	r0, [pc, #168]	; (8000f24 <printRadioSettings+0x73c>)
 8000e7c:	f002 f873 	bl	8002f66 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8000e80:	2015      	movs	r0, #21
 8000e82:	f7ff f9ab 	bl	80001dc <NRF24_read_register>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000e8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	492e      	ldr	r1, [pc, #184]	; (8000f54 <printRadioSettings+0x76c>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fa5e 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f951 	bl	800014c <strlen>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	f107 0108 	add.w	r1, r7, #8
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	481b      	ldr	r0, [pc, #108]	; (8000f24 <printRadioSettings+0x73c>)
 8000eb6:	f002 f856 	bl	8002f66 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8000eba:	2016      	movs	r0, #22
 8000ebc:	f7ff f98e 	bl	80001dc <NRF24_read_register>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000ec6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	4921      	ldr	r1, [pc, #132]	; (8000f58 <printRadioSettings+0x770>)
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 fa41 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f934 	bl	800014c <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	f107 0108 	add.w	r1, r7, #8
 8000eec:	230a      	movs	r3, #10
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <printRadioSettings+0x73c>)
 8000ef0:	f002 f839 	bl	8002f66 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8000ef4:	201c      	movs	r0, #28
 8000ef6:	f7ff f971 	bl	80001dc <NRF24_read_register>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f04:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bfcc      	ite	gt
 8000f0c:	2301      	movgt	r3, #1
 8000f0e:	2300      	movle	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	e01e      	b.n	8000f5c <printRadioSettings+0x774>
 8000f1e:	bf00      	nop
 8000f20:	08003d30 	.word	0x08003d30
 8000f24:	200000f8 	.word	0x200000f8
 8000f28:	08003d44 	.word	0x08003d44
 8000f2c:	08003d74 	.word	0x08003d74
 8000f30:	08003da4 	.word	0x08003da4
 8000f34:	08003dcc 	.word	0x08003dcc
 8000f38:	08003df4 	.word	0x08003df4
 8000f3c:	08003e1c 	.word	0x08003e1c
 8000f40:	08003e44 	.word	0x08003e44
 8000f44:	08003e70 	.word	0x08003e70
 8000f48:	08003e8c 	.word	0x08003e8c
 8000f4c:	08003ea8 	.word	0x08003ea8
 8000f50:	08003ec4 	.word	0x08003ec4
 8000f54:	08003ee0 	.word	0x08003ee0
 8000f58:	08003efc 	.word	0x08003efc
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bfcc      	ite	gt
 8000f60:	2301      	movgt	r3, #1
 8000f62:	2300      	movle	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f6c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bfcc      	ite	gt
 8000f74:	2301      	movgt	r3, #1
 8000f76:	2300      	movle	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f80:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	bfcc      	ite	gt
 8000f88:	2301      	movgt	r3, #1
 8000f8a:	2300      	movle	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000f90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f94:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bfcc      	ite	gt
 8000f9c:	2301      	movgt	r3, #1
 8000f9e:	2300      	movle	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000fa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bfcc      	ite	gt
 8000fb0:	2301      	movgt	r3, #1
 8000fb2:	2300      	movle	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f107 0008 	add.w	r0, r7, #8
 8000fba:	9303      	str	r3, [sp, #12]
 8000fbc:	9402      	str	r4, [sp, #8]
 8000fbe:	9101      	str	r1, [sp, #4]
 8000fc0:	9200      	str	r2, [sp, #0]
 8000fc2:	4633      	mov	r3, r6
 8000fc4:	462a      	mov	r2, r5
 8000fc6:	494a      	ldr	r1, [pc, #296]	; (80010f0 <printRadioSettings+0x908>)
 8000fc8:	f002 f9c8 	bl	800335c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f8bb 	bl	800014c <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f107 0108 	add.w	r1, r7, #8
 8000fde:	230a      	movs	r3, #10
 8000fe0:	4844      	ldr	r0, [pc, #272]	; (80010f4 <printRadioSettings+0x90c>)
 8000fe2:	f001 ffc0 	bl	8002f66 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8000fe6:	201d      	movs	r0, #29
 8000fe8:	f7ff f8f8 	bl	80001dc <NRF24_read_register>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8000ff2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <printRadioSettings+0x830>
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4a3d      	ldr	r2, [pc, #244]	; (80010f8 <printRadioSettings+0x910>)
 8001004:	461c      	mov	r4, r3
 8001006:	4615      	mov	r5, r2
 8001008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001010:	6020      	str	r0, [r4, #0]
 8001012:	3404      	adds	r4, #4
 8001014:	8021      	strh	r1, [r4, #0]
 8001016:	e00e      	b.n	8001036 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	4a37      	ldr	r2, [pc, #220]	; (80010fc <printRadioSettings+0x914>)
 800101e:	461c      	mov	r4, r3
 8001020:	4615      	mov	r5, r2
 8001022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001026:	e895 0003 	ldmia.w	r5, {r0, r1}
 800102a:	6020      	str	r0, [r4, #0]
 800102c:	3404      	adds	r4, #4
 800102e:	8021      	strh	r1, [r4, #0]
 8001030:	3402      	adds	r4, #2
 8001032:	0c0b      	lsrs	r3, r1, #16
 8001034:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f886 	bl	800014c <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	f107 0108 	add.w	r1, r7, #8
 8001048:	230a      	movs	r3, #10
 800104a:	482a      	ldr	r0, [pc, #168]	; (80010f4 <printRadioSettings+0x90c>)
 800104c:	f001 ff8b 	bl	8002f66 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001050:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00b      	beq.n	8001074 <printRadioSettings+0x88c>
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <printRadioSettings+0x918>)
 8001062:	461c      	mov	r4, r3
 8001064:	4615      	mov	r5, r2
 8001066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106e:	c403      	stmia	r4!, {r0, r1}
 8001070:	8022      	strh	r2, [r4, #0]
 8001072:	e00d      	b.n	8001090 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <printRadioSettings+0x91c>)
 800107a:	461c      	mov	r4, r3
 800107c:	4615      	mov	r5, r2
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001086:	c403      	stmia	r4!, {r0, r1}
 8001088:	8022      	strh	r2, [r4, #0]
 800108a:	3402      	adds	r4, #2
 800108c:	0c13      	lsrs	r3, r2, #16
 800108e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f859 	bl	800014c <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f107 0108 	add.w	r1, r7, #8
 80010a2:	230a      	movs	r3, #10
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <printRadioSettings+0x90c>)
 80010a6:	f001 ff5e 	bl	8002f66 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <printRadioSettings+0x920>)
 80010b0:	461c      	mov	r4, r3
 80010b2:	4615      	mov	r5, r2
 80010b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	8022      	strh	r2, [r4, #0]
 80010c6:	3402      	adds	r4, #2
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f83b 	bl	800014c <strlen>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f107 0108 	add.w	r1, r7, #8
 80010de:	230a      	movs	r3, #10
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <printRadioSettings+0x90c>)
 80010e2:	f001 ff40 	bl	8002f66 <HAL_UART_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3774      	adds	r7, #116	; 0x74
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08003f18 	.word	0x08003f18
 80010f4:	200000f8 	.word	0x200000f8
 80010f8:	08003f64 	.word	0x08003f64
 80010fc:	08003f7c 	.word	0x08003f7c
 8001100:	08003f94 	.word	0x08003f94
 8001104:	08003fb0 	.word	0x08003fb0
 8001108:	08003b84 	.word	0x08003b84

0800110c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800110c:	b084      	sub	sp, #16
 800110e:	b4b0      	push	{r4, r5, r7}
 8001110:	af00      	add	r7, sp, #0
 8001112:	f107 040c 	add.w	r4, r7, #12
 8001116:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <nrf24_DebugUART_Init+0x34>)
 800111c:	461c      	mov	r4, r3
 800111e:	f107 050c 	add.w	r5, r7, #12
 8001122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001132:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bcb0      	pop	{r4, r5, r7}
 800113c:	b004      	add	sp, #16
 800113e:	4770      	bx	lr
 8001140:	200000f8 	.word	0x200000f8

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	b097      	sub	sp, #92	; 0x5c
 8001148:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114a:	f000 faaf 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114e:	f000 f841 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001152:	f000 f8e5 	bl	8001320 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001156:	f000 f883 	bl	8001260 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800115a:	f000 f8b7 	bl	80012cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOB, GPIOB, CSN_PIN_Pin, hspi1);
 800115e:	4c19      	ldr	r4, [pc, #100]	; (80011c4 <main+0x80>)
 8001160:	4668      	mov	r0, sp
 8001162:	1d23      	adds	r3, r4, #4
 8001164:	2254      	movs	r2, #84	; 0x54
 8001166:	4619      	mov	r1, r3
 8001168:	f002 f8e4 	bl	8003334 <memcpy>
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001174:	4814      	ldr	r0, [pc, #80]	; (80011c8 <main+0x84>)
 8001176:	f7ff f8db 	bl	8000330 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 800117a:	4e14      	ldr	r6, [pc, #80]	; (80011cc <main+0x88>)
 800117c:	466d      	mov	r5, sp
 800117e:	f106 0410 	add.w	r4, r6, #16
 8001182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800118e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001192:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001196:	f7ff ffb9 	bl	800110c <nrf24_DebugUART_Init>

  printRadioSettings();
 800119a:	f7ff fb25 	bl	80007e8 <printRadioSettings>

  NRF24_stopListening();
 800119e:	f7ff f9a7 	bl	80004f0 <NRF24_stopListening>
  NRF24_openWritingPipe(TxpipeAddrs);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <main+0x8c>)
 80011a4:	cb18      	ldmia	r3, {r3, r4}
 80011a6:	4618      	mov	r0, r3
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff f9ad 	bl	8000508 <NRF24_openWritingPipe>
  NRF24_setAutoAck(false);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fa2c 	bl	800060c <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80011b4:	2034      	movs	r0, #52	; 0x34
 80011b6:	f7ff f9e6 	bl	8000586 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 80011ba:	2020      	movs	r0, #32
 80011bc:	f7ff f9f8 	bl	80005b0 <NRF24_setPayloadSize>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <main+0x7c>
 80011c2:	bf00      	nop
 80011c4:	20000144 	.word	0x20000144
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	2000019c 	.word	0x2000019c
 80011d0:	20000000 	.word	0x20000000

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b090      	sub	sp, #64	; 0x40
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	2228      	movs	r2, #40	; 0x28
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 f8b1 	bl	800334a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001212:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fd1f 	bl	8001c60 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001228:	f000 f8c4 	bl	80013b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2302      	movs	r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2102      	movs	r1, #2
 8001246:	4618      	mov	r0, r3
 8001248:	f000 ff8a 	bl	8002160 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001252:	f000 f8af 	bl	80013b4 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3740      	adds	r7, #64	; 0x40
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_SPI1_Init+0x64>)
 8001266:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <MX_SPI1_Init+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_SPI1_Init+0x64>)
 800126c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001270:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_SPI1_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_SPI1_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_SPI1_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_SPI1_Init+0x64>)
 800128c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001290:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_SPI1_Init+0x64>)
 8001294:	2220      	movs	r2, #32
 8001296:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_SPI1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_SPI1_Init+0x64>)
 80012ac:	220a      	movs	r2, #10
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_SPI1_Init+0x64>)
 80012b2:	f001 f8f1 	bl	8002498 <HAL_SPI_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012bc:	f000 f87a 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000144 	.word	0x20000144
 80012c8:	40013000 	.word	0x40013000

080012cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_USART2_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 8001304:	f001 fde2 	bl	8002ecc <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 f851 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000019c 	.word	0x2000019c
 800131c:	40004400 	.word	0x40004400

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_GPIO_Init+0x8c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_GPIO_Init+0x8c>)
 800133a:	f043 0320 	orr.w	r3, r3, #32
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_GPIO_Init+0x8c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0320 	and.w	r3, r3, #32
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_GPIO_Init+0x8c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a16      	ldr	r2, [pc, #88]	; (80013ac <MX_GPIO_Init+0x8c>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_GPIO_Init+0x8c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_GPIO_Init+0x8c>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <MX_GPIO_Init+0x8c>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_GPIO_Init+0x8c>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_PIN_Pin|CE_PIN_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2103      	movs	r1, #3
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <MX_GPIO_Init+0x90>)
 8001382:	f000 fc55 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_PIN_Pin CE_PIN_Pin */
  GPIO_InitStruct.Pin = CSN_PIN_Pin|CE_PIN_Pin;
 8001386:	2303      	movs	r3, #3
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2302      	movs	r3, #2
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_GPIO_Init+0x90>)
 800139e:	f000 faed 	bl	800197c <HAL_GPIO_Init>

}
 80013a2:	bf00      	nop
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010c00 	.word	0x40010c00

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a14      	ldr	r2, [pc, #80]	; (800141c <HAL_MspInit+0x5c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_MspInit+0x5c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <HAL_MspInit+0x5c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_MspInit+0x60>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_MspInit+0x60>)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000

08001424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <HAL_SPI_MspInit+0x88>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d12f      	bne.n	80014a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_SPI_MspInit+0x8c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_SPI_MspInit+0x8c>)
 800144a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_SPI_MspInit+0x8c>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_SPI_MspInit+0x8c>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <HAL_SPI_MspInit+0x8c>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_SPI_MspInit+0x8c>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <HAL_SPI_MspInit+0x90>)
 8001488:	f000 fa78 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_SPI_MspInit+0x90>)
 80014a0:	f000 fa6c 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010800 	.word	0x40010800

080014b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_UART_MspInit+0x88>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d12f      	bne.n	8001538 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_UART_MspInit+0x8c>)
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_UART_MspInit+0x8c>)
 80014de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e2:	61d3      	str	r3, [r2, #28]
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_UART_MspInit+0x8c>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_UART_MspInit+0x8c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_UART_MspInit+0x8c>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_UART_MspInit+0x8c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001508:	2304      	movs	r3, #4
 800150a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	480b      	ldr	r0, [pc, #44]	; (8001548 <HAL_UART_MspInit+0x90>)
 800151c:	f000 fa2e 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001520:	2308      	movs	r3, #8
 8001522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_UART_MspInit+0x90>)
 8001534:	f000 fa22 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40004400 	.word	0x40004400
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <HardFault_Handler+0x4>

0800155e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <BusFault_Handler+0x4>

0800156a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <UsageFault_Handler+0x4>

08001570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 f8ce 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x50>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x16>
		heap_end = &end;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <_sbrk+0x50>)
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <_sbrk+0x54>)
 80015b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <_sbrk+0x50>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <_sbrk+0x50>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	466a      	mov	r2, sp
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d907      	bls.n	80015da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80015ca:	f001 fe89 	bl	80032e0 <__errno>
 80015ce:	4602      	mov	r2, r0
 80015d0:	230c      	movs	r3, #12
 80015d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	e006      	b.n	80015e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <_sbrk+0x50>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <_sbrk+0x50>)
 80015e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000138 	.word	0x20000138
 80015f4:	200001e8 	.word	0x200001e8

080015f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <SystemInit+0x5c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <SystemInit+0x5c>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <SystemInit+0x5c>)
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	4911      	ldr	r1, [pc, #68]	; (8001654 <SystemInit+0x5c>)
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <SystemInit+0x60>)
 8001610:	4013      	ands	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <SystemInit+0x5c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <SystemInit+0x5c>)
 800161a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <SystemInit+0x5c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SystemInit+0x5c>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <SystemInit+0x5c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <SystemInit+0x5c>)
 8001636:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800163a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SystemInit+0x5c>)
 800163e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001642:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SystemInit+0x64>)
 8001646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800164a:	609a      	str	r2, [r3, #8]
#endif 
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000
 8001658:	f8ff0000 	.word	0xf8ff0000
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001660:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001662:	e003      	b.n	800166c <LoopCopyDataInit>

08001664 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001666:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001668:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800166a:	3104      	adds	r1, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001670:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001672:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001674:	d3f6      	bcc.n	8001664 <CopyDataInit>
  ldr r2, =_sbss
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001678:	e002      	b.n	8001680 <LoopFillZerobss>

0800167a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800167c:	f842 3b04 	str.w	r3, [r2], #4

08001680 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001684:	d3f9      	bcc.n	800167a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001686:	f7ff ffb7 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f001 fe2f 	bl	80032ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168e:	f7ff fd59 	bl	8001144 <main>
  bx lr
 8001692:	4770      	bx	lr
  ldr r3, =_sidata
 8001694:	08004130 	.word	0x08004130
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800169c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80016a0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80016a4:	200001e4 	.word	0x200001e4

080016a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_Init+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_Init+0x28>)
 80016b6:	f043 0310 	orr.w	r3, r3, #16
 80016ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f929 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff fe7a 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f933 	bl	8001962 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f909 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000008 	.word	0x20000008
 8001730:	20000010 	.word	0x20000010
 8001734:	2000000c 	.word	0x2000000c

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <HAL_IncTick+0x20>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000010 	.word	0x20000010
 8001758:	200001dc 	.word	0x200001dc

0800175c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	; (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	200001dc 	.word	0x200001dc

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff0 	bl	800175c <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_Delay+0x40>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffe0 	bl	800175c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000010 	.word	0x20000010

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff90 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff49 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff5e 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff90 	bl	800186c <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5f 	bl	8001818 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffb0 	bl	80018d0 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	e127      	b.n	8001be0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001990:	2201      	movs	r2, #1
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 8116 	bne.w	8001bda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d034      	beq.n	8001a20 <HAL_GPIO_Init+0xa4>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d80d      	bhi.n	80019d6 <HAL_GPIO_Init+0x5a>
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d02b      	beq.n	8001a16 <HAL_GPIO_Init+0x9a>
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d804      	bhi.n	80019cc <HAL_GPIO_Init+0x50>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d031      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d01c      	beq.n	8001a04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ca:	e048      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d043      	beq.n	8001a58 <HAL_GPIO_Init+0xdc>
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d01b      	beq.n	8001a0c <HAL_GPIO_Init+0x90>
          break;
 80019d4:	e043      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d6:	4a89      	ldr	r2, [pc, #548]	; (8001bfc <HAL_GPIO_Init+0x280>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d026      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019dc:	4a87      	ldr	r2, [pc, #540]	; (8001bfc <HAL_GPIO_Init+0x280>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d806      	bhi.n	80019f0 <HAL_GPIO_Init+0x74>
 80019e2:	4a87      	ldr	r2, [pc, #540]	; (8001c00 <HAL_GPIO_Init+0x284>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d020      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019e8:	4a86      	ldr	r2, [pc, #536]	; (8001c04 <HAL_GPIO_Init+0x288>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01d      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
          break;
 80019ee:	e036      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019f0:	4a85      	ldr	r2, [pc, #532]	; (8001c08 <HAL_GPIO_Init+0x28c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019f6:	4a85      	ldr	r2, [pc, #532]	; (8001c0c <HAL_GPIO_Init+0x290>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d016      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
 80019fc:	4a84      	ldr	r2, [pc, #528]	; (8001c10 <HAL_GPIO_Init+0x294>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0xae>
          break;
 8001a02:	e02c      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e028      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	3304      	adds	r3, #4
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e023      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e01e      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	330c      	adds	r3, #12
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e019      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a32:	2304      	movs	r3, #4
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e012      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a40:	2308      	movs	r3, #8
 8001a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	611a      	str	r2, [r3, #16]
          break;
 8001a4a:	e008      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	615a      	str	r2, [r3, #20]
          break;
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2bff      	cmp	r3, #255	; 0xff
 8001a62:	d801      	bhi.n	8001a68 <HAL_GPIO_Init+0xec>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	e001      	b.n	8001a6c <HAL_GPIO_Init+0xf0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2bff      	cmp	r3, #255	; 0xff
 8001a72:	d802      	bhi.n	8001a7a <HAL_GPIO_Init+0xfe>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x104>
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3b08      	subs	r3, #8
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	210f      	movs	r1, #15
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	401a      	ands	r2, r3
 8001a92:	6a39      	ldr	r1, [r7, #32]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8096 	beq.w	8001bda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aae:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_GPIO_Init+0x298>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_GPIO_Init+0x298>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b56      	ldr	r3, [pc, #344]	; (8001c14 <HAL_GPIO_Init+0x298>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac6:	4a54      	ldr	r2, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x29c>)
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <HAL_GPIO_Init+0x2a0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x19e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <HAL_GPIO_Init+0x2a4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x19a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a49      	ldr	r2, [pc, #292]	; (8001c24 <HAL_GPIO_Init+0x2a8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x196>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x192>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x1a0>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x1a0>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x1a0>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x1a0>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b2c:	493a      	ldr	r1, [pc, #232]	; (8001c18 <HAL_GPIO_Init+0x29c>)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4938      	ldr	r1, [pc, #224]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b54:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4933      	ldr	r1, [pc, #204]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	492e      	ldr	r1, [pc, #184]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
 8001b7a:	e006      	b.n	8001b8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	4929      	ldr	r1, [pc, #164]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	4924      	ldr	r1, [pc, #144]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
 8001ba2:	e006      	b.n	8001bb2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	491f      	ldr	r1, [pc, #124]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	491a      	ldr	r1, [pc, #104]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60cb      	str	r3, [r1, #12]
 8001bca:	e006      	b.n	8001bda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4915      	ldr	r1, [pc, #84]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3301      	adds	r3, #1
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f47f aed0 	bne.w	8001990 <HAL_GPIO_Init+0x14>
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	372c      	adds	r7, #44	; 0x2c
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	10210000 	.word	0x10210000
 8001c00:	10110000 	.word	0x10110000
 8001c04:	10120000 	.word	0x10120000
 8001c08:	10310000 	.word	0x10310000
 8001c0c:	10320000 	.word	0x10320000
 8001c10:	10220000 	.word	0x10220000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40010c00 	.word	0x40010c00
 8001c24:	40011000 	.word	0x40011000
 8001c28:	40011400 	.word	0x40011400
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	611a      	str	r2, [r3, #16]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e26c      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8087 	beq.w	8001d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c80:	4b92      	ldr	r3, [pc, #584]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d00c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c8c:	4b8f      	ldr	r3, [pc, #572]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d112      	bne.n	8001cbe <HAL_RCC_OscConfig+0x5e>
 8001c98:	4b8c      	ldr	r3, [pc, #560]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d10b      	bne.n	8001cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca6:	4b89      	ldr	r3, [pc, #548]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d06c      	beq.n	8001d8c <HAL_RCC_OscConfig+0x12c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d168      	bne.n	8001d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e246      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x76>
 8001cc8:	4b80      	ldr	r3, [pc, #512]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a7f      	ldr	r2, [pc, #508]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e02e      	b.n	8001d34 <HAL_RCC_OscConfig+0xd4>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x98>
 8001cde:	4b7b      	ldr	r3, [pc, #492]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7a      	ldr	r2, [pc, #488]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b78      	ldr	r3, [pc, #480]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a77      	ldr	r2, [pc, #476]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0xd4>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0xbc>
 8001d02:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a71      	ldr	r2, [pc, #452]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a6e      	ldr	r2, [pc, #440]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0xd4>
 8001d1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a67      	ldr	r2, [pc, #412]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fd0e 	bl	800175c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fd0a 	bl	800175c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1fa      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xe4>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fcfa 	bl	800175c <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fcf6 	bl	800175c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1e6      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x10c>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d063      	beq.n	8001e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d11c      	bne.n	8001dec <HAL_RCC_OscConfig+0x18c>
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x176>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1ba      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4939      	ldr	r1, [pc, #228]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	e03a      	b.n	8001e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fcaf 	bl	800175c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff fcab 	bl	800175c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e19b      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4927      	ldr	r1, [pc, #156]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e015      	b.n	8001e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_RCC_OscConfig+0x270>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fc8e 	bl	800175c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e44:	f7ff fc8a 	bl	800175c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e17a      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03a      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d019      	beq.n	8001eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fc6e 	bl	800175c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff fc6a 	bl	800175c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e15a      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f000 fada 	bl	800245c <RCC_Delay>
 8001ea8:	e01c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fc54 	bl	800175c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb6:	e00f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fc50 	bl	800175c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d908      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e140      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	42420000 	.word	0x42420000
 8001ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed8:	4b9e      	ldr	r3, [pc, #632]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1e9      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a6 	beq.w	800203e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef6:	4b97      	ldr	r3, [pc, #604]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	4b94      	ldr	r3, [pc, #592]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a93      	ldr	r2, [pc, #588]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	61d3      	str	r3, [r2, #28]
 8001f0e:	4b91      	ldr	r3, [pc, #580]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d118      	bne.n	8001f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2a:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a8a      	ldr	r2, [pc, #552]	; (8002158 <HAL_RCC_OscConfig+0x4f8>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f36:	f7ff fc11 	bl	800175c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7ff fc0d 	bl	800175c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b64      	cmp	r3, #100	; 0x64
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0fd      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b81      	ldr	r3, [pc, #516]	; (8002158 <HAL_RCC_OscConfig+0x4f8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x312>
 8001f64:	4b7b      	ldr	r3, [pc, #492]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a7a      	ldr	r2, [pc, #488]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	e02d      	b.n	8001fce <HAL_RCC_OscConfig+0x36e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x334>
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	6213      	str	r3, [r2, #32]
 8001f86:	4b73      	ldr	r3, [pc, #460]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a72      	ldr	r2, [pc, #456]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f023 0304 	bic.w	r3, r3, #4
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	e01c      	b.n	8001fce <HAL_RCC_OscConfig+0x36e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x356>
 8001f9c:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a6c      	ldr	r2, [pc, #432]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a69      	ldr	r2, [pc, #420]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0x36e>
 8001fb6:	4b67      	ldr	r3, [pc, #412]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4a66      	ldr	r2, [pc, #408]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6213      	str	r3, [r2, #32]
 8001fc2:	4b64      	ldr	r3, [pc, #400]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a63      	ldr	r2, [pc, #396]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	f023 0304 	bic.w	r3, r3, #4
 8001fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d015      	beq.n	8002002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fbc1 	bl	800175c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff fbbd 	bl	800175c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0ab      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ee      	beq.n	8001fde <HAL_RCC_OscConfig+0x37e>
 8002000:	e014      	b.n	800202c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7ff fbab 	bl	800175c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff fba7 	bl	800175c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e095      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002020:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1ee      	bne.n	800200a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d105      	bne.n	800203e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002032:	4b48      	ldr	r3, [pc, #288]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4a47      	ldr	r2, [pc, #284]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800203c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8081 	beq.w	800214a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002048:	4b42      	ldr	r3, [pc, #264]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b08      	cmp	r3, #8
 8002052:	d061      	beq.n	8002118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d146      	bne.n	80020ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205c:	4b3f      	ldr	r3, [pc, #252]	; (800215c <HAL_RCC_OscConfig+0x4fc>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7ff fb7b 	bl	800175c <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206a:	f7ff fb77 	bl	800175c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e067      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	4b35      	ldr	r3, [pc, #212]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002090:	d108      	bne.n	80020a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	492d      	ldr	r1, [pc, #180]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a19      	ldr	r1, [r3, #32]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	430b      	orrs	r3, r1
 80020b6:	4927      	ldr	r1, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_OscConfig+0x4fc>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff fb4b 	bl	800175c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ca:	f7ff fb47 	bl	800175c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e037      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x46a>
 80020e8:	e02f      	b.n	800214a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_RCC_OscConfig+0x4fc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fb34 	bl	800175c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff fb30 	bl	800175c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e020      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x498>
 8002116:	e018      	b.n	800214a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e013      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	429a      	cmp	r2, r3
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	40007000 	.word	0x40007000
 800215c:	42420060 	.word	0x42420060

08002160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0d0      	b.n	8002316 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002174:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d910      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0207 	bic.w	r2, r3, #7
 800218a:	4965      	ldr	r1, [pc, #404]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b63      	ldr	r3, [pc, #396]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0b8      	b.n	8002316 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d020      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021bc:	4b59      	ldr	r3, [pc, #356]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a58      	ldr	r2, [pc, #352]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d4:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e0:	4b50      	ldr	r3, [pc, #320]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	494d      	ldr	r1, [pc, #308]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d040      	beq.n	8002280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d115      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e07f      	b.n	8002316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e073      	b.n	8002316 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e06b      	b.n	8002316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223e:	4b39      	ldr	r3, [pc, #228]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4936      	ldr	r1, [pc, #216]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002250:	f7ff fa84 	bl	800175c <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	e00a      	b.n	800226e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f7ff fa80 	bl	800175c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e053      	b.n	8002316 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 020c 	and.w	r2, r3, #12
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	429a      	cmp	r2, r3
 800227e:	d1eb      	bne.n	8002258 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d210      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	4922      	ldr	r1, [pc, #136]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e032      	b.n	8002316 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4916      	ldr	r1, [pc, #88]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	490e      	ldr	r1, [pc, #56]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ee:	f000 f821 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80022f2:	4601      	mov	r1, r0
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	fa21 f303 	lsr.w	r3, r1, r3
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1cc>)
 8002308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_ClockConfig+0x1d0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f9e2 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40022000 	.word	0x40022000
 8002324:	40021000 	.word	0x40021000
 8002328:	080040dc 	.word	0x080040dc
 800232c:	20000008 	.word	0x20000008
 8002330:	2000000c 	.word	0x2000000c

08002334 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	b490      	push	{r4, r7}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800233c:	1d3c      	adds	r4, r7, #4
 800233e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800235e:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b04      	cmp	r3, #4
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x40>
 800236e:	2b08      	cmp	r3, #8
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x46>
 8002372:	e02d      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002376:	623b      	str	r3, [r7, #32]
      break;
 8002378:	e02d      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	0c9b      	lsrs	r3, r3, #18
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002386:	4413      	add	r3, r2
 8002388:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800238c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0c5b      	lsrs	r3, r3, #17
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023a6:	4413      	add	r3, r2
 80023a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b2:	fb02 f203 	mul.w	r2, r2, r3
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	e004      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	623b      	str	r3, [r7, #32]
      break;
 80023ce:	e002      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023d2:	623b      	str	r3, [r7, #32]
      break;
 80023d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d6:	6a3b      	ldr	r3, [r7, #32]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc90      	pop	{r4, r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	080040c8 	.word	0x080040c8
 80023e8:	080040d8 	.word	0x080040d8
 80023ec:	40021000 	.word	0x40021000
 80023f0:	007a1200 	.word	0x007a1200
 80023f4:	003d0900 	.word	0x003d0900

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b02      	ldr	r3, [pc, #8]	; (8002408 <HAL_RCC_GetHCLKFreq+0x10>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	20000008 	.word	0x20000008

0800240c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002410:	f7ff fff2 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002414:	4601      	mov	r1, r0
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4a03      	ldr	r2, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	080040ec 	.word	0x080040ec

08002434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002438:	f7ff ffde 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 800243c:	4601      	mov	r1, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0adb      	lsrs	r3, r3, #11
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	080040ec 	.word	0x080040ec

0800245c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <RCC_Delay+0x34>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <RCC_Delay+0x38>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0a5b      	lsrs	r3, r3, #9
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002478:	bf00      	nop
  }
  while (Delay --);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	60fa      	str	r2, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <RCC_Delay+0x1c>
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000008 	.word	0x20000008
 8002494:	10624dd3 	.word	0x10624dd3

08002498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e053      	b.n	8002552 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7fe ffad 	bl	8001424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	ea42 0103 	orr.w	r1, r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	0c1a      	lsrs	r2, r3, #16
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f002 0204 	and.w	r2, r2, #4
 8002530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b088      	sub	sp, #32
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_SPI_Transmit+0x22>
 8002578:	2302      	movs	r3, #2
 800257a:	e11e      	b.n	80027ba <HAL_SPI_Transmit+0x260>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002584:	f7ff f8ea 	bl	800175c <HAL_GetTick>
 8002588:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d002      	beq.n	80025a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800259a:	2302      	movs	r3, #2
 800259c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800259e:	e103      	b.n	80027a8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_SPI_Transmit+0x52>
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025b0:	e0fa      	b.n	80027a8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2203      	movs	r2, #3
 80025b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	88fa      	ldrh	r2, [r7, #6]
 80025ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f8:	d107      	bne.n	800260a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002608:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	d007      	beq.n	8002628 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002630:	d14b      	bne.n	80026ca <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_SPI_Transmit+0xe6>
 800263a:	8afb      	ldrh	r3, [r7, #22]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d13e      	bne.n	80026be <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002664:	e02b      	b.n	80026be <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b02      	cmp	r3, #2
 8002672:	d112      	bne.n	800269a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	1c9a      	adds	r2, r3, #2
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	86da      	strh	r2, [r3, #54]	; 0x36
 8002698:	e011      	b.n	80026be <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269a:	f7ff f85f 	bl	800175c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d803      	bhi.n	80026b2 <HAL_SPI_Transmit+0x158>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d102      	bne.n	80026b8 <HAL_SPI_Transmit+0x15e>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026bc:	e074      	b.n	80027a8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ce      	bne.n	8002666 <HAL_SPI_Transmit+0x10c>
 80026c8:	e04c      	b.n	8002764 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_SPI_Transmit+0x17e>
 80026d2:	8afb      	ldrh	r3, [r7, #22]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d140      	bne.n	800275a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026fe:	e02c      	b.n	800275a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b02      	cmp	r3, #2
 800270c:	d113      	bne.n	8002736 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	86da      	strh	r2, [r3, #54]	; 0x36
 8002734:	e011      	b.n	800275a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002736:	f7ff f811 	bl	800175c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d803      	bhi.n	800274e <HAL_SPI_Transmit+0x1f4>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d102      	bne.n	8002754 <HAL_SPI_Transmit+0x1fa>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002758:	e026      	b.n	80027a8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1cd      	bne.n	8002700 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fb91 	bl	8002e90 <SPI_EndRxTxTransaction>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e000      	b.n	80027a8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80027a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b088      	sub	sp, #32
 80027c6:	af02      	add	r7, sp, #8
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027de:	d112      	bne.n	8002806 <HAL_SPI_Receive+0x44>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10e      	bne.n	8002806 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2204      	movs	r2, #4
 80027ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f8e9 	bl	80029d4 <HAL_SPI_TransmitReceive>
 8002802:	4603      	mov	r3, r0
 8002804:	e0e2      	b.n	80029cc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_SPI_Receive+0x52>
 8002810:	2302      	movs	r3, #2
 8002812:	e0db      	b.n	80029cc <HAL_SPI_Receive+0x20a>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800281c:	f7fe ff9e 	bl	800175c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d002      	beq.n	8002834 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800282e:	2302      	movs	r3, #2
 8002830:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002832:	e0c2      	b.n	80029ba <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_SPI_Receive+0x7e>
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002844:	e0b9      	b.n	80029ba <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2204      	movs	r2, #4
 800284a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288c:	d107      	bne.n	800289e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d007      	beq.n	80028bc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d162      	bne.n	800298a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028c4:	e02e      	b.n	8002924 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d115      	bne.n	8002900 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f103 020c 	add.w	r2, r3, #12
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028fe:	e011      	b.n	8002924 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002900:	f7fe ff2c 	bl	800175c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d803      	bhi.n	8002918 <HAL_SPI_Receive+0x156>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d102      	bne.n	800291e <HAL_SPI_Receive+0x15c>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002922:	e04a      	b.n	80029ba <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1cb      	bne.n	80028c6 <HAL_SPI_Receive+0x104>
 800292e:	e031      	b.n	8002994 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d113      	bne.n	8002966 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	b292      	uxth	r2, r2
 800294a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	1c9a      	adds	r2, r3, #2
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002964:	e011      	b.n	800298a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002966:	f7fe fef9 	bl	800175c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d803      	bhi.n	800297e <HAL_SPI_Receive+0x1bc>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d102      	bne.n	8002984 <HAL_SPI_Receive+0x1c2>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002988:	e017      	b.n	80029ba <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1cd      	bne.n	8002930 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fa27 	bl	8002dec <SPI_EndRxTransaction>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
 80029b6:	e000      	b.n	80029ba <HAL_SPI_Receive+0x1f8>
  }

error :
 80029b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	; 0x30
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029e2:	2301      	movs	r3, #1
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_SPI_TransmitReceive+0x26>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e18a      	b.n	8002d10 <HAL_SPI_TransmitReceive+0x33c>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a02:	f7fe feab 	bl	800175c <HAL_GetTick>
 8002a06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d00f      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x70>
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a2a:	d107      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x68>
 8002a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d003      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a42:	e15b      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x82>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x82>
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a5c:	e14e      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d003      	beq.n	8002a72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	887a      	ldrh	r2, [r7, #2]
 8002a9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	d007      	beq.n	8002ac6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ace:	d178      	bne.n	8002bc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_TransmitReceive+0x10a>
 8002ad8:	8b7b      	ldrh	r3, [r7, #26]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d166      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	881a      	ldrh	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	1c9a      	adds	r2, r3, #2
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b02:	e053      	b.n	8002bac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d11b      	bne.n	8002b4a <HAL_SPI_TransmitReceive+0x176>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d016      	beq.n	8002b4a <HAL_SPI_TransmitReceive+0x176>
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d113      	bne.n	8002b4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	1c9a      	adds	r2, r3, #2
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d119      	bne.n	8002b8c <HAL_SPI_TransmitReceive+0x1b8>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b8c:	f7fe fde6 	bl	800175c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d807      	bhi.n	8002bac <HAL_SPI_TransmitReceive+0x1d8>
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d003      	beq.n	8002bac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002baa:	e0a7      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1a6      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x130>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1a1      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x130>
 8002bc0:	e07c      	b.n	8002cbc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_SPI_TransmitReceive+0x1fc>
 8002bca:	8b7b      	ldrh	r3, [r7, #26]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d16b      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bf6:	e057      	b.n	8002ca8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11c      	bne.n	8002c40 <HAL_SPI_TransmitReceive+0x26c>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_SPI_TransmitReceive+0x26c>
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d114      	bne.n	8002c40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d119      	bne.n	8002c82 <HAL_SPI_TransmitReceive+0x2ae>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d014      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c82:	f7fe fd6b 	bl	800175c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d803      	bhi.n	8002c9a <HAL_SPI_TransmitReceive+0x2c6>
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d102      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2cc>
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ca6:	e029      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1a2      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x224>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d19d      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f8e5 	bl	8002e90 <SPI_EndRxTxTransaction>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d006      	beq.n	8002cda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cd8:	e010      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	e000      	b.n	8002cfc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3730      	adds	r7, #48	; 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d28:	e04c      	b.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d048      	beq.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d32:	f7fe fd13 	bl	800175c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d902      	bls.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d13d      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d60:	d111      	bne.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d6a:	d004      	beq.n	8002d76 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d74:	d107      	bne.n	8002d86 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8e:	d10f      	bne.n	8002db0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e00f      	b.n	8002de4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d1a3      	bne.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e00:	d111      	bne.n	8002e26 <SPI_EndRxTransaction+0x3a>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0a:	d004      	beq.n	8002e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e14:	d107      	bne.n	8002e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e24:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e2e:	d117      	bne.n	8002e60 <SPI_EndRxTransaction+0x74>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	d112      	bne.n	8002e60 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2101      	movs	r1, #1
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ff67 	bl	8002d18 <SPI_WaitFlagStateUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01a      	beq.n	8002e86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e013      	b.n	8002e88 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff ff54 	bl	8002d18 <SPI_WaitFlagStateUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e000      	b.n	8002e88 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f7ff ff36 	bl	8002d18 <SPI_WaitFlagStateUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f043 0220 	orr.w	r2, r3, #32
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e000      	b.n	8002ec4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e03f      	b.n	8002f5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fae0 	bl	80014b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f90b 	bl	800312c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b088      	sub	sp, #32
 8002f6a:	af02      	add	r7, sp, #8
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	f040 8083 	bne.w	800308e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_UART_Transmit+0x2e>
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e07b      	b.n	8003090 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_UART_Transmit+0x40>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e074      	b.n	8003090 <HAL_UART_Transmit+0x12a>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2221      	movs	r2, #33	; 0x21
 8002fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fbce 	bl	800175c <HAL_GetTick>
 8002fc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fce:	e042      	b.n	8003056 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	d122      	bne.n	800302e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f850 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e046      	b.n	8003090 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003014:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	3302      	adds	r3, #2
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	e017      	b.n	8003056 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	e013      	b.n	8003056 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f82d 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e023      	b.n	8003090 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	60ba      	str	r2, [r7, #8]
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1b7      	bne.n	8002fd0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	2140      	movs	r1, #64	; 0x40
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f814 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e00a      	b.n	8003090 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e000      	b.n	8003090 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800308e:	2302      	movs	r3, #2
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a8:	e02c      	b.n	8003104 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d028      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030b8:	f7fe fb50 	bl	800175c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d21d      	bcs.n	8003104 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e00f      	b.n	8003124 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	429a      	cmp	r2, r3
 8003120:	d0c3      	beq.n	80030aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003166:	f023 030c 	bic.w	r3, r3, #12
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	68f9      	ldr	r1, [r7, #12]
 8003170:	430b      	orrs	r3, r1
 8003172:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <UART_SetConfig+0x1ac>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d14e      	bne.n	8003232 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7ff f94e 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8003198:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009a      	lsls	r2, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	4a4a      	ldr	r2, [pc, #296]	; (80032dc <UART_SetConfig+0x1b0>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	0119      	lsls	r1, r3, #4
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d0:	4b42      	ldr	r3, [pc, #264]	; (80032dc <UART_SetConfig+0x1b0>)
 80031d2:	fba3 0302 	umull	r0, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2064      	movs	r0, #100	; 0x64
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	3332      	adds	r3, #50	; 0x32
 80031e4:	4a3d      	ldr	r2, [pc, #244]	; (80032dc <UART_SetConfig+0x1b0>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f0:	4419      	add	r1, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009a      	lsls	r2, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	fbb2 f2f3 	udiv	r2, r2, r3
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <UART_SetConfig+0x1b0>)
 800320a:	fba3 0302 	umull	r0, r3, r3, r2
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2064      	movs	r0, #100	; 0x64
 8003212:	fb00 f303 	mul.w	r3, r0, r3
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	3332      	adds	r3, #50	; 0x32
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <UART_SetConfig+0x1b0>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	f003 020f 	and.w	r2, r3, #15
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	440a      	add	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003230:	e04d      	b.n	80032ce <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003232:	f7ff f8eb 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8003236:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009a      	lsls	r2, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	4a23      	ldr	r2, [pc, #140]	; (80032dc <UART_SetConfig+0x1b0>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	0119      	lsls	r1, r3, #4
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009a      	lsls	r2, r3, #2
 8003262:	441a      	add	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	fbb2 f2f3 	udiv	r2, r2, r3
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <UART_SetConfig+0x1b0>)
 8003270:	fba3 0302 	umull	r0, r3, r3, r2
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	2064      	movs	r0, #100	; 0x64
 8003278:	fb00 f303 	mul.w	r3, r0, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	3332      	adds	r3, #50	; 0x32
 8003282:	4a16      	ldr	r2, [pc, #88]	; (80032dc <UART_SetConfig+0x1b0>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328e:	4419      	add	r1, r3
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009a      	lsls	r2, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <UART_SetConfig+0x1b0>)
 80032a8:	fba3 0302 	umull	r0, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2064      	movs	r0, #100	; 0x64
 80032b0:	fb00 f303 	mul.w	r3, r0, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	3332      	adds	r3, #50	; 0x32
 80032ba:	4a08      	ldr	r2, [pc, #32]	; (80032dc <UART_SetConfig+0x1b0>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	440a      	add	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40013800 	.word	0x40013800
 80032dc:	51eb851f 	.word	0x51eb851f

080032e0 <__errno>:
 80032e0:	4b01      	ldr	r3, [pc, #4]	; (80032e8 <__errno+0x8>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000014 	.word	0x20000014

080032ec <__libc_init_array>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	2500      	movs	r5, #0
 80032f0:	4e0c      	ldr	r6, [pc, #48]	; (8003324 <__libc_init_array+0x38>)
 80032f2:	4c0d      	ldr	r4, [pc, #52]	; (8003328 <__libc_init_array+0x3c>)
 80032f4:	1ba4      	subs	r4, r4, r6
 80032f6:	10a4      	asrs	r4, r4, #2
 80032f8:	42a5      	cmp	r5, r4
 80032fa:	d109      	bne.n	8003310 <__libc_init_array+0x24>
 80032fc:	f000 fc36 	bl	8003b6c <_init>
 8003300:	2500      	movs	r5, #0
 8003302:	4e0a      	ldr	r6, [pc, #40]	; (800332c <__libc_init_array+0x40>)
 8003304:	4c0a      	ldr	r4, [pc, #40]	; (8003330 <__libc_init_array+0x44>)
 8003306:	1ba4      	subs	r4, r4, r6
 8003308:	10a4      	asrs	r4, r4, #2
 800330a:	42a5      	cmp	r5, r4
 800330c:	d105      	bne.n	800331a <__libc_init_array+0x2e>
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003314:	4798      	blx	r3
 8003316:	3501      	adds	r5, #1
 8003318:	e7ee      	b.n	80032f8 <__libc_init_array+0xc>
 800331a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800331e:	4798      	blx	r3
 8003320:	3501      	adds	r5, #1
 8003322:	e7f2      	b.n	800330a <__libc_init_array+0x1e>
 8003324:	08004128 	.word	0x08004128
 8003328:	08004128 	.word	0x08004128
 800332c:	08004128 	.word	0x08004128
 8003330:	0800412c 	.word	0x0800412c

08003334 <memcpy>:
 8003334:	b510      	push	{r4, lr}
 8003336:	1e43      	subs	r3, r0, #1
 8003338:	440a      	add	r2, r1
 800333a:	4291      	cmp	r1, r2
 800333c:	d100      	bne.n	8003340 <memcpy+0xc>
 800333e:	bd10      	pop	{r4, pc}
 8003340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003348:	e7f7      	b.n	800333a <memcpy+0x6>

0800334a <memset>:
 800334a:	4603      	mov	r3, r0
 800334c:	4402      	add	r2, r0
 800334e:	4293      	cmp	r3, r2
 8003350:	d100      	bne.n	8003354 <memset+0xa>
 8003352:	4770      	bx	lr
 8003354:	f803 1b01 	strb.w	r1, [r3], #1
 8003358:	e7f9      	b.n	800334e <memset+0x4>
	...

0800335c <siprintf>:
 800335c:	b40e      	push	{r1, r2, r3}
 800335e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003362:	b500      	push	{lr}
 8003364:	b09c      	sub	sp, #112	; 0x70
 8003366:	ab1d      	add	r3, sp, #116	; 0x74
 8003368:	9002      	str	r0, [sp, #8]
 800336a:	9006      	str	r0, [sp, #24]
 800336c:	9107      	str	r1, [sp, #28]
 800336e:	9104      	str	r1, [sp, #16]
 8003370:	4808      	ldr	r0, [pc, #32]	; (8003394 <siprintf+0x38>)
 8003372:	4909      	ldr	r1, [pc, #36]	; (8003398 <siprintf+0x3c>)
 8003374:	f853 2b04 	ldr.w	r2, [r3], #4
 8003378:	9105      	str	r1, [sp, #20]
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	a902      	add	r1, sp, #8
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	f000 f866 	bl	8003450 <_svfiprintf_r>
 8003384:	2200      	movs	r2, #0
 8003386:	9b02      	ldr	r3, [sp, #8]
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	b01c      	add	sp, #112	; 0x70
 800338c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003390:	b003      	add	sp, #12
 8003392:	4770      	bx	lr
 8003394:	20000014 	.word	0x20000014
 8003398:	ffff0208 	.word	0xffff0208

0800339c <__ssputs_r>:
 800339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	4682      	mov	sl, r0
 80033a4:	429e      	cmp	r6, r3
 80033a6:	460c      	mov	r4, r1
 80033a8:	4690      	mov	r8, r2
 80033aa:	4699      	mov	r9, r3
 80033ac:	d837      	bhi.n	800341e <__ssputs_r+0x82>
 80033ae:	898a      	ldrh	r2, [r1, #12]
 80033b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033b4:	d031      	beq.n	800341a <__ssputs_r+0x7e>
 80033b6:	2302      	movs	r3, #2
 80033b8:	6825      	ldr	r5, [r4, #0]
 80033ba:	6909      	ldr	r1, [r1, #16]
 80033bc:	1a6f      	subs	r7, r5, r1
 80033be:	6965      	ldr	r5, [r4, #20]
 80033c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80033c8:	f109 0301 	add.w	r3, r9, #1
 80033cc:	443b      	add	r3, r7
 80033ce:	429d      	cmp	r5, r3
 80033d0:	bf38      	it	cc
 80033d2:	461d      	movcc	r5, r3
 80033d4:	0553      	lsls	r3, r2, #21
 80033d6:	d530      	bpl.n	800343a <__ssputs_r+0x9e>
 80033d8:	4629      	mov	r1, r5
 80033da:	f000 fb2d 	bl	8003a38 <_malloc_r>
 80033de:	4606      	mov	r6, r0
 80033e0:	b950      	cbnz	r0, 80033f8 <__ssputs_r+0x5c>
 80033e2:	230c      	movs	r3, #12
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295
 80033e8:	f8ca 3000 	str.w	r3, [sl]
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	463a      	mov	r2, r7
 80033fa:	6921      	ldr	r1, [r4, #16]
 80033fc:	f7ff ff9a 	bl	8003334 <memcpy>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	6126      	str	r6, [r4, #16]
 800340e:	443e      	add	r6, r7
 8003410:	6026      	str	r6, [r4, #0]
 8003412:	464e      	mov	r6, r9
 8003414:	6165      	str	r5, [r4, #20]
 8003416:	1bed      	subs	r5, r5, r7
 8003418:	60a5      	str	r5, [r4, #8]
 800341a:	454e      	cmp	r6, r9
 800341c:	d900      	bls.n	8003420 <__ssputs_r+0x84>
 800341e:	464e      	mov	r6, r9
 8003420:	4632      	mov	r2, r6
 8003422:	4641      	mov	r1, r8
 8003424:	6820      	ldr	r0, [r4, #0]
 8003426:	f000 faa1 	bl	800396c <memmove>
 800342a:	68a3      	ldr	r3, [r4, #8]
 800342c:	2000      	movs	r0, #0
 800342e:	1b9b      	subs	r3, r3, r6
 8003430:	60a3      	str	r3, [r4, #8]
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	441e      	add	r6, r3
 8003436:	6026      	str	r6, [r4, #0]
 8003438:	e7dc      	b.n	80033f4 <__ssputs_r+0x58>
 800343a:	462a      	mov	r2, r5
 800343c:	f000 fb56 	bl	8003aec <_realloc_r>
 8003440:	4606      	mov	r6, r0
 8003442:	2800      	cmp	r0, #0
 8003444:	d1e2      	bne.n	800340c <__ssputs_r+0x70>
 8003446:	6921      	ldr	r1, [r4, #16]
 8003448:	4650      	mov	r0, sl
 800344a:	f000 faa9 	bl	80039a0 <_free_r>
 800344e:	e7c8      	b.n	80033e2 <__ssputs_r+0x46>

08003450 <_svfiprintf_r>:
 8003450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003454:	461d      	mov	r5, r3
 8003456:	898b      	ldrh	r3, [r1, #12]
 8003458:	b09d      	sub	sp, #116	; 0x74
 800345a:	061f      	lsls	r7, r3, #24
 800345c:	4680      	mov	r8, r0
 800345e:	460c      	mov	r4, r1
 8003460:	4616      	mov	r6, r2
 8003462:	d50f      	bpl.n	8003484 <_svfiprintf_r+0x34>
 8003464:	690b      	ldr	r3, [r1, #16]
 8003466:	b96b      	cbnz	r3, 8003484 <_svfiprintf_r+0x34>
 8003468:	2140      	movs	r1, #64	; 0x40
 800346a:	f000 fae5 	bl	8003a38 <_malloc_r>
 800346e:	6020      	str	r0, [r4, #0]
 8003470:	6120      	str	r0, [r4, #16]
 8003472:	b928      	cbnz	r0, 8003480 <_svfiprintf_r+0x30>
 8003474:	230c      	movs	r3, #12
 8003476:	f8c8 3000 	str.w	r3, [r8]
 800347a:	f04f 30ff 	mov.w	r0, #4294967295
 800347e:	e0c8      	b.n	8003612 <_svfiprintf_r+0x1c2>
 8003480:	2340      	movs	r3, #64	; 0x40
 8003482:	6163      	str	r3, [r4, #20]
 8003484:	2300      	movs	r3, #0
 8003486:	9309      	str	r3, [sp, #36]	; 0x24
 8003488:	2320      	movs	r3, #32
 800348a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800348e:	2330      	movs	r3, #48	; 0x30
 8003490:	f04f 0b01 	mov.w	fp, #1
 8003494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003498:	9503      	str	r5, [sp, #12]
 800349a:	4637      	mov	r7, r6
 800349c:	463d      	mov	r5, r7
 800349e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034a2:	b10b      	cbz	r3, 80034a8 <_svfiprintf_r+0x58>
 80034a4:	2b25      	cmp	r3, #37	; 0x25
 80034a6:	d13e      	bne.n	8003526 <_svfiprintf_r+0xd6>
 80034a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80034ac:	d00b      	beq.n	80034c6 <_svfiprintf_r+0x76>
 80034ae:	4653      	mov	r3, sl
 80034b0:	4632      	mov	r2, r6
 80034b2:	4621      	mov	r1, r4
 80034b4:	4640      	mov	r0, r8
 80034b6:	f7ff ff71 	bl	800339c <__ssputs_r>
 80034ba:	3001      	adds	r0, #1
 80034bc:	f000 80a4 	beq.w	8003608 <_svfiprintf_r+0x1b8>
 80034c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c2:	4453      	add	r3, sl
 80034c4:	9309      	str	r3, [sp, #36]	; 0x24
 80034c6:	783b      	ldrb	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 809d 	beq.w	8003608 <_svfiprintf_r+0x1b8>
 80034ce:	2300      	movs	r3, #0
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034d8:	9304      	str	r3, [sp, #16]
 80034da:	9307      	str	r3, [sp, #28]
 80034dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034e0:	931a      	str	r3, [sp, #104]	; 0x68
 80034e2:	462f      	mov	r7, r5
 80034e4:	2205      	movs	r2, #5
 80034e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80034ea:	4850      	ldr	r0, [pc, #320]	; (800362c <_svfiprintf_r+0x1dc>)
 80034ec:	f000 fa30 	bl	8003950 <memchr>
 80034f0:	9b04      	ldr	r3, [sp, #16]
 80034f2:	b9d0      	cbnz	r0, 800352a <_svfiprintf_r+0xda>
 80034f4:	06d9      	lsls	r1, r3, #27
 80034f6:	bf44      	itt	mi
 80034f8:	2220      	movmi	r2, #32
 80034fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034fe:	071a      	lsls	r2, r3, #28
 8003500:	bf44      	itt	mi
 8003502:	222b      	movmi	r2, #43	; 0x2b
 8003504:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003508:	782a      	ldrb	r2, [r5, #0]
 800350a:	2a2a      	cmp	r2, #42	; 0x2a
 800350c:	d015      	beq.n	800353a <_svfiprintf_r+0xea>
 800350e:	462f      	mov	r7, r5
 8003510:	2000      	movs	r0, #0
 8003512:	250a      	movs	r5, #10
 8003514:	9a07      	ldr	r2, [sp, #28]
 8003516:	4639      	mov	r1, r7
 8003518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800351c:	3b30      	subs	r3, #48	; 0x30
 800351e:	2b09      	cmp	r3, #9
 8003520:	d94d      	bls.n	80035be <_svfiprintf_r+0x16e>
 8003522:	b1b8      	cbz	r0, 8003554 <_svfiprintf_r+0x104>
 8003524:	e00f      	b.n	8003546 <_svfiprintf_r+0xf6>
 8003526:	462f      	mov	r7, r5
 8003528:	e7b8      	b.n	800349c <_svfiprintf_r+0x4c>
 800352a:	4a40      	ldr	r2, [pc, #256]	; (800362c <_svfiprintf_r+0x1dc>)
 800352c:	463d      	mov	r5, r7
 800352e:	1a80      	subs	r0, r0, r2
 8003530:	fa0b f000 	lsl.w	r0, fp, r0
 8003534:	4318      	orrs	r0, r3
 8003536:	9004      	str	r0, [sp, #16]
 8003538:	e7d3      	b.n	80034e2 <_svfiprintf_r+0x92>
 800353a:	9a03      	ldr	r2, [sp, #12]
 800353c:	1d11      	adds	r1, r2, #4
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	9103      	str	r1, [sp, #12]
 8003542:	2a00      	cmp	r2, #0
 8003544:	db01      	blt.n	800354a <_svfiprintf_r+0xfa>
 8003546:	9207      	str	r2, [sp, #28]
 8003548:	e004      	b.n	8003554 <_svfiprintf_r+0x104>
 800354a:	4252      	negs	r2, r2
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	9207      	str	r2, [sp, #28]
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	783b      	ldrb	r3, [r7, #0]
 8003556:	2b2e      	cmp	r3, #46	; 0x2e
 8003558:	d10c      	bne.n	8003574 <_svfiprintf_r+0x124>
 800355a:	787b      	ldrb	r3, [r7, #1]
 800355c:	2b2a      	cmp	r3, #42	; 0x2a
 800355e:	d133      	bne.n	80035c8 <_svfiprintf_r+0x178>
 8003560:	9b03      	ldr	r3, [sp, #12]
 8003562:	3702      	adds	r7, #2
 8003564:	1d1a      	adds	r2, r3, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	9203      	str	r2, [sp, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003572:	9305      	str	r3, [sp, #20]
 8003574:	4d2e      	ldr	r5, [pc, #184]	; (8003630 <_svfiprintf_r+0x1e0>)
 8003576:	2203      	movs	r2, #3
 8003578:	7839      	ldrb	r1, [r7, #0]
 800357a:	4628      	mov	r0, r5
 800357c:	f000 f9e8 	bl	8003950 <memchr>
 8003580:	b138      	cbz	r0, 8003592 <_svfiprintf_r+0x142>
 8003582:	2340      	movs	r3, #64	; 0x40
 8003584:	1b40      	subs	r0, r0, r5
 8003586:	fa03 f000 	lsl.w	r0, r3, r0
 800358a:	9b04      	ldr	r3, [sp, #16]
 800358c:	3701      	adds	r7, #1
 800358e:	4303      	orrs	r3, r0
 8003590:	9304      	str	r3, [sp, #16]
 8003592:	7839      	ldrb	r1, [r7, #0]
 8003594:	2206      	movs	r2, #6
 8003596:	4827      	ldr	r0, [pc, #156]	; (8003634 <_svfiprintf_r+0x1e4>)
 8003598:	1c7e      	adds	r6, r7, #1
 800359a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800359e:	f000 f9d7 	bl	8003950 <memchr>
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d038      	beq.n	8003618 <_svfiprintf_r+0x1c8>
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <_svfiprintf_r+0x1e8>)
 80035a8:	bb13      	cbnz	r3, 80035f0 <_svfiprintf_r+0x1a0>
 80035aa:	9b03      	ldr	r3, [sp, #12]
 80035ac:	3307      	adds	r3, #7
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	3308      	adds	r3, #8
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035b8:	444b      	add	r3, r9
 80035ba:	9309      	str	r3, [sp, #36]	; 0x24
 80035bc:	e76d      	b.n	800349a <_svfiprintf_r+0x4a>
 80035be:	fb05 3202 	mla	r2, r5, r2, r3
 80035c2:	2001      	movs	r0, #1
 80035c4:	460f      	mov	r7, r1
 80035c6:	e7a6      	b.n	8003516 <_svfiprintf_r+0xc6>
 80035c8:	2300      	movs	r3, #0
 80035ca:	250a      	movs	r5, #10
 80035cc:	4619      	mov	r1, r3
 80035ce:	3701      	adds	r7, #1
 80035d0:	9305      	str	r3, [sp, #20]
 80035d2:	4638      	mov	r0, r7
 80035d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035d8:	3a30      	subs	r2, #48	; 0x30
 80035da:	2a09      	cmp	r2, #9
 80035dc:	d903      	bls.n	80035e6 <_svfiprintf_r+0x196>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0c8      	beq.n	8003574 <_svfiprintf_r+0x124>
 80035e2:	9105      	str	r1, [sp, #20]
 80035e4:	e7c6      	b.n	8003574 <_svfiprintf_r+0x124>
 80035e6:	fb05 2101 	mla	r1, r5, r1, r2
 80035ea:	2301      	movs	r3, #1
 80035ec:	4607      	mov	r7, r0
 80035ee:	e7f0      	b.n	80035d2 <_svfiprintf_r+0x182>
 80035f0:	ab03      	add	r3, sp, #12
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4622      	mov	r2, r4
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <_svfiprintf_r+0x1ec>)
 80035f8:	a904      	add	r1, sp, #16
 80035fa:	4640      	mov	r0, r8
 80035fc:	f3af 8000 	nop.w
 8003600:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003604:	4681      	mov	r9, r0
 8003606:	d1d6      	bne.n	80035b6 <_svfiprintf_r+0x166>
 8003608:	89a3      	ldrh	r3, [r4, #12]
 800360a:	065b      	lsls	r3, r3, #25
 800360c:	f53f af35 	bmi.w	800347a <_svfiprintf_r+0x2a>
 8003610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003612:	b01d      	add	sp, #116	; 0x74
 8003614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003618:	ab03      	add	r3, sp, #12
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4622      	mov	r2, r4
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <_svfiprintf_r+0x1ec>)
 8003620:	a904      	add	r1, sp, #16
 8003622:	4640      	mov	r0, r8
 8003624:	f000 f882 	bl	800372c <_printf_i>
 8003628:	e7ea      	b.n	8003600 <_svfiprintf_r+0x1b0>
 800362a:	bf00      	nop
 800362c:	080040f4 	.word	0x080040f4
 8003630:	080040fa 	.word	0x080040fa
 8003634:	080040fe 	.word	0x080040fe
 8003638:	00000000 	.word	0x00000000
 800363c:	0800339d 	.word	0x0800339d

08003640 <_printf_common>:
 8003640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	4691      	mov	r9, r2
 8003646:	461f      	mov	r7, r3
 8003648:	688a      	ldr	r2, [r1, #8]
 800364a:	690b      	ldr	r3, [r1, #16]
 800364c:	4606      	mov	r6, r0
 800364e:	4293      	cmp	r3, r2
 8003650:	bfb8      	it	lt
 8003652:	4613      	movlt	r3, r2
 8003654:	f8c9 3000 	str.w	r3, [r9]
 8003658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800365c:	460c      	mov	r4, r1
 800365e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003662:	b112      	cbz	r2, 800366a <_printf_common+0x2a>
 8003664:	3301      	adds	r3, #1
 8003666:	f8c9 3000 	str.w	r3, [r9]
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	0699      	lsls	r1, r3, #26
 800366e:	bf42      	ittt	mi
 8003670:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003674:	3302      	addmi	r3, #2
 8003676:	f8c9 3000 	strmi.w	r3, [r9]
 800367a:	6825      	ldr	r5, [r4, #0]
 800367c:	f015 0506 	ands.w	r5, r5, #6
 8003680:	d107      	bne.n	8003692 <_printf_common+0x52>
 8003682:	f104 0a19 	add.w	sl, r4, #25
 8003686:	68e3      	ldr	r3, [r4, #12]
 8003688:	f8d9 2000 	ldr.w	r2, [r9]
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	42ab      	cmp	r3, r5
 8003690:	dc29      	bgt.n	80036e6 <_printf_common+0xa6>
 8003692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	3300      	adds	r3, #0
 800369a:	bf18      	it	ne
 800369c:	2301      	movne	r3, #1
 800369e:	0692      	lsls	r2, r2, #26
 80036a0:	d42e      	bmi.n	8003700 <_printf_common+0xc0>
 80036a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036a6:	4639      	mov	r1, r7
 80036a8:	4630      	mov	r0, r6
 80036aa:	47c0      	blx	r8
 80036ac:	3001      	adds	r0, #1
 80036ae:	d021      	beq.n	80036f4 <_printf_common+0xb4>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	68e5      	ldr	r5, [r4, #12]
 80036b4:	f003 0306 	and.w	r3, r3, #6
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	bf18      	it	ne
 80036bc:	2500      	movne	r5, #0
 80036be:	f8d9 2000 	ldr.w	r2, [r9]
 80036c2:	f04f 0900 	mov.w	r9, #0
 80036c6:	bf08      	it	eq
 80036c8:	1aad      	subeq	r5, r5, r2
 80036ca:	68a3      	ldr	r3, [r4, #8]
 80036cc:	6922      	ldr	r2, [r4, #16]
 80036ce:	bf08      	it	eq
 80036d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d4:	4293      	cmp	r3, r2
 80036d6:	bfc4      	itt	gt
 80036d8:	1a9b      	subgt	r3, r3, r2
 80036da:	18ed      	addgt	r5, r5, r3
 80036dc:	341a      	adds	r4, #26
 80036de:	454d      	cmp	r5, r9
 80036e0:	d11a      	bne.n	8003718 <_printf_common+0xd8>
 80036e2:	2000      	movs	r0, #0
 80036e4:	e008      	b.n	80036f8 <_printf_common+0xb8>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4652      	mov	r2, sl
 80036ea:	4639      	mov	r1, r7
 80036ec:	4630      	mov	r0, r6
 80036ee:	47c0      	blx	r8
 80036f0:	3001      	adds	r0, #1
 80036f2:	d103      	bne.n	80036fc <_printf_common+0xbc>
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fc:	3501      	adds	r5, #1
 80036fe:	e7c2      	b.n	8003686 <_printf_common+0x46>
 8003700:	2030      	movs	r0, #48	; 0x30
 8003702:	18e1      	adds	r1, r4, r3
 8003704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800370e:	4422      	add	r2, r4
 8003710:	3302      	adds	r3, #2
 8003712:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003716:	e7c4      	b.n	80036a2 <_printf_common+0x62>
 8003718:	2301      	movs	r3, #1
 800371a:	4622      	mov	r2, r4
 800371c:	4639      	mov	r1, r7
 800371e:	4630      	mov	r0, r6
 8003720:	47c0      	blx	r8
 8003722:	3001      	adds	r0, #1
 8003724:	d0e6      	beq.n	80036f4 <_printf_common+0xb4>
 8003726:	f109 0901 	add.w	r9, r9, #1
 800372a:	e7d8      	b.n	80036de <_printf_common+0x9e>

0800372c <_printf_i>:
 800372c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003734:	460c      	mov	r4, r1
 8003736:	7e09      	ldrb	r1, [r1, #24]
 8003738:	b085      	sub	sp, #20
 800373a:	296e      	cmp	r1, #110	; 0x6e
 800373c:	4617      	mov	r7, r2
 800373e:	4606      	mov	r6, r0
 8003740:	4698      	mov	r8, r3
 8003742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003744:	f000 80b3 	beq.w	80038ae <_printf_i+0x182>
 8003748:	d822      	bhi.n	8003790 <_printf_i+0x64>
 800374a:	2963      	cmp	r1, #99	; 0x63
 800374c:	d036      	beq.n	80037bc <_printf_i+0x90>
 800374e:	d80a      	bhi.n	8003766 <_printf_i+0x3a>
 8003750:	2900      	cmp	r1, #0
 8003752:	f000 80b9 	beq.w	80038c8 <_printf_i+0x19c>
 8003756:	2958      	cmp	r1, #88	; 0x58
 8003758:	f000 8083 	beq.w	8003862 <_printf_i+0x136>
 800375c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003764:	e032      	b.n	80037cc <_printf_i+0xa0>
 8003766:	2964      	cmp	r1, #100	; 0x64
 8003768:	d001      	beq.n	800376e <_printf_i+0x42>
 800376a:	2969      	cmp	r1, #105	; 0x69
 800376c:	d1f6      	bne.n	800375c <_printf_i+0x30>
 800376e:	6820      	ldr	r0, [r4, #0]
 8003770:	6813      	ldr	r3, [r2, #0]
 8003772:	0605      	lsls	r5, r0, #24
 8003774:	f103 0104 	add.w	r1, r3, #4
 8003778:	d52a      	bpl.n	80037d0 <_printf_i+0xa4>
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6011      	str	r1, [r2, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	da03      	bge.n	800378a <_printf_i+0x5e>
 8003782:	222d      	movs	r2, #45	; 0x2d
 8003784:	425b      	negs	r3, r3
 8003786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800378a:	486f      	ldr	r0, [pc, #444]	; (8003948 <_printf_i+0x21c>)
 800378c:	220a      	movs	r2, #10
 800378e:	e039      	b.n	8003804 <_printf_i+0xd8>
 8003790:	2973      	cmp	r1, #115	; 0x73
 8003792:	f000 809d 	beq.w	80038d0 <_printf_i+0x1a4>
 8003796:	d808      	bhi.n	80037aa <_printf_i+0x7e>
 8003798:	296f      	cmp	r1, #111	; 0x6f
 800379a:	d020      	beq.n	80037de <_printf_i+0xb2>
 800379c:	2970      	cmp	r1, #112	; 0x70
 800379e:	d1dd      	bne.n	800375c <_printf_i+0x30>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	f043 0320 	orr.w	r3, r3, #32
 80037a6:	6023      	str	r3, [r4, #0]
 80037a8:	e003      	b.n	80037b2 <_printf_i+0x86>
 80037aa:	2975      	cmp	r1, #117	; 0x75
 80037ac:	d017      	beq.n	80037de <_printf_i+0xb2>
 80037ae:	2978      	cmp	r1, #120	; 0x78
 80037b0:	d1d4      	bne.n	800375c <_printf_i+0x30>
 80037b2:	2378      	movs	r3, #120	; 0x78
 80037b4:	4865      	ldr	r0, [pc, #404]	; (800394c <_printf_i+0x220>)
 80037b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037ba:	e055      	b.n	8003868 <_printf_i+0x13c>
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037c2:	1d19      	adds	r1, r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6011      	str	r1, [r2, #0]
 80037c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037cc:	2301      	movs	r3, #1
 80037ce:	e08c      	b.n	80038ea <_printf_i+0x1be>
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037d6:	6011      	str	r1, [r2, #0]
 80037d8:	bf18      	it	ne
 80037da:	b21b      	sxthne	r3, r3
 80037dc:	e7cf      	b.n	800377e <_printf_i+0x52>
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	6825      	ldr	r5, [r4, #0]
 80037e2:	1d18      	adds	r0, r3, #4
 80037e4:	6010      	str	r0, [r2, #0]
 80037e6:	0628      	lsls	r0, r5, #24
 80037e8:	d501      	bpl.n	80037ee <_printf_i+0xc2>
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	e002      	b.n	80037f4 <_printf_i+0xc8>
 80037ee:	0668      	lsls	r0, r5, #25
 80037f0:	d5fb      	bpl.n	80037ea <_printf_i+0xbe>
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	296f      	cmp	r1, #111	; 0x6f
 80037f6:	bf14      	ite	ne
 80037f8:	220a      	movne	r2, #10
 80037fa:	2208      	moveq	r2, #8
 80037fc:	4852      	ldr	r0, [pc, #328]	; (8003948 <_printf_i+0x21c>)
 80037fe:	2100      	movs	r1, #0
 8003800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003804:	6865      	ldr	r5, [r4, #4]
 8003806:	2d00      	cmp	r5, #0
 8003808:	60a5      	str	r5, [r4, #8]
 800380a:	f2c0 8095 	blt.w	8003938 <_printf_i+0x20c>
 800380e:	6821      	ldr	r1, [r4, #0]
 8003810:	f021 0104 	bic.w	r1, r1, #4
 8003814:	6021      	str	r1, [r4, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d13d      	bne.n	8003896 <_printf_i+0x16a>
 800381a:	2d00      	cmp	r5, #0
 800381c:	f040 808e 	bne.w	800393c <_printf_i+0x210>
 8003820:	4665      	mov	r5, ip
 8003822:	2a08      	cmp	r2, #8
 8003824:	d10b      	bne.n	800383e <_printf_i+0x112>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	07db      	lsls	r3, r3, #31
 800382a:	d508      	bpl.n	800383e <_printf_i+0x112>
 800382c:	6923      	ldr	r3, [r4, #16]
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	bfde      	ittt	le
 8003834:	2330      	movle	r3, #48	; 0x30
 8003836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800383a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800383e:	ebac 0305 	sub.w	r3, ip, r5
 8003842:	6123      	str	r3, [r4, #16]
 8003844:	f8cd 8000 	str.w	r8, [sp]
 8003848:	463b      	mov	r3, r7
 800384a:	aa03      	add	r2, sp, #12
 800384c:	4621      	mov	r1, r4
 800384e:	4630      	mov	r0, r6
 8003850:	f7ff fef6 	bl	8003640 <_printf_common>
 8003854:	3001      	adds	r0, #1
 8003856:	d14d      	bne.n	80038f4 <_printf_i+0x1c8>
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	b005      	add	sp, #20
 800385e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003862:	4839      	ldr	r0, [pc, #228]	; (8003948 <_printf_i+0x21c>)
 8003864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003868:	6813      	ldr	r3, [r2, #0]
 800386a:	6821      	ldr	r1, [r4, #0]
 800386c:	1d1d      	adds	r5, r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6015      	str	r5, [r2, #0]
 8003872:	060a      	lsls	r2, r1, #24
 8003874:	d50b      	bpl.n	800388e <_printf_i+0x162>
 8003876:	07ca      	lsls	r2, r1, #31
 8003878:	bf44      	itt	mi
 800387a:	f041 0120 	orrmi.w	r1, r1, #32
 800387e:	6021      	strmi	r1, [r4, #0]
 8003880:	b91b      	cbnz	r3, 800388a <_printf_i+0x15e>
 8003882:	6822      	ldr	r2, [r4, #0]
 8003884:	f022 0220 	bic.w	r2, r2, #32
 8003888:	6022      	str	r2, [r4, #0]
 800388a:	2210      	movs	r2, #16
 800388c:	e7b7      	b.n	80037fe <_printf_i+0xd2>
 800388e:	064d      	lsls	r5, r1, #25
 8003890:	bf48      	it	mi
 8003892:	b29b      	uxthmi	r3, r3
 8003894:	e7ef      	b.n	8003876 <_printf_i+0x14a>
 8003896:	4665      	mov	r5, ip
 8003898:	fbb3 f1f2 	udiv	r1, r3, r2
 800389c:	fb02 3311 	mls	r3, r2, r1, r3
 80038a0:	5cc3      	ldrb	r3, [r0, r3]
 80038a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038a6:	460b      	mov	r3, r1
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d1f5      	bne.n	8003898 <_printf_i+0x16c>
 80038ac:	e7b9      	b.n	8003822 <_printf_i+0xf6>
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	6825      	ldr	r5, [r4, #0]
 80038b2:	1d18      	adds	r0, r3, #4
 80038b4:	6961      	ldr	r1, [r4, #20]
 80038b6:	6010      	str	r0, [r2, #0]
 80038b8:	0628      	lsls	r0, r5, #24
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	d501      	bpl.n	80038c2 <_printf_i+0x196>
 80038be:	6019      	str	r1, [r3, #0]
 80038c0:	e002      	b.n	80038c8 <_printf_i+0x19c>
 80038c2:	066a      	lsls	r2, r5, #25
 80038c4:	d5fb      	bpl.n	80038be <_printf_i+0x192>
 80038c6:	8019      	strh	r1, [r3, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	4665      	mov	r5, ip
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	e7b9      	b.n	8003844 <_printf_i+0x118>
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	1d19      	adds	r1, r3, #4
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	681d      	ldr	r5, [r3, #0]
 80038d8:	6862      	ldr	r2, [r4, #4]
 80038da:	2100      	movs	r1, #0
 80038dc:	4628      	mov	r0, r5
 80038de:	f000 f837 	bl	8003950 <memchr>
 80038e2:	b108      	cbz	r0, 80038e8 <_printf_i+0x1bc>
 80038e4:	1b40      	subs	r0, r0, r5
 80038e6:	6060      	str	r0, [r4, #4]
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	6123      	str	r3, [r4, #16]
 80038ec:	2300      	movs	r3, #0
 80038ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038f2:	e7a7      	b.n	8003844 <_printf_i+0x118>
 80038f4:	6923      	ldr	r3, [r4, #16]
 80038f6:	462a      	mov	r2, r5
 80038f8:	4639      	mov	r1, r7
 80038fa:	4630      	mov	r0, r6
 80038fc:	47c0      	blx	r8
 80038fe:	3001      	adds	r0, #1
 8003900:	d0aa      	beq.n	8003858 <_printf_i+0x12c>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	079b      	lsls	r3, r3, #30
 8003906:	d413      	bmi.n	8003930 <_printf_i+0x204>
 8003908:	68e0      	ldr	r0, [r4, #12]
 800390a:	9b03      	ldr	r3, [sp, #12]
 800390c:	4298      	cmp	r0, r3
 800390e:	bfb8      	it	lt
 8003910:	4618      	movlt	r0, r3
 8003912:	e7a3      	b.n	800385c <_printf_i+0x130>
 8003914:	2301      	movs	r3, #1
 8003916:	464a      	mov	r2, r9
 8003918:	4639      	mov	r1, r7
 800391a:	4630      	mov	r0, r6
 800391c:	47c0      	blx	r8
 800391e:	3001      	adds	r0, #1
 8003920:	d09a      	beq.n	8003858 <_printf_i+0x12c>
 8003922:	3501      	adds	r5, #1
 8003924:	68e3      	ldr	r3, [r4, #12]
 8003926:	9a03      	ldr	r2, [sp, #12]
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	42ab      	cmp	r3, r5
 800392c:	dcf2      	bgt.n	8003914 <_printf_i+0x1e8>
 800392e:	e7eb      	b.n	8003908 <_printf_i+0x1dc>
 8003930:	2500      	movs	r5, #0
 8003932:	f104 0919 	add.w	r9, r4, #25
 8003936:	e7f5      	b.n	8003924 <_printf_i+0x1f8>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ac      	bne.n	8003896 <_printf_i+0x16a>
 800393c:	7803      	ldrb	r3, [r0, #0]
 800393e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003942:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003946:	e76c      	b.n	8003822 <_printf_i+0xf6>
 8003948:	08004105 	.word	0x08004105
 800394c:	08004116 	.word	0x08004116

08003950 <memchr>:
 8003950:	b510      	push	{r4, lr}
 8003952:	b2c9      	uxtb	r1, r1
 8003954:	4402      	add	r2, r0
 8003956:	4290      	cmp	r0, r2
 8003958:	4603      	mov	r3, r0
 800395a:	d101      	bne.n	8003960 <memchr+0x10>
 800395c:	2300      	movs	r3, #0
 800395e:	e003      	b.n	8003968 <memchr+0x18>
 8003960:	781c      	ldrb	r4, [r3, #0]
 8003962:	3001      	adds	r0, #1
 8003964:	428c      	cmp	r4, r1
 8003966:	d1f6      	bne.n	8003956 <memchr+0x6>
 8003968:	4618      	mov	r0, r3
 800396a:	bd10      	pop	{r4, pc}

0800396c <memmove>:
 800396c:	4288      	cmp	r0, r1
 800396e:	b510      	push	{r4, lr}
 8003970:	eb01 0302 	add.w	r3, r1, r2
 8003974:	d807      	bhi.n	8003986 <memmove+0x1a>
 8003976:	1e42      	subs	r2, r0, #1
 8003978:	4299      	cmp	r1, r3
 800397a:	d00a      	beq.n	8003992 <memmove+0x26>
 800397c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003980:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003984:	e7f8      	b.n	8003978 <memmove+0xc>
 8003986:	4283      	cmp	r3, r0
 8003988:	d9f5      	bls.n	8003976 <memmove+0xa>
 800398a:	1881      	adds	r1, r0, r2
 800398c:	1ad2      	subs	r2, r2, r3
 800398e:	42d3      	cmn	r3, r2
 8003990:	d100      	bne.n	8003994 <memmove+0x28>
 8003992:	bd10      	pop	{r4, pc}
 8003994:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003998:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800399c:	e7f7      	b.n	800398e <memmove+0x22>
	...

080039a0 <_free_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4605      	mov	r5, r0
 80039a4:	2900      	cmp	r1, #0
 80039a6:	d043      	beq.n	8003a30 <_free_r+0x90>
 80039a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039ac:	1f0c      	subs	r4, r1, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bfb8      	it	lt
 80039b2:	18e4      	addlt	r4, r4, r3
 80039b4:	f000 f8d0 	bl	8003b58 <__malloc_lock>
 80039b8:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <_free_r+0x94>)
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	4610      	mov	r0, r2
 80039be:	b933      	cbnz	r3, 80039ce <_free_r+0x2e>
 80039c0:	6063      	str	r3, [r4, #4]
 80039c2:	6014      	str	r4, [r2, #0]
 80039c4:	4628      	mov	r0, r5
 80039c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ca:	f000 b8c6 	b.w	8003b5a <__malloc_unlock>
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	d90b      	bls.n	80039ea <_free_r+0x4a>
 80039d2:	6821      	ldr	r1, [r4, #0]
 80039d4:	1862      	adds	r2, r4, r1
 80039d6:	4293      	cmp	r3, r2
 80039d8:	bf01      	itttt	eq
 80039da:	681a      	ldreq	r2, [r3, #0]
 80039dc:	685b      	ldreq	r3, [r3, #4]
 80039de:	1852      	addeq	r2, r2, r1
 80039e0:	6022      	streq	r2, [r4, #0]
 80039e2:	6063      	str	r3, [r4, #4]
 80039e4:	6004      	str	r4, [r0, #0]
 80039e6:	e7ed      	b.n	80039c4 <_free_r+0x24>
 80039e8:	4613      	mov	r3, r2
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	b10a      	cbz	r2, 80039f2 <_free_r+0x52>
 80039ee:	42a2      	cmp	r2, r4
 80039f0:	d9fa      	bls.n	80039e8 <_free_r+0x48>
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	1858      	adds	r0, r3, r1
 80039f6:	42a0      	cmp	r0, r4
 80039f8:	d10b      	bne.n	8003a12 <_free_r+0x72>
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	4401      	add	r1, r0
 80039fe:	1858      	adds	r0, r3, r1
 8003a00:	4282      	cmp	r2, r0
 8003a02:	6019      	str	r1, [r3, #0]
 8003a04:	d1de      	bne.n	80039c4 <_free_r+0x24>
 8003a06:	6810      	ldr	r0, [r2, #0]
 8003a08:	6852      	ldr	r2, [r2, #4]
 8003a0a:	4401      	add	r1, r0
 8003a0c:	6019      	str	r1, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	e7d8      	b.n	80039c4 <_free_r+0x24>
 8003a12:	d902      	bls.n	8003a1a <_free_r+0x7a>
 8003a14:	230c      	movs	r3, #12
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	e7d4      	b.n	80039c4 <_free_r+0x24>
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	1821      	adds	r1, r4, r0
 8003a1e:	428a      	cmp	r2, r1
 8003a20:	bf01      	itttt	eq
 8003a22:	6811      	ldreq	r1, [r2, #0]
 8003a24:	6852      	ldreq	r2, [r2, #4]
 8003a26:	1809      	addeq	r1, r1, r0
 8003a28:	6021      	streq	r1, [r4, #0]
 8003a2a:	6062      	str	r2, [r4, #4]
 8003a2c:	605c      	str	r4, [r3, #4]
 8003a2e:	e7c9      	b.n	80039c4 <_free_r+0x24>
 8003a30:	bd38      	pop	{r3, r4, r5, pc}
 8003a32:	bf00      	nop
 8003a34:	2000013c 	.word	0x2000013c

08003a38 <_malloc_r>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	1ccd      	adds	r5, r1, #3
 8003a3c:	f025 0503 	bic.w	r5, r5, #3
 8003a40:	3508      	adds	r5, #8
 8003a42:	2d0c      	cmp	r5, #12
 8003a44:	bf38      	it	cc
 8003a46:	250c      	movcc	r5, #12
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	db01      	blt.n	8003a52 <_malloc_r+0x1a>
 8003a4e:	42a9      	cmp	r1, r5
 8003a50:	d903      	bls.n	8003a5a <_malloc_r+0x22>
 8003a52:	230c      	movs	r3, #12
 8003a54:	6033      	str	r3, [r6, #0]
 8003a56:	2000      	movs	r0, #0
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
 8003a5a:	f000 f87d 	bl	8003b58 <__malloc_lock>
 8003a5e:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <_malloc_r+0xac>)
 8003a60:	6814      	ldr	r4, [r2, #0]
 8003a62:	4621      	mov	r1, r4
 8003a64:	b991      	cbnz	r1, 8003a8c <_malloc_r+0x54>
 8003a66:	4c20      	ldr	r4, [pc, #128]	; (8003ae8 <_malloc_r+0xb0>)
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	b91b      	cbnz	r3, 8003a74 <_malloc_r+0x3c>
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f000 f863 	bl	8003b38 <_sbrk_r>
 8003a72:	6020      	str	r0, [r4, #0]
 8003a74:	4629      	mov	r1, r5
 8003a76:	4630      	mov	r0, r6
 8003a78:	f000 f85e 	bl	8003b38 <_sbrk_r>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d124      	bne.n	8003aca <_malloc_r+0x92>
 8003a80:	230c      	movs	r3, #12
 8003a82:	4630      	mov	r0, r6
 8003a84:	6033      	str	r3, [r6, #0]
 8003a86:	f000 f868 	bl	8003b5a <__malloc_unlock>
 8003a8a:	e7e4      	b.n	8003a56 <_malloc_r+0x1e>
 8003a8c:	680b      	ldr	r3, [r1, #0]
 8003a8e:	1b5b      	subs	r3, r3, r5
 8003a90:	d418      	bmi.n	8003ac4 <_malloc_r+0x8c>
 8003a92:	2b0b      	cmp	r3, #11
 8003a94:	d90f      	bls.n	8003ab6 <_malloc_r+0x7e>
 8003a96:	600b      	str	r3, [r1, #0]
 8003a98:	18cc      	adds	r4, r1, r3
 8003a9a:	50cd      	str	r5, [r1, r3]
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f000 f85c 	bl	8003b5a <__malloc_unlock>
 8003aa2:	f104 000b 	add.w	r0, r4, #11
 8003aa6:	1d23      	adds	r3, r4, #4
 8003aa8:	f020 0007 	bic.w	r0, r0, #7
 8003aac:	1ac3      	subs	r3, r0, r3
 8003aae:	d0d3      	beq.n	8003a58 <_malloc_r+0x20>
 8003ab0:	425a      	negs	r2, r3
 8003ab2:	50e2      	str	r2, [r4, r3]
 8003ab4:	e7d0      	b.n	8003a58 <_malloc_r+0x20>
 8003ab6:	684b      	ldr	r3, [r1, #4]
 8003ab8:	428c      	cmp	r4, r1
 8003aba:	bf16      	itet	ne
 8003abc:	6063      	strne	r3, [r4, #4]
 8003abe:	6013      	streq	r3, [r2, #0]
 8003ac0:	460c      	movne	r4, r1
 8003ac2:	e7eb      	b.n	8003a9c <_malloc_r+0x64>
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	6849      	ldr	r1, [r1, #4]
 8003ac8:	e7cc      	b.n	8003a64 <_malloc_r+0x2c>
 8003aca:	1cc4      	adds	r4, r0, #3
 8003acc:	f024 0403 	bic.w	r4, r4, #3
 8003ad0:	42a0      	cmp	r0, r4
 8003ad2:	d005      	beq.n	8003ae0 <_malloc_r+0xa8>
 8003ad4:	1a21      	subs	r1, r4, r0
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f000 f82e 	bl	8003b38 <_sbrk_r>
 8003adc:	3001      	adds	r0, #1
 8003ade:	d0cf      	beq.n	8003a80 <_malloc_r+0x48>
 8003ae0:	6025      	str	r5, [r4, #0]
 8003ae2:	e7db      	b.n	8003a9c <_malloc_r+0x64>
 8003ae4:	2000013c 	.word	0x2000013c
 8003ae8:	20000140 	.word	0x20000140

08003aec <_realloc_r>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	4607      	mov	r7, r0
 8003af0:	4614      	mov	r4, r2
 8003af2:	460e      	mov	r6, r1
 8003af4:	b921      	cbnz	r1, 8003b00 <_realloc_r+0x14>
 8003af6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003afa:	4611      	mov	r1, r2
 8003afc:	f7ff bf9c 	b.w	8003a38 <_malloc_r>
 8003b00:	b922      	cbnz	r2, 8003b0c <_realloc_r+0x20>
 8003b02:	f7ff ff4d 	bl	80039a0 <_free_r>
 8003b06:	4625      	mov	r5, r4
 8003b08:	4628      	mov	r0, r5
 8003b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b0c:	f000 f826 	bl	8003b5c <_malloc_usable_size_r>
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d20f      	bcs.n	8003b34 <_realloc_r+0x48>
 8003b14:	4621      	mov	r1, r4
 8003b16:	4638      	mov	r0, r7
 8003b18:	f7ff ff8e 	bl	8003a38 <_malloc_r>
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d0f2      	beq.n	8003b08 <_realloc_r+0x1c>
 8003b22:	4631      	mov	r1, r6
 8003b24:	4622      	mov	r2, r4
 8003b26:	f7ff fc05 	bl	8003334 <memcpy>
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f7ff ff37 	bl	80039a0 <_free_r>
 8003b32:	e7e9      	b.n	8003b08 <_realloc_r+0x1c>
 8003b34:	4635      	mov	r5, r6
 8003b36:	e7e7      	b.n	8003b08 <_realloc_r+0x1c>

08003b38 <_sbrk_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	4c05      	ldr	r4, [pc, #20]	; (8003b54 <_sbrk_r+0x1c>)
 8003b3e:	4605      	mov	r5, r0
 8003b40:	4608      	mov	r0, r1
 8003b42:	6023      	str	r3, [r4, #0]
 8003b44:	f7fd fd2c 	bl	80015a0 <_sbrk>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_sbrk_r+0x1a>
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_sbrk_r+0x1a>
 8003b50:	602b      	str	r3, [r5, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	200001e0 	.word	0x200001e0

08003b58 <__malloc_lock>:
 8003b58:	4770      	bx	lr

08003b5a <__malloc_unlock>:
 8003b5a:	4770      	bx	lr

08003b5c <_malloc_usable_size_r>:
 8003b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b60:	1f18      	subs	r0, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bfbc      	itt	lt
 8003b66:	580b      	ldrlt	r3, [r1, r0]
 8003b68:	18c0      	addlt	r0, r0, r3
 8003b6a:	4770      	bx	lr

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
