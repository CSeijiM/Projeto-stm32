
Acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006000  08006000  00016000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080060c0  080060c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060c0  080060c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080060c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  0800613c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  0800613c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb4f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001801  00000000  00000000  0002bbec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  0002e018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014176  00000000  00000000  0002eb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000860e  00000000  00000000  00042d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071a3e  00000000  00000000  0004b31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bcd5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003938  00000000  00000000  000bcdd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fe8 	.word	0x08005fe8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005fe8 	.word	0x08005fe8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001078:	2254      	movs	r2, #84	; 0x54
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <MPU6050_Init+0x1c>)
 800107e:	f003 fd97 	bl	8004bb0 <memcpy>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000090 	.word	0x20000090

08001090 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 80010a0:	23d0      	movs	r3, #208	; 0xd0
 80010a2:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	b299      	uxth	r1, r3
 80010ac:	f107 020c 	add.w	r2, r7, #12
 80010b0:	230a      	movs	r3, #10
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	4809      	ldr	r0, [pc, #36]	; (80010dc <I2C_Read+0x4c>)
 80010b8:	f001 fdca 	bl	8002c50 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	b299      	uxth	r1, r3
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <I2C_Read+0x4c>)
 80010ce:	f001 febd 	bl	8002e4c <HAL_I2C_Master_Receive>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000090 	.word	0x20000090

080010e0 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 80010f8:	23d0      	movs	r3, #208	; 0xd0
 80010fa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	b299      	uxth	r1, r3
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2302      	movs	r3, #2
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <I2C_Write8+0x38>)
 800110c:	f001 fda0 	bl	8002c50 <HAL_I2C_Master_Transmit>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000090 	.word	0x20000090

0800111c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	206b      	movs	r0, #107	; 0x6b
 800112c:	f7ff ffd8 	bl	80010e0 <I2C_Write8>
	HAL_Delay(100);
 8001130:	2064      	movs	r0, #100	; 0x64
 8001132:	f001 f9d5 	bl	80024e0 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	019b      	lsls	r3, r3, #6
 8001146:	b25b      	sxtb	r3, r3
 8001148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114c:	b25a      	sxtb	r2, r3
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4313      	orrs	r3, r2
 8001154:	b25b      	sxtb	r3, r3
 8001156:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4619      	mov	r1, r3
 800115c:	206b      	movs	r0, #107	; 0x6b
 800115e:	f7ff ffbf 	bl	80010e0 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f001 f9bc 	bl	80024e0 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	78db      	ldrb	r3, [r3, #3]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	4619      	mov	r1, r3
 800117a:	201a      	movs	r0, #26
 800117c:	f7ff ffb0 	bl	80010e0 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f003 0318 	and.w	r3, r3, #24
 8001190:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4619      	mov	r1, r3
 8001196:	201b      	movs	r0, #27
 8001198:	f7ff ffa2 	bl	80010e0 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 0318 	and.w	r3, r3, #24
 80011ac:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	4619      	mov	r1, r3
 80011b2:	201c      	movs	r0, #28
 80011b4:	f7ff ff94 	bl	80010e0 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 80011b8:	2004      	movs	r0, #4
 80011ba:	f000 f857 	bl	800126c <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	789b      	ldrb	r3, [r3, #2]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d81a      	bhi.n	80011fc <MPU6050_Config+0xe0>
 80011c6:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <MPU6050_Config+0xb0>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	080011dd 	.word	0x080011dd
 80011d0:	080011e5 	.word	0x080011e5
 80011d4:	080011ed 	.word	0x080011ed
 80011d8:	080011f5 	.word	0x080011f5
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MPU6050_Config+0x12c>)
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <MPU6050_Config+0x130>)
 80011e0:	601a      	str	r2, [r3, #0]
			break;
 80011e2:	e00c      	b.n	80011fe <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MPU6050_Config+0x12c>)
 80011e6:	4a1a      	ldr	r2, [pc, #104]	; (8001250 <MPU6050_Config+0x134>)
 80011e8:	601a      	str	r2, [r3, #0]
				break;
 80011ea:	e008      	b.n	80011fe <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MPU6050_Config+0x12c>)
 80011ee:	4a19      	ldr	r2, [pc, #100]	; (8001254 <MPU6050_Config+0x138>)
 80011f0:	601a      	str	r2, [r3, #0]
			break;
 80011f2:	e004      	b.n	80011fe <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MPU6050_Config+0x12c>)
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <MPU6050_Config+0x13c>)
 80011f8:	601a      	str	r2, [r3, #0]
			break;
 80011fa:	e000      	b.n	80011fe <MPU6050_Config+0xe2>
		
		default:
			break;
 80011fc:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d81a      	bhi.n	800123c <MPU6050_Config+0x120>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <MPU6050_Config+0xf0>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	0800121d 	.word	0x0800121d
 8001210:	08001225 	.word	0x08001225
 8001214:	0800122d 	.word	0x0800122d
 8001218:	08001235 	.word	0x08001235
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MPU6050_Config+0x140>)
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <MPU6050_Config+0x144>)
 8001220:	601a      	str	r2, [r3, #0]
			break;
 8001222:	e00c      	b.n	800123e <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MPU6050_Config+0x140>)
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <MPU6050_Config+0x148>)
 8001228:	601a      	str	r2, [r3, #0]
				break;
 800122a:	e008      	b.n	800123e <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MPU6050_Config+0x140>)
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <MPU6050_Config+0x14c>)
 8001230:	601a      	str	r2, [r3, #0]
			break;
 8001232:	e004      	b.n	800123e <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MPU6050_Config+0x140>)
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <MPU6050_Config+0x130>)
 8001238:	601a      	str	r2, [r3, #0]
			break;
 800123a:	e000      	b.n	800123e <MPU6050_Config+0x122>
		
		default:
			break;
 800123c:	bf00      	nop
	}
	
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000e4 	.word	0x200000e4
 800124c:	3d7a0000 	.word	0x3d7a0000
 8001250:	3dfa0000 	.word	0x3dfa0000
 8001254:	3e7a0000 	.word	0x3e7a0000
 8001258:	3efa0000 	.word	0x3efa0000
 800125c:	200000e8 	.word	0x200000e8
 8001260:	3bfa0000 	.word	0x3bfa0000
 8001264:	3c7a0000 	.word	0x3c7a0000
 8001268:	3cfa0000 	.word	0x3cfa0000

0800126c <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4619      	mov	r1, r3
 800127a:	2019      	movs	r0, #25
 800127c:	f7ff ff30 	bl	80010e0 <I2C_Write8>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	3301      	adds	r3, #1
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	203a      	movs	r0, #58	; 0x3a
 800129c:	f7ff fef8 	bl	8001090 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 80012a0:	7f7b      	ldrb	r3, [r7, #29]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d04f      	beq.n	8001346 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	2206      	movs	r2, #6
 80012ac:	4619      	mov	r1, r3
 80012ae:	203b      	movs	r0, #59	; 0x3b
 80012b0:	f7ff feee 	bl	8001090 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 80012b4:	7d3b      	ldrb	r3, [r7, #20]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	7d7b      	ldrb	r3, [r7, #21]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 80012e0:	7e3b      	ldrb	r3, [r7, #24]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	7e7b      	ldrb	r3, [r7, #25]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2206      	movs	r2, #6
 80012fc:	4619      	mov	r1, r3
 80012fe:	2043      	movs	r0, #67	; 0x43
 8001300:	f7ff fec6 	bl	8001090 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001304:	7b3b      	ldrb	r3, [r7, #12]
 8001306:	b29b      	uxth	r3, r3
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b29a      	uxth	r2, r3
 800130c:	7b7b      	ldrb	r3, [r7, #13]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	b29b      	uxth	r3, r3
 8001314:	b21a      	sxth	r2, r3
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MPU6050_Get_Accel_RawData+0xc8>)
 8001318:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	b29b      	uxth	r3, r3
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b29a      	uxth	r2, r3
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	b29b      	uxth	r3, r3
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MPU6050_Get_Accel_RawData+0xc8>)
 800132e:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8001330:	7c3b      	ldrb	r3, [r7, #16]
 8001332:	b29b      	uxth	r3, r3
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b29a      	uxth	r2, r3
 8001338:	7c7b      	ldrb	r3, [r7, #17]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4413      	add	r3, r2
 800133e:	b29b      	uxth	r3, r3
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b03      	ldr	r3, [pc, #12]	; (8001350 <MPU6050_Get_Accel_RawData+0xc8>)
 8001344:	809a      	strh	r2, [r3, #4]
	}
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000ec 	.word	0x200000ec

08001354 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MPU6050_Get_Gyro_RawData+0x30>)
 800135e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <MPU6050_Get_Gyro_RawData+0x30>)
 8001368:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <MPU6050_Get_Gyro_RawData+0x30>)
 8001372:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	809a      	strh	r2, [r3, #4]
	
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200000ec 	.word	0x200000ec

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f001 f844 	bl	800241c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001394:	f000 fc8a 	bl	8001cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001398:	f000 fe3e 	bl	8002018 <MX_GPIO_Init>
  MX_I2C1_Init();
 800139c:	f000 fccc 	bl	8001d38 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013a0:	f000 fcf8 	bl	8001d94 <MX_I2C2_Init>
  MX_TIM1_Init();
 80013a4:	f000 fd24 	bl	8001df0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013a8:	f000 fdc2 	bl	8001f30 <MX_TIM2_Init>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80013ac:	2100      	movs	r1, #0
 80013ae:	4882      	ldr	r0, [pc, #520]	; (80015b8 <main+0x230>)
 80013b0:	f002 feea 	bl	8004188 <HAL_TIM_PWM_Start>

  htim1.Instance->CCMR1 = 50;
 80013b4:	4b80      	ldr	r3, [pc, #512]	; (80015b8 <main+0x230>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2232      	movs	r2, #50	; 0x32
 80013ba:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c2);
 80013bc:	487f      	ldr	r0, [pc, #508]	; (80015bc <main+0x234>)
 80013be:	f7ff fe57 	bl	8001070 <MPU6050_Init>

  myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80013c2:	2301      	movs	r3, #1
 80013c4:	70bb      	strb	r3, [r7, #2]
  myMpuConfig.ClockSource = Internal_8MHz;
 80013c6:	2300      	movs	r3, #0
 80013c8:	703b      	strb	r3, [r7, #0]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80013ca:	2301      	movs	r3, #1
 80013cc:	70fb      	strb	r3, [r7, #3]
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80013ce:	2301      	movs	r3, #1
 80013d0:	707b      	strb	r3, [r7, #1]
  myMpuConfig.Sleep_Mode_Bit = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	713b      	strb	r3, [r7, #4]
  MPU6050_Config(&myMpuConfig);
 80013d6:	463b      	mov	r3, r7
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe9f 	bl	800111c <MPU6050_Config>

  //acc_error
  if(acc_error==0){
 80013de:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <main+0x238>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f040 80db 	bne.w	800159e <main+0x216>
	  for(i=0;i<200;i++){
 80013e8:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <main+0x23c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e0d1      	b.n	8001594 <main+0x20c>

		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 80013f0:	4875      	ldr	r0, [pc, #468]	; (80015c8 <main+0x240>)
 80013f2:	f7ff ff49 	bl	8001288 <MPU6050_Get_Accel_RawData>

		  acc_error_x+=atan(myAccelRaw.y/sqrt(pow(myAccelRaw.x,2)+pow(myAccelRaw.z,2)))*(180/3.141592654);
 80013f6:	4b74      	ldr	r3, [pc, #464]	; (80015c8 <main+0x240>)
 80013f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe fff9 	bl	80003f4 <__aeabi_i2d>
 8001402:	4604      	mov	r4, r0
 8001404:	460d      	mov	r5, r1
 8001406:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <main+0x240>)
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fff1 	bl	80003f4 <__aeabi_i2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141a:	f003 fd6b 	bl	8004ef4 <pow>
 800141e:	4680      	mov	r8, r0
 8001420:	4689      	mov	r9, r1
 8001422:	4b69      	ldr	r3, [pc, #420]	; (80015c8 <main+0x240>)
 8001424:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe ffe3 	bl	80003f4 <__aeabi_i2d>
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001436:	f003 fd5d 	bl	8004ef4 <pow>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4640      	mov	r0, r8
 8001440:	4649      	mov	r1, r9
 8001442:	f7fe fe8b 	bl	800015c <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f003 fead 	bl	80051ac <sqrt>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7ff f95f 	bl	800071c <__aeabi_ddiv>
 800145e:	4603      	mov	r3, r0
 8001460:	460c      	mov	r4, r1
 8001462:	4618      	mov	r0, r3
 8001464:	4621      	mov	r1, r4
 8001466:	f003 fbb7 	bl	8004bd8 <atan>
 800146a:	a351      	add	r3, pc, #324	; (adr r3, 80015b0 <main+0x228>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f82a 	bl	80004c8 <__aeabi_dmul>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	4625      	mov	r5, r4
 800147a:	461c      	mov	r4, r3
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <main+0x244>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe ffc9 	bl	8000418 <__aeabi_f2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7fe fe65 	bl	800015c <__adddf3>
 8001492:	4603      	mov	r3, r0
 8001494:	460c      	mov	r4, r1
 8001496:	4618      	mov	r0, r3
 8001498:	4621      	mov	r1, r4
 800149a:	f7ff fac5 	bl	8000a28 <__aeabi_d2f>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <main+0x244>)
 80014a2:	601a      	str	r2, [r3, #0]
		  acc_error_y+=atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654);
 80014a4:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <main+0x240>)
 80014a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014aa:	425b      	negs	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ffa1 	bl	80003f4 <__aeabi_i2d>
 80014b2:	4604      	mov	r4, r0
 80014b4:	460d      	mov	r5, r1
 80014b6:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <main+0x240>)
 80014b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ff99 	bl	80003f4 <__aeabi_i2d>
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ca:	f003 fd13 	bl	8004ef4 <pow>
 80014ce:	4680      	mov	r8, r0
 80014d0:	4689      	mov	r9, r1
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <main+0x240>)
 80014d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ff8b 	bl	80003f4 <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e6:	f003 fd05 	bl	8004ef4 <pow>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4640      	mov	r0, r8
 80014f0:	4649      	mov	r1, r9
 80014f2:	f7fe fe33 	bl	800015c <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f003 fe55 	bl	80051ac <sqrt>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7ff f907 	bl	800071c <__aeabi_ddiv>
 800150e:	4603      	mov	r3, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	f003 fb5f 	bl	8004bd8 <atan>
 800151a:	a325      	add	r3, pc, #148	; (adr r3, 80015b0 <main+0x228>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7fe ffd2 	bl	80004c8 <__aeabi_dmul>
 8001524:	4603      	mov	r3, r0
 8001526:	460c      	mov	r4, r1
 8001528:	4625      	mov	r5, r4
 800152a:	461c      	mov	r4, r3
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <main+0x248>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff71 	bl	8000418 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe fe0d 	bl	800015c <__adddf3>
 8001542:	4603      	mov	r3, r0
 8001544:	460c      	mov	r4, r1
 8001546:	4618      	mov	r0, r3
 8001548:	4621      	mov	r1, r4
 800154a:	f7ff fa6d 	bl	8000a28 <__aeabi_d2f>
 800154e:	4602      	mov	r2, r0
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <main+0x248>)
 8001552:	601a      	str	r2, [r3, #0]
		  if(i==199){
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <main+0x23c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2bc7      	cmp	r3, #199	; 0xc7
 800155a:	d116      	bne.n	800158a <main+0x202>
			  acc_error_x/=200;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <main+0x244>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	491c      	ldr	r1, [pc, #112]	; (80015d4 <main+0x24c>)
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fc72 	bl	8000e4c <__aeabi_fdiv>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <main+0x244>)
 800156e:	601a      	str	r2, [r3, #0]
			  acc_error_y/=200;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <main+0x248>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4917      	ldr	r1, [pc, #92]	; (80015d4 <main+0x24c>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fc68 	bl	8000e4c <__aeabi_fdiv>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <main+0x248>)
 8001582:	601a      	str	r2, [r3, #0]
			  acc_error=1;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <main+0x238>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
	  for(i=0;i<200;i++){
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <main+0x23c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <main+0x23c>)
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <main+0x23c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2bc7      	cmp	r3, #199	; 0xc7
 800159a:	f77f af29 	ble.w	80013f0 <main+0x68>
		  }
	  }
  }
  //gyro error
  if(gyro_error==0){
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <main+0x250>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 8083 	bne.w	80016ae <main+0x326>
	  for(i=0;i<200;i++){
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <main+0x23c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e07a      	b.n	80016a6 <main+0x31e>
 80015b0:	1a53b118 	.word	0x1a53b118
 80015b4:	404ca5dc 	.word	0x404ca5dc
 80015b8:	20000208 	.word	0x20000208
 80015bc:	2000019c 	.word	0x2000019c
 80015c0:	20000140 	.word	0x20000140
 80015c4:	200001f8 	.word	0x200001f8
 80015c8:	20000294 	.word	0x20000294
 80015cc:	200000f4 	.word	0x200000f4
 80015d0:	200000f8 	.word	0x200000f8
 80015d4:	43480000 	.word	0x43480000
 80015d8:	20000144 	.word	0x20000144
		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 80015dc:	48c0      	ldr	r0, [pc, #768]	; (80018e0 <main+0x558>)
 80015de:	f7ff feb9 	bl	8001354 <MPU6050_Get_Gyro_RawData>

		  gyro_error_x+=(myGyroRaw.x/65.5);
 80015e2:	4bc0      	ldr	r3, [pc, #768]	; (80018e4 <main+0x55c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ff16 	bl	8000418 <__aeabi_f2d>
 80015ec:	4604      	mov	r4, r0
 80015ee:	460d      	mov	r5, r1
 80015f0:	4bbb      	ldr	r3, [pc, #748]	; (80018e0 <main+0x558>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fefc 	bl	80003f4 <__aeabi_i2d>
 80015fc:	a3b0      	add	r3, pc, #704	; (adr r3, 80018c0 <main+0x538>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f88b 	bl	800071c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4620      	mov	r0, r4
 800160c:	4629      	mov	r1, r5
 800160e:	f7fe fda5 	bl	800015c <__adddf3>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	4618      	mov	r0, r3
 8001618:	4621      	mov	r1, r4
 800161a:	f7ff fa05 	bl	8000a28 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	4bb0      	ldr	r3, [pc, #704]	; (80018e4 <main+0x55c>)
 8001622:	601a      	str	r2, [r3, #0]
		  gyro_error_y+=(myGyroRaw.y/65.5);
 8001624:	4bb0      	ldr	r3, [pc, #704]	; (80018e8 <main+0x560>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fef5 	bl	8000418 <__aeabi_f2d>
 800162e:	4604      	mov	r4, r0
 8001630:	460d      	mov	r5, r1
 8001632:	4bab      	ldr	r3, [pc, #684]	; (80018e0 <main+0x558>)
 8001634:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fedb 	bl	80003f4 <__aeabi_i2d>
 800163e:	a3a0      	add	r3, pc, #640	; (adr r3, 80018c0 <main+0x538>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f86a 	bl	800071c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe fd84 	bl	800015c <__adddf3>
 8001654:	4603      	mov	r3, r0
 8001656:	460c      	mov	r4, r1
 8001658:	4618      	mov	r0, r3
 800165a:	4621      	mov	r1, r4
 800165c:	f7ff f9e4 	bl	8000a28 <__aeabi_d2f>
 8001660:	4602      	mov	r2, r0
 8001662:	4ba1      	ldr	r3, [pc, #644]	; (80018e8 <main+0x560>)
 8001664:	601a      	str	r2, [r3, #0]
		  if(i==199){
 8001666:	4ba1      	ldr	r3, [pc, #644]	; (80018ec <main+0x564>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2bc7      	cmp	r3, #199	; 0xc7
 800166c:	d116      	bne.n	800169c <main+0x314>
			  gyro_error_x/=200;
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <main+0x55c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	499f      	ldr	r1, [pc, #636]	; (80018f0 <main+0x568>)
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fbe9 	bl	8000e4c <__aeabi_fdiv>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b99      	ldr	r3, [pc, #612]	; (80018e4 <main+0x55c>)
 8001680:	601a      	str	r2, [r3, #0]
			  gyro_error_y/=200;
 8001682:	4b99      	ldr	r3, [pc, #612]	; (80018e8 <main+0x560>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	499a      	ldr	r1, [pc, #616]	; (80018f0 <main+0x568>)
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fbdf 	bl	8000e4c <__aeabi_fdiv>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b95      	ldr	r3, [pc, #596]	; (80018e8 <main+0x560>)
 8001694:	601a      	str	r2, [r3, #0]
			  gyro_error=1;
 8001696:	4b97      	ldr	r3, [pc, #604]	; (80018f4 <main+0x56c>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
	  for(i=0;i<200;i++){
 800169c:	4b93      	ldr	r3, [pc, #588]	; (80018ec <main+0x564>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a92      	ldr	r2, [pc, #584]	; (80018ec <main+0x564>)
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b91      	ldr	r3, [pc, #580]	; (80018ec <main+0x564>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2bc7      	cmp	r3, #199	; 0xc7
 80016ac:	dd96      	ble.n	80015dc <main+0x254>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick()-time_velocity_initial>1){
 80016ae:	f000 ff0d 	bl	80024cc <HAL_GetTick>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fabd 	bl	8000c34 <__aeabi_ui2f>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <main+0x570>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f7ff fa04 	bl	8000ad0 <__aeabi_fsub>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fcc4 	bl	800105c <__aeabi_fcmpgt>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8130 	beq.w	800193c <main+0x5b4>
		  time_velocity_initial=HAL_GetTick();
 80016dc:	f000 fef6 	bl	80024cc <HAL_GetTick>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff faa6 	bl	8000c34 <__aeabi_ui2f>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <main+0x570>)
 80016ec:	601a      	str	r2, [r3, #0]

		  timePrev = time;
 80016ee:	4b83      	ldr	r3, [pc, #524]	; (80018fc <main+0x574>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a83      	ldr	r2, [pc, #524]	; (8001900 <main+0x578>)
 80016f4:	6013      	str	r3, [r2, #0]
		  time = HAL_GetTick();
 80016f6:	f000 fee9 	bl	80024cc <HAL_GetTick>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fa99 	bl	8000c34 <__aeabi_ui2f>
 8001702:	4602      	mov	r2, r0
 8001704:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <main+0x574>)
 8001706:	601a      	str	r2, [r3, #0]
		  elapsed = (time - timePrev) / 1000;
 8001708:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <main+0x574>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b7c      	ldr	r3, [pc, #496]	; (8001900 <main+0x578>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f7ff f9dc 	bl	8000ad0 <__aeabi_fsub>
 8001718:	4603      	mov	r3, r0
 800171a:	497a      	ldr	r1, [pc, #488]	; (8001904 <main+0x57c>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fb95 	bl	8000e4c <__aeabi_fdiv>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b78      	ldr	r3, [pc, #480]	; (8001908 <main+0x580>)
 8001728:	601a      	str	r2, [r3, #0]

		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 800172a:	486d      	ldr	r0, [pc, #436]	; (80018e0 <main+0x558>)
 800172c:	f7ff fe12 	bl	8001354 <MPU6050_Get_Gyro_RawData>

		  //gyro_angle_x =  ((myGyroRaw.x/65.5) - gyro_error_x)*elapsed;
		  gyro_angle_y =  ((myGyroRaw.y/65.5) - gyro_error_y)*elapsed;
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <main+0x558>)
 8001732:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe5c 	bl	80003f4 <__aeabi_i2d>
 800173c:	a360      	add	r3, pc, #384	; (adr r3, 80018c0 <main+0x538>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ffeb 	bl	800071c <__aeabi_ddiv>
 8001746:	4603      	mov	r3, r0
 8001748:	460c      	mov	r4, r1
 800174a:	4625      	mov	r5, r4
 800174c:	461c      	mov	r4, r3
 800174e:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <main+0x560>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fe60 	bl	8000418 <__aeabi_f2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fcfa 	bl	8000158 <__aeabi_dsub>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4625      	mov	r5, r4
 800176a:	461c      	mov	r4, r3
 800176c:	4b66      	ldr	r3, [pc, #408]	; (8001908 <main+0x580>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe51 	bl	8000418 <__aeabi_f2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4620      	mov	r0, r4
 800177c:	4629      	mov	r1, r5
 800177e:	f7fe fea3 	bl	80004c8 <__aeabi_dmul>
 8001782:	4603      	mov	r3, r0
 8001784:	460c      	mov	r4, r1
 8001786:	4618      	mov	r0, r3
 8001788:	4621      	mov	r1, r4
 800178a:	f7ff f94d 	bl	8000a28 <__aeabi_d2f>
 800178e:	4602      	mov	r2, r0
 8001790:	4b5e      	ldr	r3, [pc, #376]	; (800190c <main+0x584>)
 8001792:	601a      	str	r2, [r3, #0]

		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8001794:	485e      	ldr	r0, [pc, #376]	; (8001910 <main+0x588>)
 8001796:	f7ff fd77 	bl	8001288 <MPU6050_Get_Accel_RawData>

		 // acc_angle_x = atan(myAccelRaw.y/sqrt(pow(myAccelRaw.x,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_x;
		  acc_angle_y = atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_y;
 800179a:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <main+0x588>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	425b      	negs	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fe26 	bl	80003f4 <__aeabi_i2d>
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
 80017ac:	4b58      	ldr	r3, [pc, #352]	; (8001910 <main+0x588>)
 80017ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe1e 	bl	80003f4 <__aeabi_i2d>
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c0:	f003 fb98 	bl	8004ef4 <pow>
 80017c4:	4680      	mov	r8, r0
 80017c6:	4689      	mov	r9, r1
 80017c8:	4b51      	ldr	r3, [pc, #324]	; (8001910 <main+0x588>)
 80017ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe10 	bl	80003f4 <__aeabi_i2d>
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017dc:	f003 fb8a 	bl	8004ef4 <pow>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4640      	mov	r0, r8
 80017e6:	4649      	mov	r1, r9
 80017e8:	f7fe fcb8 	bl	800015c <__adddf3>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f003 fcda 	bl	80051ac <sqrt>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7fe ff8c 	bl	800071c <__aeabi_ddiv>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	4618      	mov	r0, r3
 800180a:	4621      	mov	r1, r4
 800180c:	f003 f9e4 	bl	8004bd8 <atan>
 8001810:	a32d      	add	r3, pc, #180	; (adr r3, 80018c8 <main+0x540>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe fe57 	bl	80004c8 <__aeabi_dmul>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	4625      	mov	r5, r4
 8001820:	461c      	mov	r4, r3
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <main+0x58c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fdf6 	bl	8000418 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fc90 	bl	8000158 <__aeabi_dsub>
 8001838:	4603      	mov	r3, r0
 800183a:	460c      	mov	r4, r1
 800183c:	4618      	mov	r0, r3
 800183e:	4621      	mov	r1, r4
 8001840:	f7ff f8f2 	bl	8000a28 <__aeabi_d2f>
 8001844:	4602      	mov	r2, r0
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <main+0x590>)
 8001848:	601a      	str	r2, [r3, #0]

		  //final_angle_x = 0.98*(final_angle_x + gyro_angle_x) + 0.02*acc_angle_x;
		  final_angle_y_init = 0.98*(final_angle_y_init + gyro_angle_y) + 0.02*acc_angle_y; // calcula angulo inicial (graus)
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <main+0x594>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <main+0x584>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7ff f93d 	bl	8000ad4 <__addsf3>
 800185a:	4603      	mov	r3, r0
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fddb 	bl	8000418 <__aeabi_f2d>
 8001862:	a31b      	add	r3, pc, #108	; (adr r3, 80018d0 <main+0x548>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fe2e 	bl	80004c8 <__aeabi_dmul>
 800186c:	4603      	mov	r3, r0
 800186e:	460c      	mov	r4, r1
 8001870:	4625      	mov	r5, r4
 8001872:	461c      	mov	r4, r3
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <main+0x590>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fdcd 	bl	8000418 <__aeabi_f2d>
 800187e:	a316      	add	r3, pc, #88	; (adr r3, 80018d8 <main+0x550>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fe20 	bl	80004c8 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fc64 	bl	800015c <__adddf3>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	4618      	mov	r0, r3
 800189a:	4621      	mov	r1, r4
 800189c:	f7ff f8c4 	bl	8000a28 <__aeabi_d2f>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <main+0x594>)
 80018a4:	601a      	str	r2, [r3, #0]

		  erro_init = final_angle_y_init - setpoint;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <main+0x594>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f90d 	bl	8000ad0 <__aeabi_fsub>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	e031      	b.n	8001920 <main+0x598>
 80018bc:	f3af 8000 	nop.w
 80018c0:	00000000 	.word	0x00000000
 80018c4:	40506000 	.word	0x40506000
 80018c8:	1a53b118 	.word	0x1a53b118
 80018cc:	404ca5dc 	.word	0x404ca5dc
 80018d0:	f5c28f5c 	.word	0xf5c28f5c
 80018d4:	3fef5c28 	.word	0x3fef5c28
 80018d8:	47ae147b 	.word	0x47ae147b
 80018dc:	3f947ae1 	.word	0x3f947ae1
 80018e0:	200001f0 	.word	0x200001f0
 80018e4:	200000fc 	.word	0x200000fc
 80018e8:	20000100 	.word	0x20000100
 80018ec:	200001f8 	.word	0x200001f8
 80018f0:	43480000 	.word	0x43480000
 80018f4:	20000144 	.word	0x20000144
 80018f8:	20000138 	.word	0x20000138
 80018fc:	20000108 	.word	0x20000108
 8001900:	20000104 	.word	0x20000104
 8001904:	447a0000 	.word	0x447a0000
 8001908:	2000010c 	.word	0x2000010c
 800190c:	20000110 	.word	0x20000110
 8001910:	20000294 	.word	0x20000294
 8001914:	200000f8 	.word	0x200000f8
 8001918:	20000114 	.word	0x20000114
 800191c:	20000118 	.word	0x20000118
 8001920:	4bbd      	ldr	r3, [pc, #756]	; (8001c18 <main+0x890>)
 8001922:	601a      	str	r2, [r3, #0]
		  erro_integrado+=erro_init;
 8001924:	4bbd      	ldr	r3, [pc, #756]	; (8001c1c <main+0x894>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4bbb      	ldr	r3, [pc, #748]	; (8001c18 <main+0x890>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f7ff f8d0 	bl	8000ad4 <__addsf3>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	4bb8      	ldr	r3, [pc, #736]	; (8001c1c <main+0x894>)
 800193a:	601a      	str	r2, [r3, #0]
	  }

	  if(HAL_GetTick()-time_velocity_final>2){
 800193c:	f000 fdc6 	bl	80024cc <HAL_GetTick>
 8001940:	4603      	mov	r3, r0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f976 	bl	8000c34 <__aeabi_ui2f>
 8001948:	4602      	mov	r2, r0
 800194a:	4bb5      	ldr	r3, [pc, #724]	; (8001c20 <main+0x898>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff f8bd 	bl	8000ad0 <__aeabi_fsub>
 8001956:	4603      	mov	r3, r0
 8001958:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fb7d 	bl	800105c <__aeabi_fcmpgt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 810b 	beq.w	8001b80 <main+0x7f8>
		  time_velocity_final=HAL_GetTick();
 800196a:	f000 fdaf 	bl	80024cc <HAL_GetTick>
 800196e:	4603      	mov	r3, r0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f95f 	bl	8000c34 <__aeabi_ui2f>
 8001976:	4602      	mov	r2, r0
 8001978:	4ba9      	ldr	r3, [pc, #676]	; (8001c20 <main+0x898>)
 800197a:	601a      	str	r2, [r3, #0]

		  timePrev = time;
 800197c:	4ba9      	ldr	r3, [pc, #676]	; (8001c24 <main+0x89c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4aa9      	ldr	r2, [pc, #676]	; (8001c28 <main+0x8a0>)
 8001982:	6013      	str	r3, [r2, #0]
		  time = HAL_GetTick();
 8001984:	f000 fda2 	bl	80024cc <HAL_GetTick>
 8001988:	4603      	mov	r3, r0
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f952 	bl	8000c34 <__aeabi_ui2f>
 8001990:	4602      	mov	r2, r0
 8001992:	4ba4      	ldr	r3, [pc, #656]	; (8001c24 <main+0x89c>)
 8001994:	601a      	str	r2, [r3, #0]
		  elapsed = (time - timePrev) / 1000;
 8001996:	4ba3      	ldr	r3, [pc, #652]	; (8001c24 <main+0x89c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4ba3      	ldr	r3, [pc, #652]	; (8001c28 <main+0x8a0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f7ff f895 	bl	8000ad0 <__aeabi_fsub>
 80019a6:	4603      	mov	r3, r0
 80019a8:	49a0      	ldr	r1, [pc, #640]	; (8001c2c <main+0x8a4>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fa4e 	bl	8000e4c <__aeabi_fdiv>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b9e      	ldr	r3, [pc, #632]	; (8001c30 <main+0x8a8>)
 80019b6:	601a      	str	r2, [r3, #0]

		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 80019b8:	489e      	ldr	r0, [pc, #632]	; (8001c34 <main+0x8ac>)
 80019ba:	f7ff fccb 	bl	8001354 <MPU6050_Get_Gyro_RawData>

		  gyro_angle_y =  ((myGyroRaw.y/65.5) - gyro_error_y)*elapsed;
 80019be:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <main+0x8ac>)
 80019c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fd15 	bl	80003f4 <__aeabi_i2d>
 80019ca:	a389      	add	r3, pc, #548	; (adr r3, 8001bf0 <main+0x868>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fea4 	bl	800071c <__aeabi_ddiv>
 80019d4:	4603      	mov	r3, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	4625      	mov	r5, r4
 80019da:	461c      	mov	r4, r3
 80019dc:	4b96      	ldr	r3, [pc, #600]	; (8001c38 <main+0x8b0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd19 	bl	8000418 <__aeabi_f2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4620      	mov	r0, r4
 80019ec:	4629      	mov	r1, r5
 80019ee:	f7fe fbb3 	bl	8000158 <__aeabi_dsub>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	4625      	mov	r5, r4
 80019f8:	461c      	mov	r4, r3
 80019fa:	4b8d      	ldr	r3, [pc, #564]	; (8001c30 <main+0x8a8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd0a 	bl	8000418 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fd5c 	bl	80004c8 <__aeabi_dmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	460c      	mov	r4, r1
 8001a14:	4618      	mov	r0, r3
 8001a16:	4621      	mov	r1, r4
 8001a18:	f7ff f806 	bl	8000a28 <__aeabi_d2f>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <main+0x8b4>)
 8001a20:	601a      	str	r2, [r3, #0]

		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8001a22:	4887      	ldr	r0, [pc, #540]	; (8001c40 <main+0x8b8>)
 8001a24:	f7ff fc30 	bl	8001288 <MPU6050_Get_Accel_RawData>

		  acc_angle_y = atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_y;
 8001a28:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <main+0x8b8>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	425b      	negs	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fcdf 	bl	80003f4 <__aeabi_i2d>
 8001a36:	4604      	mov	r4, r0
 8001a38:	460d      	mov	r5, r1
 8001a3a:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <main+0x8b8>)
 8001a3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fcd7 	bl	80003f4 <__aeabi_i2d>
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4e:	f003 fa51 	bl	8004ef4 <pow>
 8001a52:	4680      	mov	r8, r0
 8001a54:	4689      	mov	r9, r1
 8001a56:	4b7a      	ldr	r3, [pc, #488]	; (8001c40 <main+0x8b8>)
 8001a58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fcc9 	bl	80003f4 <__aeabi_i2d>
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a6a:	f003 fa43 	bl	8004ef4 <pow>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4640      	mov	r0, r8
 8001a74:	4649      	mov	r1, r9
 8001a76:	f7fe fb71 	bl	800015c <__adddf3>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f003 fb93 	bl	80051ac <sqrt>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fe45 	bl	800071c <__aeabi_ddiv>
 8001a92:	4603      	mov	r3, r0
 8001a94:	460c      	mov	r4, r1
 8001a96:	4618      	mov	r0, r3
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f003 f89d 	bl	8004bd8 <atan>
 8001a9e:	a356      	add	r3, pc, #344	; (adr r3, 8001bf8 <main+0x870>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fd10 	bl	80004c8 <__aeabi_dmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460c      	mov	r4, r1
 8001aac:	4625      	mov	r5, r4
 8001aae:	461c      	mov	r4, r3
 8001ab0:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <main+0x8bc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fcaf 	bl	8000418 <__aeabi_f2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4620      	mov	r0, r4
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	f7fe fb49 	bl	8000158 <__aeabi_dsub>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460c      	mov	r4, r1
 8001aca:	4618      	mov	r0, r3
 8001acc:	4621      	mov	r1, r4
 8001ace:	f7fe ffab 	bl	8000a28 <__aeabi_d2f>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b5c      	ldr	r3, [pc, #368]	; (8001c48 <main+0x8c0>)
 8001ad6:	601a      	str	r2, [r3, #0]

		  final_angle_y_final = 0.98*(final_angle_y_final + gyro_angle_y) + 0.02*acc_angle_y; // calcula angulo final (graus)
 8001ad8:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <main+0x8c4>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <main+0x8b4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f7fe fff6 	bl	8000ad4 <__addsf3>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fc94 	bl	8000418 <__aeabi_f2d>
 8001af0:	a343      	add	r3, pc, #268	; (adr r3, 8001c00 <main+0x878>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f7fe fce7 	bl	80004c8 <__aeabi_dmul>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	4625      	mov	r5, r4
 8001b00:	461c      	mov	r4, r3
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <main+0x8c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc86 	bl	8000418 <__aeabi_f2d>
 8001b0c:	a33e      	add	r3, pc, #248	; (adr r3, 8001c08 <main+0x880>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fcd9 	bl	80004c8 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fb1d 	bl	800015c <__adddf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7fe ff7d 	bl	8000a28 <__aeabi_d2f>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <main+0x8c4>)
 8001b32:	601a      	str	r2, [r3, #0]

		  erro_final = final_angle_y_final - setpoint;
 8001b34:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <main+0x8c4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe ffc6 	bl	8000ad0 <__aeabi_fsub>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <main+0x8c8>)
 8001b4a:	601a      	str	r2, [r3, #0]
		  erro_derivado = (erro_final-erro_init)/0.001;
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <main+0x8c8>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <main+0x890>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f7fe ffba 	bl	8000ad0 <__aeabi_fsub>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc5a 	bl	8000418 <__aeabi_f2d>
 8001b64:	a32a      	add	r3, pc, #168	; (adr r3, 8001c10 <main+0x888>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fdd7 	bl	800071c <__aeabi_ddiv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	4618      	mov	r0, r3
 8001b74:	4621      	mov	r1, r4
 8001b76:	f7fe ff57 	bl	8000a28 <__aeabi_d2f>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <main+0x8cc>)
 8001b7e:	601a      	str	r2, [r3, #0]

	  }

	  if(HAL_GetTick()-time_PID>5){
 8001b80:	f000 fca4 	bl	80024cc <HAL_GetTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f854 	bl	8000c34 <__aeabi_ui2f>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <main+0x8d0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7fe ff9b 	bl	8000ad0 <__aeabi_fsub>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	492f      	ldr	r1, [pc, #188]	; (8001c5c <main+0x8d4>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fa5c 	bl	800105c <__aeabi_fcmpgt>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d077      	beq.n	8001c9a <main+0x912>
		  time_PID=HAL_GetTick();
 8001baa:	f000 fc8f 	bl	80024cc <HAL_GetTick>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f83f 	bl	8000c34 <__aeabi_ui2f>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <main+0x8d0>)
 8001bba:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // pisca o led
 8001bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc0:	4827      	ldr	r0, [pc, #156]	; (8001c60 <main+0x8d8>)
 8001bc2:	f000 ff05 	bl	80029d0 <HAL_GPIO_TogglePin>

		  saida = kp*erro_init + ki*erro_integrado + kd*erro_derivado; // devo atualizar o calculo.
 8001bc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <main+0x890>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	f7ff f887 	bl	8000ce4 <__aeabi_fmul>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461c      	mov	r4, r3
 8001bda:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <main+0x8dc>)
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <main+0x894>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f7ff f87e 	bl	8000ce4 <__aeabi_fmul>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4619      	mov	r1, r3
 8001bec:	e03c      	b.n	8001c68 <main+0x8e0>
 8001bee:	bf00      	nop
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	40506000 	.word	0x40506000
 8001bf8:	1a53b118 	.word	0x1a53b118
 8001bfc:	404ca5dc 	.word	0x404ca5dc
 8001c00:	f5c28f5c 	.word	0xf5c28f5c
 8001c04:	3fef5c28 	.word	0x3fef5c28
 8001c08:	47ae147b 	.word	0x47ae147b
 8001c0c:	3f947ae1 	.word	0x3f947ae1
 8001c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c14:	3f50624d 	.word	0x3f50624d
 8001c18:	20000124 	.word	0x20000124
 8001c1c:	20000130 	.word	0x20000130
 8001c20:	2000013c 	.word	0x2000013c
 8001c24:	20000108 	.word	0x20000108
 8001c28:	20000104 	.word	0x20000104
 8001c2c:	447a0000 	.word	0x447a0000
 8001c30:	2000010c 	.word	0x2000010c
 8001c34:	200001f0 	.word	0x200001f0
 8001c38:	20000100 	.word	0x20000100
 8001c3c:	20000110 	.word	0x20000110
 8001c40:	20000294 	.word	0x20000294
 8001c44:	200000f8 	.word	0x200000f8
 8001c48:	20000114 	.word	0x20000114
 8001c4c:	2000011c 	.word	0x2000011c
 8001c50:	20000128 	.word	0x20000128
 8001c54:	20000134 	.word	0x20000134
 8001c58:	20000120 	.word	0x20000120
 8001c5c:	40a00000 	.word	0x40a00000
 8001c60:	40011000 	.word	0x40011000
 8001c64:	3a83126f 	.word	0x3a83126f
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7fe ff33 	bl	8000ad4 <__addsf3>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461c      	mov	r4, r3
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <main+0x914>)
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <main+0x918>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f7ff f832 	bl	8000ce4 <__aeabi_fmul>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7fe ff25 	bl	8000ad4 <__addsf3>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <main+0x91c>)
 8001c90:	601a      	str	r2, [r3, #0]
		  erro_integrado = 0;
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <main+0x920>)
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
	  if(HAL_GetTick()-time_velocity_initial>1){
 8001c9a:	e508      	b.n	80016ae <main+0x326>
 8001c9c:	3a83126f 	.word	0x3a83126f
 8001ca0:	20000134 	.word	0x20000134
 8001ca4:	2000012c 	.word	0x2000012c
 8001ca8:	20000130 	.word	0x20000130

08001cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b090      	sub	sp, #64	; 0x40
 8001cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	2228      	movs	r2, #40	; 0x28
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 ff83 	bl	8004bc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf0:	f107 0318 	add.w	r3, r7, #24
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fddf 	bl	80038b8 <HAL_RCC_OscConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d00:	f000 f9e2 	bl	80020c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d04:	230f      	movs	r3, #15
 8001d06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f84a 	bl	8003db8 <HAL_RCC_ClockConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d2a:	f000 f9cd 	bl	80020c8 <Error_Handler>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3740      	adds	r7, #64	; 0x40
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <MX_I2C1_Init+0x54>)
 8001d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MX_I2C1_Init+0x58>)
 8001d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <MX_I2C1_Init+0x50>)
 8001d76:	f000 fe43 	bl	8002a00 <HAL_I2C_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d80:	f000 f9a2 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000148 	.word	0x20000148
 8001d8c:	40005400 	.word	0x40005400
 8001d90:	00061a80 	.word	0x00061a80

08001d94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <MX_I2C2_Init+0x54>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <MX_I2C2_Init+0x58>)
 8001da2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001db6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dd0:	4804      	ldr	r0, [pc, #16]	; (8001de4 <MX_I2C2_Init+0x50>)
 8001dd2:	f000 fe15 	bl	8002a00 <HAL_I2C_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ddc:	f000 f974 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000019c 	.word	0x2000019c
 8001de8:	40005800 	.word	0x40005800
 8001dec:	00061a80 	.word	0x00061a80

08001df0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b096      	sub	sp, #88	; 0x58
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]
 8001e1e:	615a      	str	r2, [r3, #20]
 8001e20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2220      	movs	r2, #32
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fecc 	bl	8004bc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e2e:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e30:	4a3e      	ldr	r2, [pc, #248]	; (8001f2c <MX_TIM1_Init+0x13c>)
 8001e32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001e34:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e36:	2247      	movs	r2, #71	; 0x47
 8001e38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e42:	2263      	movs	r2, #99	; 0x63
 8001e44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e52:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e58:	4833      	ldr	r0, [pc, #204]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e5a:	f002 f935 	bl	80040c8 <HAL_TIM_Base_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001e64:	f000 f930 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e72:	4619      	mov	r1, r3
 8001e74:	482c      	ldr	r0, [pc, #176]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e76:	f002 fa7f 	bl	8004378 <HAL_TIM_ConfigClockSource>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001e80:	f000 f922 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e84:	4828      	ldr	r0, [pc, #160]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001e86:	f002 f94a 	bl	800411e <HAL_TIM_PWM_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001e90:	f000 f91a 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4821      	ldr	r0, [pc, #132]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001ea4:	f002 fdc4 	bl	8004a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001eae:	f000 f90b 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb2:	2360      	movs	r3, #96	; 0x60
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4814      	ldr	r0, [pc, #80]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001ed8:	f002 f988 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001ee2:	f000 f8f1 	bl	80020c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	4619      	mov	r1, r3
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001f0a:	f002 fdd5 	bl	8004ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001f14:	f000 f8d8 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <MX_TIM1_Init+0x138>)
 8001f1a:	f000 f9a9 	bl	8002270 <HAL_TIM_MspPostInit>

}
 8001f1e:	bf00      	nop
 8001f20:	3758      	adds	r7, #88	; 0x58
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000208 	.word	0x20000208
 8001f2c:	40012c00 	.word	0x40012c00

08001f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f60:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-2;
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001f6a:	2246      	movs	r2, #70	; 0x46
 8001f6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b29      	ldr	r3, [pc, #164]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-2;
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001f76:	2262      	movs	r2, #98	; 0x62
 8001f78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f86:	4823      	ldr	r0, [pc, #140]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001f88:	f002 f89e 	bl	80040c8 <HAL_TIM_Base_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001f92:	f000 f899 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481c      	ldr	r0, [pc, #112]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001fa4:	f002 f9e8 	bl	8004378 <HAL_TIM_ConfigClockSource>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001fae:	f000 f88b 	bl	80020c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fb2:	4818      	ldr	r0, [pc, #96]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001fb4:	f002 f8b3 	bl	800411e <HAL_TIM_PWM_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001fbe:	f000 f883 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4810      	ldr	r0, [pc, #64]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001fd2:	f002 fd2d 	bl	8004a30 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001fdc:	f000 f874 	bl	80020c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	; 0x60
 8001fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4807      	ldr	r0, [pc, #28]	; (8002014 <MX_TIM2_Init+0xe4>)
 8001ff8:	f002 f8f8 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002002:	f000 f861 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002006:	4803      	ldr	r0, [pc, #12]	; (8002014 <MX_TIM2_Init+0xe4>)
 8002008:	f000 f932 	bl	8002270 <HAL_TIM_MspPostInit>

}
 800200c:	bf00      	nop
 800200e:	3738      	adds	r7, #56	; 0x38
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000248 	.word	0x20000248

08002018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <MX_GPIO_Init+0xa8>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <MX_GPIO_Init+0xa8>)
 8002032:	f043 0310 	orr.w	r3, r3, #16
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <MX_GPIO_Init+0xa8>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <MX_GPIO_Init+0xa8>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <MX_GPIO_Init+0xa8>)
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_GPIO_Init+0xa8>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_GPIO_Init+0xa8>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <MX_GPIO_Init+0xa8>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6193      	str	r3, [r2, #24]
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_GPIO_Init+0xa8>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_GPIO_Init+0xa8>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <MX_GPIO_Init+0xa8>)
 800207a:	f043 0308 	orr.w	r3, r3, #8
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_GPIO_Init+0xa8>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002092:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MX_GPIO_Init+0xac>)
 8002094:	f000 fc84 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209e:	2301      	movs	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4619      	mov	r1, r3
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_GPIO_Init+0xac>)
 80020b2:	f000 fb1b 	bl	80026ec <HAL_GPIO_Init>

}
 80020b6:	bf00      	nop
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40011000 	.word	0x40011000

080020c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_MspInit+0x5c>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_MspInit+0x5c>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6193      	str	r3, [r2, #24]
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_MspInit+0x5c>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_MspInit+0x5c>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_MspInit+0x5c>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_MspInit+0x5c>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_MspInit+0x60>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_MspInit+0x60>)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	40021000 	.word	0x40021000
 8002134:	40010000 	.word	0x40010000

08002138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0318 	add.w	r3, r7, #24
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <HAL_I2C_MspInit+0xc8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d124      	bne.n	80021a2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4a29      	ldr	r2, [pc, #164]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 800215e:	f043 0308 	orr.w	r3, r3, #8
 8002162:	6193      	str	r3, [r2, #24]
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002170:	23c0      	movs	r3, #192	; 0xc0
 8002172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002174:	2312      	movs	r3, #18
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0318 	add.w	r3, r7, #24
 8002180:	4619      	mov	r1, r3
 8002182:	4821      	ldr	r0, [pc, #132]	; (8002208 <HAL_I2C_MspInit+0xd0>)
 8002184:	f000 fab2 	bl	80026ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 800218e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002192:	61d3      	str	r3, [r2, #28]
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021a0:	e029      	b.n	80021f6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_I2C_MspInit+0xd4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d124      	bne.n	80021f6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ca:	2312      	movs	r3, #18
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 0318 	add.w	r3, r7, #24
 80021d6:	4619      	mov	r1, r3
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <HAL_I2C_MspInit+0xd0>)
 80021da:	f000 fa87 	bl	80026ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 80021e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_I2C_MspInit+0xcc>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40005400 	.word	0x40005400
 8002204:	40021000 	.word	0x40021000
 8002208:	40010c00 	.word	0x40010c00
 800220c:	40005800 	.word	0x40005800

08002210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_TIM_Base_MspInit+0x58>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d10c      	bne.n	800223c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_TIM_Base_MspInit+0x5c>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_TIM_Base_MspInit+0x5c>)
 8002228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800222c:	6193      	str	r3, [r2, #24]
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_TIM_Base_MspInit+0x5c>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800223a:	e010      	b.n	800225e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d10b      	bne.n	800225e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_TIM_Base_MspInit+0x5c>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_TIM_Base_MspInit+0x5c>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_TIM_Base_MspInit+0x5c>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_TIM_MspPostInit+0x98>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d119      	bne.n	80022c4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <HAL_TIM_MspPostInit+0x9c>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a1d      	ldr	r2, [pc, #116]	; (800230c <HAL_TIM_MspPostInit+0x9c>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_TIM_MspPostInit+0x9c>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4619      	mov	r1, r3
 80022bc:	4814      	ldr	r0, [pc, #80]	; (8002310 <HAL_TIM_MspPostInit+0xa0>)
 80022be:	f000 fa15 	bl	80026ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022c2:	e01c      	b.n	80022fe <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d117      	bne.n	80022fe <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_TIM_MspPostInit+0x9c>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	4a0e      	ldr	r2, [pc, #56]	; (800230c <HAL_TIM_MspPostInit+0x9c>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6193      	str	r3, [r2, #24]
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_TIM_MspPostInit+0x9c>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022e6:	2302      	movs	r3, #2
 80022e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2302      	movs	r3, #2
 80022f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_TIM_MspPostInit+0xa0>)
 80022fa:	f000 f9f7 	bl	80026ec <HAL_GPIO_Init>
}
 80022fe:	bf00      	nop
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40012c00 	.word	0x40012c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40010800 	.word	0x40010800

08002314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <HardFault_Handler+0x4>

08002326 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <MemManage_Handler+0x4>

0800232c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <BusFault_Handler+0x4>

08002332 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <UsageFault_Handler+0x4>

08002338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002360:	f000 f8a2 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <SystemInit+0x5c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <SystemInit+0x5c>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <SystemInit+0x5c>)
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4911      	ldr	r1, [pc, #68]	; (80023c4 <SystemInit+0x5c>)
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <SystemInit+0x60>)
 8002380:	4013      	ands	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <SystemInit+0x5c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <SystemInit+0x5c>)
 800238a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800238e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <SystemInit+0x5c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <SystemInit+0x5c>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <SystemInit+0x5c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <SystemInit+0x5c>)
 80023a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <SystemInit+0x5c>)
 80023ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SystemInit+0x64>)
 80023b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	f8ff0000 	.word	0xf8ff0000
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023d2:	e003      	b.n	80023dc <LoopCopyDataInit>

080023d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023da:	3104      	adds	r1, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023dc:	480a      	ldr	r0, [pc, #40]	; (8002408 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023e4:	d3f6      	bcc.n	80023d4 <CopyDataInit>
  ldr r2, =_sbss
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023e8:	e002      	b.n	80023f0 <LoopFillZerobss>

080023ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023ec:	f842 3b04 	str.w	r3, [r2], #4

080023f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023f4:	d3f9      	bcc.n	80023ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023f6:	f7ff ffb7 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f002 fbb5 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023fe:	f7fe ffc3 	bl	8001388 <main>
  bx lr
 8002402:	4770      	bx	lr
  ldr r3, =_sidata
 8002404:	080060c8 	.word	0x080060c8
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800240c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002410:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002414:	200002a0 	.word	0x200002a0

08002418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC1_2_IRQHandler>
	...

0800241c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_Init+0x28>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_Init+0x28>)
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 f929 	bl	8002684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7ff fe4c 	bl	80020d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40022000 	.word	0x40022000

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f933 	bl	80026d2 <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 f909 	bl	800269a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_IncTick+0x1c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_IncTick+0x20>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <HAL_IncTick+0x20>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	20000008 	.word	0x20000008
 80024c8:	2000029c 	.word	0x2000029c

080024cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_GetTick+0x10>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	2000029c 	.word	0x2000029c

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff fff0 	bl	80024cc <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_Delay+0x40>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffe0 	bl	80024cc <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000008 	.word	0x20000008

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	6039      	str	r1, [r7, #0]
 8002592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	db0a      	blt.n	80025b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <__NVIC_SetPriority+0x4c>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	0112      	lsls	r2, r2, #4
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	440b      	add	r3, r1
 80025ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b0:	e00a      	b.n	80025c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <__NVIC_SetPriority+0x50>)
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3b04      	subs	r3, #4
 80025c0:	0112      	lsls	r2, r2, #4
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	440b      	add	r3, r1
 80025c6:	761a      	strb	r2, [r3, #24]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f1c3 0307 	rsb	r3, r3, #7
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	bf28      	it	cs
 80025fa:	2304      	movcs	r3, #4
 80025fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3304      	adds	r3, #4
 8002602:	2b06      	cmp	r3, #6
 8002604:	d902      	bls.n	800260c <NVIC_EncodePriority+0x30>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3b03      	subs	r3, #3
 800260a:	e000      	b.n	800260e <NVIC_EncodePriority+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	f04f 32ff 	mov.w	r2, #4294967295
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	401a      	ands	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43d9      	mvns	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	4313      	orrs	r3, r2
         );
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002650:	d301      	bcc.n	8002656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002652:	2301      	movs	r3, #1
 8002654:	e00f      	b.n	8002676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <SysTick_Config+0x40>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265e:	210f      	movs	r1, #15
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f7ff ff90 	bl	8002588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <SysTick_Config+0x40>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <SysTick_Config+0x40>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ff49 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ac:	f7ff ff5e 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7ff ff90 	bl	80025dc <NVIC_EncodePriority>
 80026bc:	4602      	mov	r2, r0
 80026be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff5f 	bl	8002588 <__NVIC_SetPriority>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffb0 	bl	8002640 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b08b      	sub	sp, #44	; 0x2c
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	e127      	b.n	8002950 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002700:	2201      	movs	r2, #1
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 8116 	bne.w	800294a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b12      	cmp	r3, #18
 8002724:	d034      	beq.n	8002790 <HAL_GPIO_Init+0xa4>
 8002726:	2b12      	cmp	r3, #18
 8002728:	d80d      	bhi.n	8002746 <HAL_GPIO_Init+0x5a>
 800272a:	2b02      	cmp	r3, #2
 800272c:	d02b      	beq.n	8002786 <HAL_GPIO_Init+0x9a>
 800272e:	2b02      	cmp	r3, #2
 8002730:	d804      	bhi.n	800273c <HAL_GPIO_Init+0x50>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d031      	beq.n	800279a <HAL_GPIO_Init+0xae>
 8002736:	2b01      	cmp	r3, #1
 8002738:	d01c      	beq.n	8002774 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800273a:	e048      	b.n	80027ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800273c:	2b03      	cmp	r3, #3
 800273e:	d043      	beq.n	80027c8 <HAL_GPIO_Init+0xdc>
 8002740:	2b11      	cmp	r3, #17
 8002742:	d01b      	beq.n	800277c <HAL_GPIO_Init+0x90>
          break;
 8002744:	e043      	b.n	80027ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002746:	4a89      	ldr	r2, [pc, #548]	; (800296c <HAL_GPIO_Init+0x280>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d026      	beq.n	800279a <HAL_GPIO_Init+0xae>
 800274c:	4a87      	ldr	r2, [pc, #540]	; (800296c <HAL_GPIO_Init+0x280>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d806      	bhi.n	8002760 <HAL_GPIO_Init+0x74>
 8002752:	4a87      	ldr	r2, [pc, #540]	; (8002970 <HAL_GPIO_Init+0x284>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d020      	beq.n	800279a <HAL_GPIO_Init+0xae>
 8002758:	4a86      	ldr	r2, [pc, #536]	; (8002974 <HAL_GPIO_Init+0x288>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01d      	beq.n	800279a <HAL_GPIO_Init+0xae>
          break;
 800275e:	e036      	b.n	80027ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002760:	4a85      	ldr	r2, [pc, #532]	; (8002978 <HAL_GPIO_Init+0x28c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d019      	beq.n	800279a <HAL_GPIO_Init+0xae>
 8002766:	4a85      	ldr	r2, [pc, #532]	; (800297c <HAL_GPIO_Init+0x290>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d016      	beq.n	800279a <HAL_GPIO_Init+0xae>
 800276c:	4a84      	ldr	r2, [pc, #528]	; (8002980 <HAL_GPIO_Init+0x294>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0xae>
          break;
 8002772:	e02c      	b.n	80027ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	623b      	str	r3, [r7, #32]
          break;
 800277a:	e028      	b.n	80027ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	3304      	adds	r3, #4
 8002782:	623b      	str	r3, [r7, #32]
          break;
 8002784:	e023      	b.n	80027ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	3308      	adds	r3, #8
 800278c:	623b      	str	r3, [r7, #32]
          break;
 800278e:	e01e      	b.n	80027ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	330c      	adds	r3, #12
 8002796:	623b      	str	r3, [r7, #32]
          break;
 8002798:	e019      	b.n	80027ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027a2:	2304      	movs	r3, #4
 80027a4:	623b      	str	r3, [r7, #32]
          break;
 80027a6:	e012      	b.n	80027ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b0:	2308      	movs	r3, #8
 80027b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	611a      	str	r2, [r3, #16]
          break;
 80027ba:	e008      	b.n	80027ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027bc:	2308      	movs	r3, #8
 80027be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	615a      	str	r2, [r3, #20]
          break;
 80027c6:	e002      	b.n	80027ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
          break;
 80027cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2bff      	cmp	r3, #255	; 0xff
 80027d2:	d801      	bhi.n	80027d8 <HAL_GPIO_Init+0xec>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	e001      	b.n	80027dc <HAL_GPIO_Init+0xf0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2bff      	cmp	r3, #255	; 0xff
 80027e2:	d802      	bhi.n	80027ea <HAL_GPIO_Init+0xfe>
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_Init+0x104>
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	3b08      	subs	r3, #8
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	210f      	movs	r1, #15
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	401a      	ands	r2, r3
 8002802:	6a39      	ldr	r1, [r7, #32]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	431a      	orrs	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8096 	beq.w	800294a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800281e:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_GPIO_Init+0x298>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_GPIO_Init+0x298>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6193      	str	r3, [r2, #24]
 800282a:	4b56      	ldr	r3, [pc, #344]	; (8002984 <HAL_GPIO_Init+0x298>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002836:	4a54      	ldr	r2, [pc, #336]	; (8002988 <HAL_GPIO_Init+0x29c>)
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4b      	ldr	r2, [pc, #300]	; (800298c <HAL_GPIO_Init+0x2a0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x19e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <HAL_GPIO_Init+0x2a4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x19a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a49      	ldr	r2, [pc, #292]	; (8002994 <HAL_GPIO_Init+0x2a8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x196>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a48      	ldr	r2, [pc, #288]	; (8002998 <HAL_GPIO_Init+0x2ac>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x192>
 800287a:	2303      	movs	r3, #3
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x1a0>
 800287e:	2304      	movs	r3, #4
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x1a0>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x1a0>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x1a0>
 800288a:	2300      	movs	r3, #0
 800288c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800289c:	493a      	ldr	r1, [pc, #232]	; (8002988 <HAL_GPIO_Init+0x29c>)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_GPIO_Init+0x2b0>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4938      	ldr	r1, [pc, #224]	; (800299c <HAL_GPIO_Init+0x2b0>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
 80028c2:	e006      	b.n	80028d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_GPIO_Init+0x2b0>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	4933      	ldr	r1, [pc, #204]	; (800299c <HAL_GPIO_Init+0x2b0>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_GPIO_Init+0x2b0>)
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	492e      	ldr	r1, [pc, #184]	; (800299c <HAL_GPIO_Init+0x2b0>)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
 80028ea:	e006      	b.n	80028fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_GPIO_Init+0x2b0>)
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	4929      	ldr	r1, [pc, #164]	; (800299c <HAL_GPIO_Init+0x2b0>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002906:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_GPIO_Init+0x2b0>)
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4924      	ldr	r1, [pc, #144]	; (800299c <HAL_GPIO_Init+0x2b0>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
 8002912:	e006      	b.n	8002922 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_GPIO_Init+0x2b0>)
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	43db      	mvns	r3, r3
 800291c:	491f      	ldr	r1, [pc, #124]	; (800299c <HAL_GPIO_Init+0x2b0>)
 800291e:	4013      	ands	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_GPIO_Init+0x2b0>)
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	491a      	ldr	r1, [pc, #104]	; (800299c <HAL_GPIO_Init+0x2b0>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	60cb      	str	r3, [r1, #12]
 800293a:	e006      	b.n	800294a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_GPIO_Init+0x2b0>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	43db      	mvns	r3, r3
 8002944:	4915      	ldr	r1, [pc, #84]	; (800299c <HAL_GPIO_Init+0x2b0>)
 8002946:	4013      	ands	r3, r2
 8002948:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	3301      	adds	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	f47f aed0 	bne.w	8002700 <HAL_GPIO_Init+0x14>
  }
}
 8002960:	bf00      	nop
 8002962:	372c      	adds	r7, #44	; 0x2c
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	10210000 	.word	0x10210000
 8002970:	10110000 	.word	0x10110000
 8002974:	10120000 	.word	0x10120000
 8002978:	10310000 	.word	0x10310000
 800297c:	10320000 	.word	0x10320000
 8002980:	10220000 	.word	0x10220000
 8002984:	40021000 	.word	0x40021000
 8002988:	40010000 	.word	0x40010000
 800298c:	40010800 	.word	0x40010800
 8002990:	40010c00 	.word	0x40010c00
 8002994:	40011000 	.word	0x40011000
 8002998:	40011400 	.word	0x40011400
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029bc:	e003      	b.n	80029c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	041a      	lsls	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029e8:	887a      	ldrh	r2, [r7, #2]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80029ee:	e002      	b.n	80029f6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029f0:	887a      	ldrh	r2, [r7, #2]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e10f      	b.n	8002c32 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fb86 	bl	8002138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	; 0x24
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a44:	f001 fb0e 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8002a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a7b      	ldr	r2, [pc, #492]	; (8002c3c <HAL_I2C_Init+0x23c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d807      	bhi.n	8002a64 <HAL_I2C_Init+0x64>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a7a      	ldr	r2, [pc, #488]	; (8002c40 <HAL_I2C_Init+0x240>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bf94      	ite	ls
 8002a5c:	2301      	movls	r3, #1
 8002a5e:	2300      	movhi	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e006      	b.n	8002a72 <HAL_I2C_Init+0x72>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a77      	ldr	r2, [pc, #476]	; (8002c44 <HAL_I2C_Init+0x244>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	bf94      	ite	ls
 8002a6c:	2301      	movls	r3, #1
 8002a6e:	2300      	movhi	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0db      	b.n	8002c32 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a72      	ldr	r2, [pc, #456]	; (8002c48 <HAL_I2C_Init+0x248>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0c9b      	lsrs	r3, r3, #18
 8002a84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a64      	ldr	r2, [pc, #400]	; (8002c3c <HAL_I2C_Init+0x23c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d802      	bhi.n	8002ab4 <HAL_I2C_Init+0xb4>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	e009      	b.n	8002ac8 <HAL_I2C_Init+0xc8>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4a63      	ldr	r2, [pc, #396]	; (8002c4c <HAL_I2C_Init+0x24c>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ada:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4956      	ldr	r1, [pc, #344]	; (8002c3c <HAL_I2C_Init+0x23c>)
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d80d      	bhi.n	8002b04 <HAL_I2C_Init+0x104>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e59      	subs	r1, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	bf38      	it	cc
 8002b00:	2304      	movcc	r3, #4
 8002b02:	e04f      	b.n	8002ba4 <HAL_I2C_Init+0x1a4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d111      	bne.n	8002b30 <HAL_I2C_Init+0x130>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e58      	subs	r0, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	440b      	add	r3, r1
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e012      	b.n	8002b56 <HAL_I2C_Init+0x156>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e58      	subs	r0, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	0099      	lsls	r1, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Init+0x15e>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e022      	b.n	8002ba4 <HAL_I2C_Init+0x1a4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10e      	bne.n	8002b84 <HAL_I2C_Init+0x184>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1e58      	subs	r0, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	440b      	add	r3, r1
 8002b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b82:	e00f      	b.n	8002ba4 <HAL_I2C_Init+0x1a4>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e58      	subs	r0, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	0099      	lsls	r1, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	6809      	ldr	r1, [r1, #0]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6911      	ldr	r1, [r2, #16]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	000186a0 	.word	0x000186a0
 8002c40:	001e847f 	.word	0x001e847f
 8002c44:	003d08ff 	.word	0x003d08ff
 8002c48:	431bde83 	.word	0x431bde83
 8002c4c:	10624dd3 	.word	0x10624dd3

08002c50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	817b      	strh	r3, [r7, #10]
 8002c60:	4613      	mov	r3, r2
 8002c62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff fc32 	bl	80024cc <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	f040 80e0 	bne.w	8002e38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2319      	movs	r3, #25
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4970      	ldr	r1, [pc, #448]	; (8002e44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fc3c 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0d3      	b.n	8002e3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_I2C_Master_Transmit+0x50>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e0cc      	b.n	8002e3a <HAL_I2C_Master_Transmit+0x1ea>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d007      	beq.n	8002cc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2221      	movs	r2, #33	; 0x21
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	893a      	ldrh	r2, [r7, #8]
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6a3a      	ldr	r2, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 faca 	bl	80032a8 <I2C_MasterRequestWrite>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e08d      	b.n	8002e3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d34:	e066      	b.n	8002e04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	6a39      	ldr	r1, [r7, #32]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fcb6 	bl	80036ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d107      	bne.n	8002d5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06b      	b.n	8002e3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d11b      	bne.n	8002dd8 <HAL_I2C_Master_Transmit+0x188>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d017      	beq.n	8002dd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	6a39      	ldr	r1, [r7, #32]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fca6 	bl	800372e <I2C_WaitOnBTFFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00d      	beq.n	8002e04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d107      	bne.n	8002e00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e01a      	b.n	8002e3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d194      	bne.n	8002d36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	00100002 	.word	0x00100002
 8002e48:	ffff0000 	.word	0xffff0000

08002e4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08c      	sub	sp, #48	; 0x30
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	461a      	mov	r2, r3
 8002e58:	460b      	mov	r3, r1
 8002e5a:	817b      	strh	r3, [r7, #10]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff fb34 	bl	80024cc <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	f040 8213 	bne.w	800329a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2319      	movs	r3, #25
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	497e      	ldr	r1, [pc, #504]	; (8003078 <HAL_I2C_Master_Receive+0x22c>)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fb3e 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e206      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_I2C_Master_Receive+0x50>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e1ff      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d007      	beq.n	8002ec2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2222      	movs	r2, #34	; 0x22
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2210      	movs	r2, #16
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a5e      	ldr	r2, [pc, #376]	; (800307c <HAL_I2C_Master_Receive+0x230>)
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fa42 	bl	8003394 <I2C_MasterRequestRead>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e1c0      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d113      	bne.n	8002f4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	623b      	str	r3, [r7, #32]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	623b      	str	r3, [r7, #32]
 8002f36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e194      	b.n	8003274 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d11d      	bne.n	8002f8e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f60:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f62:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f8a:	b662      	cpsie	i
 8002f8c:	e172      	b.n	8003274 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d11d      	bne.n	8002fd2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fce:	b662      	cpsie	i
 8002fd0:	e150      	b.n	8003274 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ff8:	e13c      	b.n	8003274 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	f200 80f5 	bhi.w	80031ee <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	2b01      	cmp	r3, #1
 800300a:	d123      	bne.n	8003054 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fbcd 	bl	80037b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e13d      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003052:	e10f      	b.n	8003274 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	2b02      	cmp	r3, #2
 800305a:	d150      	bne.n	80030fe <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	2200      	movs	r2, #0
 8003064:	4906      	ldr	r1, [pc, #24]	; (8003080 <HAL_I2C_Master_Receive+0x234>)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fa4a 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e112      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
 8003076:	bf00      	nop
 8003078:	00100002 	.word	0x00100002
 800307c:	ffff0000 	.word	0xffff0000
 8003080:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003084:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003094:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030c8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030fc:	e0ba      	b.n	8003274 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	2200      	movs	r2, #0
 8003106:	4967      	ldr	r1, [pc, #412]	; (80032a4 <HAL_I2C_Master_Receive+0x458>)
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f9f9 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0c1      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003126:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003128:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	2200      	movs	r2, #0
 8003164:	494f      	ldr	r1, [pc, #316]	; (80032a4 <HAL_I2C_Master_Receive+0x458>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f9ca 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e092      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003184:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031b8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ec:	e042      	b.n	8003274 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fadc 	bl	80037b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e04c      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b04      	cmp	r3, #4
 8003240:	d118      	bne.n	8003274 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	2b00      	cmp	r3, #0
 800327a:	f47f aebe 	bne.w	8002ffa <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800329a:	2302      	movs	r3, #2
  }
}
 800329c:	4618      	mov	r0, r3
 800329e:	3728      	adds	r7, #40	; 0x28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	00010004 	.word	0x00010004

080032a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	460b      	mov	r3, r1
 80032b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d006      	beq.n	80032d2 <I2C_MasterRequestWrite+0x2a>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d003      	beq.n	80032d2 <I2C_MasterRequestWrite+0x2a>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032d0:	d108      	bne.n	80032e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e00b      	b.n	80032fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	2b12      	cmp	r3, #18
 80032ea:	d107      	bne.n	80032fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f8f9 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e035      	b.n	8003384 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003320:	d108      	bne.n	8003334 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	e01b      	b.n	800336c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003334:	897b      	ldrh	r3, [r7, #10]
 8003336:	11db      	asrs	r3, r3, #7
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 0306 	and.w	r3, r3, #6
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f063 030f 	orn	r3, r3, #15
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <I2C_MasterRequestWrite+0xe4>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f92b 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e010      	b.n	8003384 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4907      	ldr	r1, [pc, #28]	; (8003390 <I2C_MasterRequestWrite+0xe8>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f91b 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	00010008 	.word	0x00010008
 8003390:	00010002 	.word	0x00010002

08003394 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	460b      	mov	r3, r1
 80033a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d006      	beq.n	80033ce <I2C_MasterRequestRead+0x3a>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d003      	beq.n	80033ce <I2C_MasterRequestRead+0x3a>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033cc:	d108      	bne.n	80033e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e00b      	b.n	80033f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	2b11      	cmp	r3, #17
 80033e6:	d107      	bne.n	80033f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f87b 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e06d      	b.n	80034f0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341c:	d108      	bne.n	8003430 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	e053      	b.n	80034d8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	11db      	asrs	r3, r3, #7
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f003 0306 	and.w	r3, r3, #6
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f063 030f 	orn	r3, r3, #15
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	492a      	ldr	r1, [pc, #168]	; (80034f8 <I2C_MasterRequestRead+0x164>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f8ad 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e048      	b.n	80034f0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4923      	ldr	r1, [pc, #140]	; (80034fc <I2C_MasterRequestRead+0x168>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f89d 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e038      	b.n	80034f0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f825 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e017      	b.n	80034f0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034c0:	897b      	ldrh	r3, [r7, #10]
 80034c2:	11db      	asrs	r3, r3, #7
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0306 	and.w	r3, r3, #6
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f063 030e 	orn	r3, r3, #14
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4907      	ldr	r1, [pc, #28]	; (80034fc <I2C_MasterRequestRead+0x168>)
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f865 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	00010008 	.word	0x00010008
 80034fc:	00010002 	.word	0x00010002

08003500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003510:	e025      	b.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d021      	beq.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe ffd7 	bl	80024cc <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d116      	bne.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e023      	b.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d10d      	bne.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	43da      	mvns	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	e00c      	b.n	800359e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4013      	ands	r3, r2
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d0b6      	beq.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035bc:	e051      	b.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d123      	bne.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e046      	b.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d021      	beq.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fe ff55 	bl	80024cc <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e020      	b.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10c      	bne.n	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e00b      	b.n	800369e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	43da      	mvns	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d18d      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b8:	e02d      	b.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f8ce 	bl	800385c <I2C_IsAcknowledgeFailed>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e02d      	b.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d021      	beq.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7fe fefb 	bl	80024cc <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d1ca      	bne.n	80036ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800373a:	e02d      	b.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f88d 	bl	800385c <I2C_IsAcknowledgeFailed>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e02d      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d021      	beq.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003754:	f7fe feba 	bl	80024cc <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e007      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d1ca      	bne.n	800373c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037bc:	e042      	b.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d119      	bne.n	8003800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0210 	mvn.w	r2, #16
 80037d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e029      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003800:	f7fe fe64 	bl	80024cc <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f043 0220 	orr.w	r2, r3, #32
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e007      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d1b5      	bne.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003872:	d11b      	bne.n	80038ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800387c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e26c      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8087 	beq.w	80039e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d8:	4b92      	ldr	r3, [pc, #584]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d00c      	beq.n	80038fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038e4:	4b8f      	ldr	r3, [pc, #572]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d112      	bne.n	8003916 <HAL_RCC_OscConfig+0x5e>
 80038f0:	4b8c      	ldr	r3, [pc, #560]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d10b      	bne.n	8003916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fe:	4b89      	ldr	r3, [pc, #548]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d06c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x12c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d168      	bne.n	80039e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e246      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x76>
 8003920:	4b80      	ldr	r3, [pc, #512]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a7f      	ldr	r2, [pc, #508]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e02e      	b.n	800398c <HAL_RCC_OscConfig+0xd4>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x98>
 8003936:	4b7b      	ldr	r3, [pc, #492]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a7a      	ldr	r2, [pc, #488]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4b78      	ldr	r3, [pc, #480]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a77      	ldr	r2, [pc, #476]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e01d      	b.n	800398c <HAL_RCC_OscConfig+0xd4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0xbc>
 800395a:	4b72      	ldr	r3, [pc, #456]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a71      	ldr	r2, [pc, #452]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6e      	ldr	r2, [pc, #440]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0xd4>
 8003974:	4b6b      	ldr	r3, [pc, #428]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6a      	ldr	r2, [pc, #424]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a67      	ldr	r2, [pc, #412]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe fd9a 	bl	80024cc <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe fd96 	bl	80024cc <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1fa      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0xe4>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fd86 	bl	80024cc <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fe fd82 	bl	80024cc <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1e6      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x10c>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d063      	beq.n	8003aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f2:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039fe:	4b49      	ldr	r3, [pc, #292]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x18c>
 8003a0a:	4b46      	ldr	r3, [pc, #280]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	4b43      	ldr	r3, [pc, #268]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x176>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e1ba      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4939      	ldr	r1, [pc, #228]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	e03a      	b.n	8003aba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fe fd3b 	bl	80024cc <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7fe fd37 	bl	80024cc <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e19b      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4927      	ldr	r1, [pc, #156]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e015      	b.n	8003aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <HAL_RCC_OscConfig+0x270>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe fd1a 	bl	80024cc <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7fe fd16 	bl	80024cc <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e17a      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d03a      	beq.n	8003b3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d019      	beq.n	8003b02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fcfa 	bl	80024cc <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003adc:	f7fe fcf6 	bl	80024cc <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e15a      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f000 fac6 	bl	800408c <RCC_Delay>
 8003b00:	e01c      	b.n	8003b3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7fe fce0 	bl	80024cc <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0e:	e00f      	b.n	8003b30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fe fcdc 	bl	80024cc <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d908      	bls.n	8003b30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e140      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	42420000 	.word	0x42420000
 8003b2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b30:	4b9e      	ldr	r3, [pc, #632]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e9      	bne.n	8003b10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80a6 	beq.w	8003c96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4e:	4b97      	ldr	r3, [pc, #604]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	4b94      	ldr	r3, [pc, #592]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4a93      	ldr	r2, [pc, #588]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	61d3      	str	r3, [r2, #28]
 8003b66:	4b91      	ldr	r3, [pc, #580]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	4b8e      	ldr	r3, [pc, #568]	; (8003db0 <HAL_RCC_OscConfig+0x4f8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b82:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a8a      	ldr	r2, [pc, #552]	; (8003db0 <HAL_RCC_OscConfig+0x4f8>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8e:	f7fe fc9d 	bl	80024cc <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fe fc99 	bl	80024cc <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	; 0x64
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0fd      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x312>
 8003bbc:	4b7b      	ldr	r3, [pc, #492]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a7a      	ldr	r2, [pc, #488]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	e02d      	b.n	8003c26 <HAL_RCC_OscConfig+0x36e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x334>
 8003bd2:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	4a75      	ldr	r2, [pc, #468]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6213      	str	r3, [r2, #32]
 8003bde:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4a72      	ldr	r2, [pc, #456]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	6213      	str	r3, [r2, #32]
 8003bea:	e01c      	b.n	8003c26 <HAL_RCC_OscConfig+0x36e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b05      	cmp	r3, #5
 8003bf2:	d10c      	bne.n	8003c0e <HAL_RCC_OscConfig+0x356>
 8003bf4:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	6213      	str	r3, [r2, #32]
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4a69      	ldr	r2, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6213      	str	r3, [r2, #32]
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCC_OscConfig+0x36e>
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4a66      	ldr	r2, [pc, #408]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	6213      	str	r3, [r2, #32]
 8003c1a:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	f023 0304 	bic.w	r3, r3, #4
 8003c24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d015      	beq.n	8003c5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe fc4d 	bl	80024cc <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe fc49 	bl	80024cc <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0ab      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	4b57      	ldr	r3, [pc, #348]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ee      	beq.n	8003c36 <HAL_RCC_OscConfig+0x37e>
 8003c58:	e014      	b.n	8003c84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fc37 	bl	80024cc <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fe fc33 	bl	80024cc <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e095      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c78:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ee      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8a:	4b48      	ldr	r3, [pc, #288]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4a47      	ldr	r2, [pc, #284]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8081 	beq.w	8003da2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca0:	4b42      	ldr	r3, [pc, #264]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d061      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d146      	bne.n	8003d42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb4:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <HAL_RCC_OscConfig+0x4fc>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cba:	f7fe fc07 	bl	80024cc <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7fe fc03 	bl	80024cc <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e067      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd4:	4b35      	ldr	r3, [pc, #212]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f0      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d108      	bne.n	8003cfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cea:	4b30      	ldr	r3, [pc, #192]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	492d      	ldr	r1, [pc, #180]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a19      	ldr	r1, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	4927      	ldr	r1, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_OscConfig+0x4fc>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fe fbd7 	bl	80024cc <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fe fbd3 	bl	80024cc <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e037      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x46a>
 8003d40:	e02f      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <HAL_RCC_OscConfig+0x4fc>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe fbc0 	bl	80024cc <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fe fbbc 	bl	80024cc <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e020      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d62:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x498>
 8003d6e:	e018      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e013      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42420060 	.word	0x42420060

08003db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0d0      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d910      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 0207 	bic.w	r2, r3, #7
 8003de2:	4965      	ldr	r1, [pc, #404]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b8      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e14:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a52      	ldr	r2, [pc, #328]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	494d      	ldr	r1, [pc, #308]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d040      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d115      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e07f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e073      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06b      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4936      	ldr	r1, [pc, #216]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fe fb10 	bl	80024cc <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fe fb0c 	bl	80024cc <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e053      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d210      	bcs.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 0207 	bic.w	r2, r3, #7
 8003eee:	4922      	ldr	r1, [pc, #136]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e032      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4916      	ldr	r1, [pc, #88]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	490e      	ldr	r1, [pc, #56]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f46:	f000 f821 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1cc>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1d0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fa6e 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08006014 	.word	0x08006014
 8003f84:	20000000 	.word	0x20000000
 8003f88:	20000004 	.word	0x20000004

08003f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b490      	push	{r4, r7}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f92:	4b2a      	ldr	r3, [pc, #168]	; (800403c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f94:	1d3c      	adds	r4, r7, #4
 8003f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f9c:	4b28      	ldr	r3, [pc, #160]	; (8004040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x40>
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8003fca:	e02d      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fce:	623b      	str	r3, [r7, #32]
      break;
 8003fd0:	e02d      	b.n	800402e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	0c9b      	lsrs	r3, r3, #18
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fde:	4413      	add	r3, r2
 8003fe0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fe4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c5b      	lsrs	r3, r3, #17
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ffe:	4413      	add	r3, r2
 8004000:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004004:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	4a0f      	ldr	r2, [pc, #60]	; (8004048 <HAL_RCC_GetSysClockFreq+0xbc>)
 800400a:	fb02 f203 	mul.w	r2, r2, r3
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	e004      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4a0c      	ldr	r2, [pc, #48]	; (800404c <HAL_RCC_GetSysClockFreq+0xc0>)
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	623b      	str	r3, [r7, #32]
      break;
 8004026:	e002      	b.n	800402e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402a:	623b      	str	r3, [r7, #32]
      break;
 800402c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402e:	6a3b      	ldr	r3, [r7, #32]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3728      	adds	r7, #40	; 0x28
 8004034:	46bd      	mov	sp, r7
 8004036:	bc90      	pop	{r4, r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	08006000 	.word	0x08006000
 8004040:	08006010 	.word	0x08006010
 8004044:	40021000 	.word	0x40021000
 8004048:	007a1200 	.word	0x007a1200
 800404c:	003d0900 	.word	0x003d0900

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_RCC_GetHCLKFreq+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	20000000 	.word	0x20000000

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff2 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800406c:	4601      	mov	r1, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4a03      	ldr	r2, [pc, #12]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	08006024 	.word	0x08006024

0800408c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <RCC_Delay+0x34>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <RCC_Delay+0x38>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0a5b      	lsrs	r3, r3, #9
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040a8:	bf00      	nop
  }
  while (Delay --);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	60fa      	str	r2, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f9      	bne.n	80040a8 <RCC_Delay+0x1c>
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000000 	.word	0x20000000
 80040c4:	10624dd3 	.word	0x10624dd3

080040c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e01d      	b.n	8004116 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fe f88e 	bl	8002210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f000 f9ee 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e01d      	b.n	800416c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f815 	bl	8004174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f000 f9c3 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
	...

08004188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2201      	movs	r2, #1
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fc24 	bl	80049e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <HAL_TIM_PWM_Start+0x60>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d107      	bne.n	80041ba <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b06      	cmp	r3, #6
 80041ca:	d007      	beq.n	80041dc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00

080041ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004202:	2302      	movs	r3, #2
 8004204:	e0b4      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2202      	movs	r2, #2
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	f200 809f 	bhi.w	800435c <HAL_TIM_PWM_ConfigChannel+0x170>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004259 	.word	0x08004259
 8004228:	0800435d 	.word	0x0800435d
 800422c:	0800435d 	.word	0x0800435d
 8004230:	0800435d 	.word	0x0800435d
 8004234:	08004299 	.word	0x08004299
 8004238:	0800435d 	.word	0x0800435d
 800423c:	0800435d 	.word	0x0800435d
 8004240:	0800435d 	.word	0x0800435d
 8004244:	080042db 	.word	0x080042db
 8004248:	0800435d 	.word	0x0800435d
 800424c:	0800435d 	.word	0x0800435d
 8004250:	0800435d 	.word	0x0800435d
 8004254:	0800431b 	.word	0x0800431b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f9a4 	bl	80045ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
      break;
 8004296:	e062      	b.n	800435e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f9ea 	bl	8004678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
      break;
 80042d8:	e041      	b.n	800435e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa33 	bl	800474c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0208 	orr.w	r2, r2, #8
 80042f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0204 	bic.w	r2, r2, #4
 8004304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69d9      	ldr	r1, [r3, #28]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]
      break;
 8004318:	e021      	b.n	800435e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fa7d 	bl	8004820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	61da      	str	r2, [r3, #28]
      break;
 800435a:	e000      	b.n	800435e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800435c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIM_ConfigClockSource+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e0a6      	b.n	80044de <HAL_TIM_ConfigClockSource+0x166>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d067      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x120>
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d80b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x6c>
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d073      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x140>
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d802      	bhi.n	80043da <HAL_TIM_ConfigClockSource+0x62>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d06f      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80043d8:	e078      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d06c      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x140>
 80043de:	2b30      	cmp	r3, #48	; 0x30
 80043e0:	d06a      	beq.n	80044b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043e2:	e073      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043e4:	2b70      	cmp	r3, #112	; 0x70
 80043e6:	d00d      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0x8c>
 80043e8:	2b70      	cmp	r3, #112	; 0x70
 80043ea:	d804      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x7e>
 80043ec:	2b50      	cmp	r3, #80	; 0x50
 80043ee:	d033      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xe0>
 80043f0:	2b60      	cmp	r3, #96	; 0x60
 80043f2:	d041      	beq.n	8004478 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043f4:	e06a      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fa:	d066      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x152>
 80043fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004400:	d017      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004402:	e063      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f000 fac9 	bl	80049aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004426:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
      break;
 8004430:	e04c      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6899      	ldr	r1, [r3, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f000 fab2 	bl	80049aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e039      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	461a      	mov	r2, r3
 8004466:	f000 fa29 	bl	80048bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2150      	movs	r1, #80	; 0x50
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fa80 	bl	8004976 <TIM_ITRx_SetConfig>
      break;
 8004476:	e029      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	461a      	mov	r2, r3
 8004486:	f000 fa47 	bl	8004918 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2160      	movs	r1, #96	; 0x60
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fa70 	bl	8004976 <TIM_ITRx_SetConfig>
      break;
 8004496:	e019      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	461a      	mov	r2, r3
 80044a6:	f000 fa09 	bl	80048bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2140      	movs	r1, #64	; 0x40
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fa60 	bl	8004976 <TIM_ITRx_SetConfig>
      break;
 80044b6:	e009      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f000 fa57 	bl	8004976 <TIM_ITRx_SetConfig>
      break;
 80044c8:	e000      	b.n	80044cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <TIM_Base_SetConfig+0xb8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <TIM_Base_SetConfig+0x30>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004506:	d007      	beq.n	8004518 <TIM_Base_SetConfig+0x30>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <TIM_Base_SetConfig+0xbc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_Base_SetConfig+0x30>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <TIM_Base_SetConfig+0xc0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <TIM_Base_SetConfig+0xb8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00b      	beq.n	800454a <TIM_Base_SetConfig+0x62>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	d007      	beq.n	800454a <TIM_Base_SetConfig+0x62>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <TIM_Base_SetConfig+0xbc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_Base_SetConfig+0x62>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <TIM_Base_SetConfig+0xc0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <TIM_Base_SetConfig+0xb8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d103      	bne.n	8004590 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	615a      	str	r2, [r3, #20]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800

080045ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 0302 	bic.w	r3, r3, #2
 80045f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <TIM_OC1_SetConfig+0xc8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d10c      	bne.n	8004622 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0308 	bic.w	r3, r3, #8
 800460e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a13      	ldr	r2, [pc, #76]	; (8004674 <TIM_OC1_SetConfig+0xc8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d111      	bne.n	800464e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00

08004678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0210 	bic.w	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0320 	bic.w	r3, r3, #32
 80046c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <TIM_OC2_SetConfig+0xd0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10d      	bne.n	80046f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a14      	ldr	r2, [pc, #80]	; (8004748 <TIM_OC2_SetConfig+0xd0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d113      	bne.n	8004724 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800470a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	40012c00 	.word	0x40012c00

0800474c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <TIM_OC3_SetConfig+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10d      	bne.n	80047c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a14      	ldr	r2, [pc, #80]	; (800481c <TIM_OC3_SetConfig+0xd0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d113      	bne.n	80047f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00

08004820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800486a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	031b      	lsls	r3, r3, #12
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <TIM_OC4_SetConfig+0x98>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d109      	bne.n	8004894 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00

080048bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f023 030a 	bic.w	r3, r3, #10
 80048f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr

08004918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f023 0210 	bic.w	r2, r3, #16
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004942:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	031b      	lsls	r3, r3, #12
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	621a      	str	r2, [r3, #32]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	f043 0307 	orr.w	r3, r3, #7
 8004998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	609a      	str	r2, [r3, #8]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	021a      	lsls	r2, r3, #8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	609a      	str	r2, [r3, #8]
}
 80049de:	bf00      	nop
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2201      	movs	r2, #1
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1a      	ldr	r2, [r3, #32]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a1a      	ldr	r2, [r3, #32]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 031f 	and.w	r3, r3, #31
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e032      	b.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a80:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e03d      	b.n	8004b50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr
	...

08004b5c <__errno>:
 8004b5c:	4b01      	ldr	r3, [pc, #4]	; (8004b64 <__errno+0x8>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	2000000c 	.word	0x2000000c

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	2500      	movs	r5, #0
 8004b6c:	4e0c      	ldr	r6, [pc, #48]	; (8004ba0 <__libc_init_array+0x38>)
 8004b6e:	4c0d      	ldr	r4, [pc, #52]	; (8004ba4 <__libc_init_array+0x3c>)
 8004b70:	1ba4      	subs	r4, r4, r6
 8004b72:	10a4      	asrs	r4, r4, #2
 8004b74:	42a5      	cmp	r5, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	f001 fa36 	bl	8005fe8 <_init>
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	4e0a      	ldr	r6, [pc, #40]	; (8004ba8 <__libc_init_array+0x40>)
 8004b80:	4c0a      	ldr	r4, [pc, #40]	; (8004bac <__libc_init_array+0x44>)
 8004b82:	1ba4      	subs	r4, r4, r6
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	42a5      	cmp	r5, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b90:	4798      	blx	r3
 8004b92:	3501      	adds	r5, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b9a:	4798      	blx	r3
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	080060c0 	.word	0x080060c0
 8004ba4:	080060c0 	.word	0x080060c0
 8004ba8:	080060c0 	.word	0x080060c0
 8004bac:	080060c4 	.word	0x080060c4

08004bb0 <memcpy>:
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	1e43      	subs	r3, r0, #1
 8004bb4:	440a      	add	r2, r1
 8004bb6:	4291      	cmp	r1, r2
 8004bb8:	d100      	bne.n	8004bbc <memcpy+0xc>
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc4:	e7f7      	b.n	8004bb6 <memcpy+0x6>

08004bc6 <memset>:
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4402      	add	r2, r0
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d100      	bne.n	8004bd0 <memset+0xa>
 8004bce:	4770      	bx	lr
 8004bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd4:	e7f9      	b.n	8004bca <memset+0x4>
	...

08004bd8 <atan>:
 8004bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	4bb6      	ldr	r3, [pc, #728]	; (8004eb8 <atan+0x2e0>)
 8004bde:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004be2:	429e      	cmp	r6, r3
 8004be4:	4604      	mov	r4, r0
 8004be6:	460d      	mov	r5, r1
 8004be8:	468b      	mov	fp, r1
 8004bea:	dd17      	ble.n	8004c1c <atan+0x44>
 8004bec:	4bb3      	ldr	r3, [pc, #716]	; (8004ebc <atan+0x2e4>)
 8004bee:	429e      	cmp	r6, r3
 8004bf0:	dc01      	bgt.n	8004bf6 <atan+0x1e>
 8004bf2:	d109      	bne.n	8004c08 <atan+0x30>
 8004bf4:	b140      	cbz	r0, 8004c08 <atan+0x30>
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb faad 	bl	800015c <__adddf3>
 8004c02:	4604      	mov	r4, r0
 8004c04:	460d      	mov	r5, r1
 8004c06:	e005      	b.n	8004c14 <atan+0x3c>
 8004c08:	f1bb 0f00 	cmp.w	fp, #0
 8004c0c:	4cac      	ldr	r4, [pc, #688]	; (8004ec0 <atan+0x2e8>)
 8004c0e:	f340 8121 	ble.w	8004e54 <atan+0x27c>
 8004c12:	4dac      	ldr	r5, [pc, #688]	; (8004ec4 <atan+0x2ec>)
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1c:	4baa      	ldr	r3, [pc, #680]	; (8004ec8 <atan+0x2f0>)
 8004c1e:	429e      	cmp	r6, r3
 8004c20:	dc11      	bgt.n	8004c46 <atan+0x6e>
 8004c22:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004c26:	429e      	cmp	r6, r3
 8004c28:	dc0a      	bgt.n	8004c40 <atan+0x68>
 8004c2a:	a38b      	add	r3, pc, #556	; (adr r3, 8004e58 <atan+0x280>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fa94 	bl	800015c <__adddf3>
 8004c34:	2200      	movs	r2, #0
 8004c36:	4ba5      	ldr	r3, [pc, #660]	; (8004ecc <atan+0x2f4>)
 8004c38:	f7fb fed6 	bl	80009e8 <__aeabi_dcmpgt>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d1e9      	bne.n	8004c14 <atan+0x3c>
 8004c40:	f04f 3aff 	mov.w	sl, #4294967295
 8004c44:	e027      	b.n	8004c96 <atan+0xbe>
 8004c46:	f000 f951 	bl	8004eec <fabs>
 8004c4a:	4ba1      	ldr	r3, [pc, #644]	; (8004ed0 <atan+0x2f8>)
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	429e      	cmp	r6, r3
 8004c50:	460d      	mov	r5, r1
 8004c52:	f300 80b8 	bgt.w	8004dc6 <atan+0x1ee>
 8004c56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004c5a:	429e      	cmp	r6, r3
 8004c5c:	f300 809c 	bgt.w	8004d98 <atan+0x1c0>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	f7fb fa7a 	bl	800015c <__adddf3>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4b98      	ldr	r3, [pc, #608]	; (8004ecc <atan+0x2f4>)
 8004c6c:	f7fb fa74 	bl	8000158 <__aeabi_dsub>
 8004c70:	2200      	movs	r2, #0
 8004c72:	4606      	mov	r6, r0
 8004c74:	460f      	mov	r7, r1
 8004c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	f7fb fa6d 	bl	800015c <__adddf3>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4630      	mov	r0, r6
 8004c88:	4639      	mov	r1, r7
 8004c8a:	f7fb fd47 	bl	800071c <__aeabi_ddiv>
 8004c8e:	f04f 0a00 	mov.w	sl, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	460d      	mov	r5, r1
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f7fb fc13 	bl	80004c8 <__aeabi_dmul>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4680      	mov	r8, r0
 8004ca8:	4689      	mov	r9, r1
 8004caa:	f7fb fc0d 	bl	80004c8 <__aeabi_dmul>
 8004cae:	a36c      	add	r3, pc, #432	; (adr r3, 8004e60 <atan+0x288>)
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	460f      	mov	r7, r1
 8004cb8:	f7fb fc06 	bl	80004c8 <__aeabi_dmul>
 8004cbc:	a36a      	add	r3, pc, #424	; (adr r3, 8004e68 <atan+0x290>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb fa4b 	bl	800015c <__adddf3>
 8004cc6:	4632      	mov	r2, r6
 8004cc8:	463b      	mov	r3, r7
 8004cca:	f7fb fbfd 	bl	80004c8 <__aeabi_dmul>
 8004cce:	a368      	add	r3, pc, #416	; (adr r3, 8004e70 <atan+0x298>)
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f7fb fa42 	bl	800015c <__adddf3>
 8004cd8:	4632      	mov	r2, r6
 8004cda:	463b      	mov	r3, r7
 8004cdc:	f7fb fbf4 	bl	80004c8 <__aeabi_dmul>
 8004ce0:	a365      	add	r3, pc, #404	; (adr r3, 8004e78 <atan+0x2a0>)
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	f7fb fa39 	bl	800015c <__adddf3>
 8004cea:	4632      	mov	r2, r6
 8004cec:	463b      	mov	r3, r7
 8004cee:	f7fb fbeb 	bl	80004c8 <__aeabi_dmul>
 8004cf2:	a363      	add	r3, pc, #396	; (adr r3, 8004e80 <atan+0x2a8>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f7fb fa30 	bl	800015c <__adddf3>
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	463b      	mov	r3, r7
 8004d00:	f7fb fbe2 	bl	80004c8 <__aeabi_dmul>
 8004d04:	a360      	add	r3, pc, #384	; (adr r3, 8004e88 <atan+0x2b0>)
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	f7fb fa27 	bl	800015c <__adddf3>
 8004d0e:	4642      	mov	r2, r8
 8004d10:	464b      	mov	r3, r9
 8004d12:	f7fb fbd9 	bl	80004c8 <__aeabi_dmul>
 8004d16:	a35e      	add	r3, pc, #376	; (adr r3, 8004e90 <atan+0x2b8>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	4689      	mov	r9, r1
 8004d20:	4630      	mov	r0, r6
 8004d22:	4639      	mov	r1, r7
 8004d24:	f7fb fbd0 	bl	80004c8 <__aeabi_dmul>
 8004d28:	a35b      	add	r3, pc, #364	; (adr r3, 8004e98 <atan+0x2c0>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f7fb fa13 	bl	8000158 <__aeabi_dsub>
 8004d32:	4632      	mov	r2, r6
 8004d34:	463b      	mov	r3, r7
 8004d36:	f7fb fbc7 	bl	80004c8 <__aeabi_dmul>
 8004d3a:	a359      	add	r3, pc, #356	; (adr r3, 8004ea0 <atan+0x2c8>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fa0a 	bl	8000158 <__aeabi_dsub>
 8004d44:	4632      	mov	r2, r6
 8004d46:	463b      	mov	r3, r7
 8004d48:	f7fb fbbe 	bl	80004c8 <__aeabi_dmul>
 8004d4c:	a356      	add	r3, pc, #344	; (adr r3, 8004ea8 <atan+0x2d0>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fa01 	bl	8000158 <__aeabi_dsub>
 8004d56:	4632      	mov	r2, r6
 8004d58:	463b      	mov	r3, r7
 8004d5a:	f7fb fbb5 	bl	80004c8 <__aeabi_dmul>
 8004d5e:	a354      	add	r3, pc, #336	; (adr r3, 8004eb0 <atan+0x2d8>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb f9f8 	bl	8000158 <__aeabi_dsub>
 8004d68:	4632      	mov	r2, r6
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	f7fb fbac 	bl	80004c8 <__aeabi_dmul>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4640      	mov	r0, r8
 8004d76:	4649      	mov	r1, r9
 8004d78:	f7fb f9f0 	bl	800015c <__adddf3>
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	462b      	mov	r3, r5
 8004d80:	f7fb fba2 	bl	80004c8 <__aeabi_dmul>
 8004d84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	d144      	bne.n	8004e18 <atan+0x240>
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	f7fb f9e1 	bl	8000158 <__aeabi_dsub>
 8004d96:	e734      	b.n	8004c02 <atan+0x2a>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4b4c      	ldr	r3, [pc, #304]	; (8004ecc <atan+0x2f4>)
 8004d9c:	f7fb f9dc 	bl	8000158 <__aeabi_dsub>
 8004da0:	2200      	movs	r2, #0
 8004da2:	4606      	mov	r6, r0
 8004da4:	460f      	mov	r7, r1
 8004da6:	4b49      	ldr	r3, [pc, #292]	; (8004ecc <atan+0x2f4>)
 8004da8:	4620      	mov	r0, r4
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7fb f9d6 	bl	800015c <__adddf3>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4630      	mov	r0, r6
 8004db6:	4639      	mov	r1, r7
 8004db8:	f7fb fcb0 	bl	800071c <__aeabi_ddiv>
 8004dbc:	f04f 0a01 	mov.w	sl, #1
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	460d      	mov	r5, r1
 8004dc4:	e767      	b.n	8004c96 <atan+0xbe>
 8004dc6:	4b43      	ldr	r3, [pc, #268]	; (8004ed4 <atan+0x2fc>)
 8004dc8:	429e      	cmp	r6, r3
 8004dca:	dc1a      	bgt.n	8004e02 <atan+0x22a>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	4b42      	ldr	r3, [pc, #264]	; (8004ed8 <atan+0x300>)
 8004dd0:	f7fb f9c2 	bl	8000158 <__aeabi_dsub>
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	460f      	mov	r7, r1
 8004dda:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <atan+0x300>)
 8004ddc:	4620      	mov	r0, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb fb72 	bl	80004c8 <__aeabi_dmul>
 8004de4:	2200      	movs	r2, #0
 8004de6:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <atan+0x2f4>)
 8004de8:	f7fb f9b8 	bl	800015c <__adddf3>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4630      	mov	r0, r6
 8004df2:	4639      	mov	r1, r7
 8004df4:	f7fb fc92 	bl	800071c <__aeabi_ddiv>
 8004df8:	f04f 0a02 	mov.w	sl, #2
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	460d      	mov	r5, r1
 8004e00:	e749      	b.n	8004c96 <atan+0xbe>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	2000      	movs	r0, #0
 8004e08:	4934      	ldr	r1, [pc, #208]	; (8004edc <atan+0x304>)
 8004e0a:	f7fb fc87 	bl	800071c <__aeabi_ddiv>
 8004e0e:	f04f 0a03 	mov.w	sl, #3
 8004e12:	4604      	mov	r4, r0
 8004e14:	460d      	mov	r5, r1
 8004e16:	e73e      	b.n	8004c96 <atan+0xbe>
 8004e18:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <atan+0x308>)
 8004e1a:	4e32      	ldr	r6, [pc, #200]	; (8004ee4 <atan+0x30c>)
 8004e1c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004e20:	4456      	add	r6, sl
 8004e22:	449a      	add	sl, r3
 8004e24:	e9da 2300 	ldrd	r2, r3, [sl]
 8004e28:	f7fb f996 	bl	8000158 <__aeabi_dsub>
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	462b      	mov	r3, r5
 8004e30:	f7fb f992 	bl	8000158 <__aeabi_dsub>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004e3c:	f7fb f98c 	bl	8000158 <__aeabi_dsub>
 8004e40:	f1bb 0f00 	cmp.w	fp, #0
 8004e44:	4604      	mov	r4, r0
 8004e46:	460d      	mov	r5, r1
 8004e48:	f6bf aee4 	bge.w	8004c14 <atan+0x3c>
 8004e4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e50:	461d      	mov	r5, r3
 8004e52:	e6df      	b.n	8004c14 <atan+0x3c>
 8004e54:	4d24      	ldr	r5, [pc, #144]	; (8004ee8 <atan+0x310>)
 8004e56:	e6dd      	b.n	8004c14 <atan+0x3c>
 8004e58:	8800759c 	.word	0x8800759c
 8004e5c:	7e37e43c 	.word	0x7e37e43c
 8004e60:	e322da11 	.word	0xe322da11
 8004e64:	3f90ad3a 	.word	0x3f90ad3a
 8004e68:	24760deb 	.word	0x24760deb
 8004e6c:	3fa97b4b 	.word	0x3fa97b4b
 8004e70:	a0d03d51 	.word	0xa0d03d51
 8004e74:	3fb10d66 	.word	0x3fb10d66
 8004e78:	c54c206e 	.word	0xc54c206e
 8004e7c:	3fb745cd 	.word	0x3fb745cd
 8004e80:	920083ff 	.word	0x920083ff
 8004e84:	3fc24924 	.word	0x3fc24924
 8004e88:	5555550d 	.word	0x5555550d
 8004e8c:	3fd55555 	.word	0x3fd55555
 8004e90:	2c6a6c2f 	.word	0x2c6a6c2f
 8004e94:	bfa2b444 	.word	0xbfa2b444
 8004e98:	52defd9a 	.word	0x52defd9a
 8004e9c:	3fadde2d 	.word	0x3fadde2d
 8004ea0:	af749a6d 	.word	0xaf749a6d
 8004ea4:	3fb3b0f2 	.word	0x3fb3b0f2
 8004ea8:	fe231671 	.word	0xfe231671
 8004eac:	3fbc71c6 	.word	0x3fbc71c6
 8004eb0:	9998ebc4 	.word	0x9998ebc4
 8004eb4:	3fc99999 	.word	0x3fc99999
 8004eb8:	440fffff 	.word	0x440fffff
 8004ebc:	7ff00000 	.word	0x7ff00000
 8004ec0:	54442d18 	.word	0x54442d18
 8004ec4:	3ff921fb 	.word	0x3ff921fb
 8004ec8:	3fdbffff 	.word	0x3fdbffff
 8004ecc:	3ff00000 	.word	0x3ff00000
 8004ed0:	3ff2ffff 	.word	0x3ff2ffff
 8004ed4:	40037fff 	.word	0x40037fff
 8004ed8:	3ff80000 	.word	0x3ff80000
 8004edc:	bff00000 	.word	0xbff00000
 8004ee0:	08006050 	.word	0x08006050
 8004ee4:	08006030 	.word	0x08006030
 8004ee8:	bff921fb 	.word	0xbff921fb

08004eec <fabs>:
 8004eec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4770      	bx	lr

08004ef4 <pow>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	b08f      	sub	sp, #60	; 0x3c
 8004efa:	461d      	mov	r5, r3
 8004efc:	4680      	mov	r8, r0
 8004efe:	4689      	mov	r9, r1
 8004f00:	4614      	mov	r4, r2
 8004f02:	f000 f9a9 	bl	8005258 <__ieee754_pow>
 8004f06:	4fa1      	ldr	r7, [pc, #644]	; (800518c <pow+0x298>)
 8004f08:	e9cd 0100 	strd	r0, r1, [sp]
 8004f0c:	f997 3000 	ldrsb.w	r3, [r7]
 8004f10:	463e      	mov	r6, r7
 8004f12:	9302      	str	r3, [sp, #8]
 8004f14:	3301      	adds	r3, #1
 8004f16:	d05f      	beq.n	8004fd8 <pow+0xe4>
 8004f18:	4622      	mov	r2, r4
 8004f1a:	462b      	mov	r3, r5
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	4629      	mov	r1, r5
 8004f20:	f7fb fd6c 	bl	80009fc <__aeabi_dcmpun>
 8004f24:	4682      	mov	sl, r0
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d156      	bne.n	8004fd8 <pow+0xe4>
 8004f2a:	4642      	mov	r2, r8
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	4640      	mov	r0, r8
 8004f30:	4649      	mov	r1, r9
 8004f32:	f7fb fd63 	bl	80009fc <__aeabi_dcmpun>
 8004f36:	9003      	str	r0, [sp, #12]
 8004f38:	b1e8      	cbz	r0, 8004f76 <pow+0x82>
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4620      	mov	r0, r4
 8004f40:	4629      	mov	r1, r5
 8004f42:	f7fb fd29 	bl	8000998 <__aeabi_dcmpeq>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d046      	beq.n	8004fd8 <pow+0xe4>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	9304      	str	r3, [sp, #16]
 8004f50:	4b8f      	ldr	r3, [pc, #572]	; (8005190 <pow+0x29c>)
 8004f52:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004f56:	9305      	str	r3, [sp, #20]
 8004f58:	4b8e      	ldr	r3, [pc, #568]	; (8005194 <pow+0x2a0>)
 8004f5a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004f5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f62:	9b02      	ldr	r3, [sp, #8]
 8004f64:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d031      	beq.n	8004fd0 <pow+0xdc>
 8004f6c:	a804      	add	r0, sp, #16
 8004f6e:	f000 ff2f 	bl	8005dd0 <matherr>
 8004f72:	bb38      	cbnz	r0, 8004fc4 <pow+0xd0>
 8004f74:	e058      	b.n	8005028 <pow+0x134>
 8004f76:	f04f 0a00 	mov.w	sl, #0
 8004f7a:	f04f 0b00 	mov.w	fp, #0
 8004f7e:	4652      	mov	r2, sl
 8004f80:	465b      	mov	r3, fp
 8004f82:	4640      	mov	r0, r8
 8004f84:	4649      	mov	r1, r9
 8004f86:	f7fb fd07 	bl	8000998 <__aeabi_dcmpeq>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d051      	beq.n	8005032 <pow+0x13e>
 8004f8e:	4652      	mov	r2, sl
 8004f90:	465b      	mov	r3, fp
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	f7fb fcff 	bl	8000998 <__aeabi_dcmpeq>
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	b308      	cbz	r0, 8004fe2 <pow+0xee>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	4b7b      	ldr	r3, [pc, #492]	; (8005190 <pow+0x29c>)
 8004fa4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8004fb2:	9b02      	ldr	r3, [sp, #8]
 8004fb4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0d7      	beq.n	8004f6c <pow+0x78>
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4b75      	ldr	r3, [pc, #468]	; (8005194 <pow+0x2a0>)
 8004fc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004fc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fc6:	b11b      	cbz	r3, 8004fd0 <pow+0xdc>
 8004fc8:	f7ff fdc8 	bl	8004b5c <__errno>
 8004fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fce:	6003      	str	r3, [r0, #0]
 8004fd0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8004fd4:	e9cd 3400 	strd	r3, r4, [sp]
 8004fd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fdc:	b00f      	add	sp, #60	; 0x3c
 8004fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f000 feed 	bl	8005dc4 <finite>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d0f4      	beq.n	8004fd8 <pow+0xe4>
 8004fee:	4652      	mov	r2, sl
 8004ff0:	465b      	mov	r3, fp
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	f7fb fcd9 	bl	80009ac <__aeabi_dcmplt>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d0ec      	beq.n	8004fd8 <pow+0xe4>
 8004ffe:	2301      	movs	r3, #1
 8005000:	9304      	str	r3, [sp, #16]
 8005002:	4b63      	ldr	r3, [pc, #396]	; (8005190 <pow+0x29c>)
 8005004:	960c      	str	r6, [sp, #48]	; 0x30
 8005006:	9305      	str	r3, [sp, #20]
 8005008:	f997 3000 	ldrsb.w	r3, [r7]
 800500c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005010:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005014:	b913      	cbnz	r3, 800501c <pow+0x128>
 8005016:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800501a:	e7a7      	b.n	8004f6c <pow+0x78>
 800501c:	2000      	movs	r0, #0
 800501e:	495e      	ldr	r1, [pc, #376]	; (8005198 <pow+0x2a4>)
 8005020:	2b02      	cmp	r3, #2
 8005022:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005026:	d1a1      	bne.n	8004f6c <pow+0x78>
 8005028:	f7ff fd98 	bl	8004b5c <__errno>
 800502c:	2321      	movs	r3, #33	; 0x21
 800502e:	6003      	str	r3, [r0, #0]
 8005030:	e7c8      	b.n	8004fc4 <pow+0xd0>
 8005032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005036:	f000 fec5 	bl	8005dc4 <finite>
 800503a:	9002      	str	r0, [sp, #8]
 800503c:	2800      	cmp	r0, #0
 800503e:	d177      	bne.n	8005130 <pow+0x23c>
 8005040:	4640      	mov	r0, r8
 8005042:	4649      	mov	r1, r9
 8005044:	f000 febe 	bl	8005dc4 <finite>
 8005048:	2800      	cmp	r0, #0
 800504a:	d071      	beq.n	8005130 <pow+0x23c>
 800504c:	4620      	mov	r0, r4
 800504e:	4629      	mov	r1, r5
 8005050:	f000 feb8 	bl	8005dc4 <finite>
 8005054:	2800      	cmp	r0, #0
 8005056:	d06b      	beq.n	8005130 <pow+0x23c>
 8005058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f7fb fccc 	bl	80009fc <__aeabi_dcmpun>
 8005064:	f997 7000 	ldrsb.w	r7, [r7]
 8005068:	4b49      	ldr	r3, [pc, #292]	; (8005190 <pow+0x29c>)
 800506a:	b1a0      	cbz	r0, 8005096 <pow+0x1a2>
 800506c:	2201      	movs	r2, #1
 800506e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005072:	9b02      	ldr	r3, [sp, #8]
 8005074:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005078:	930c      	str	r3, [sp, #48]	; 0x30
 800507a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800507e:	2f00      	cmp	r7, #0
 8005080:	d0c9      	beq.n	8005016 <pow+0x122>
 8005082:	4652      	mov	r2, sl
 8005084:	465b      	mov	r3, fp
 8005086:	4650      	mov	r0, sl
 8005088:	4659      	mov	r1, fp
 800508a:	f7fb fb47 	bl	800071c <__aeabi_ddiv>
 800508e:	2f02      	cmp	r7, #2
 8005090:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005094:	e7c7      	b.n	8005026 <pow+0x132>
 8005096:	2203      	movs	r2, #3
 8005098:	900c      	str	r0, [sp, #48]	; 0x30
 800509a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800509e:	4620      	mov	r0, r4
 80050a0:	4629      	mov	r1, r5
 80050a2:	2200      	movs	r2, #0
 80050a4:	4b3d      	ldr	r3, [pc, #244]	; (800519c <pow+0x2a8>)
 80050a6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80050aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80050ae:	f7fb fa0b 	bl	80004c8 <__aeabi_dmul>
 80050b2:	4604      	mov	r4, r0
 80050b4:	460d      	mov	r5, r1
 80050b6:	bb17      	cbnz	r7, 80050fe <pow+0x20a>
 80050b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80050bc:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <pow+0x2ac>)
 80050be:	4640      	mov	r0, r8
 80050c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80050c4:	4649      	mov	r1, r9
 80050c6:	4652      	mov	r2, sl
 80050c8:	465b      	mov	r3, fp
 80050ca:	f7fb fc6f 	bl	80009ac <__aeabi_dcmplt>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d054      	beq.n	800517c <pow+0x288>
 80050d2:	4620      	mov	r0, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	f000 fe83 	bl	8005de0 <rint>
 80050da:	4622      	mov	r2, r4
 80050dc:	462b      	mov	r3, r5
 80050de:	f7fb fc5b 	bl	8000998 <__aeabi_dcmpeq>
 80050e2:	b920      	cbnz	r0, 80050ee <pow+0x1fa>
 80050e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80050e8:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <pow+0x2b0>)
 80050ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80050ee:	f996 3000 	ldrsb.w	r3, [r6]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d142      	bne.n	800517c <pow+0x288>
 80050f6:	f7ff fd31 	bl	8004b5c <__errno>
 80050fa:	2322      	movs	r3, #34	; 0x22
 80050fc:	e797      	b.n	800502e <pow+0x13a>
 80050fe:	2200      	movs	r2, #0
 8005100:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <pow+0x2b4>)
 8005102:	4640      	mov	r0, r8
 8005104:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005108:	4649      	mov	r1, r9
 800510a:	4652      	mov	r2, sl
 800510c:	465b      	mov	r3, fp
 800510e:	f7fb fc4d 	bl	80009ac <__aeabi_dcmplt>
 8005112:	2800      	cmp	r0, #0
 8005114:	d0eb      	beq.n	80050ee <pow+0x1fa>
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f000 fe61 	bl	8005de0 <rint>
 800511e:	4622      	mov	r2, r4
 8005120:	462b      	mov	r3, r5
 8005122:	f7fb fc39 	bl	8000998 <__aeabi_dcmpeq>
 8005126:	2800      	cmp	r0, #0
 8005128:	d1e1      	bne.n	80050ee <pow+0x1fa>
 800512a:	2200      	movs	r2, #0
 800512c:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <pow+0x2a4>)
 800512e:	e7dc      	b.n	80050ea <pow+0x1f6>
 8005130:	2200      	movs	r2, #0
 8005132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005136:	2300      	movs	r3, #0
 8005138:	f7fb fc2e 	bl	8000998 <__aeabi_dcmpeq>
 800513c:	2800      	cmp	r0, #0
 800513e:	f43f af4b 	beq.w	8004fd8 <pow+0xe4>
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	f000 fe3d 	bl	8005dc4 <finite>
 800514a:	2800      	cmp	r0, #0
 800514c:	f43f af44 	beq.w	8004fd8 <pow+0xe4>
 8005150:	4620      	mov	r0, r4
 8005152:	4629      	mov	r1, r5
 8005154:	f000 fe36 	bl	8005dc4 <finite>
 8005158:	2800      	cmp	r0, #0
 800515a:	f43f af3d 	beq.w	8004fd8 <pow+0xe4>
 800515e:	2304      	movs	r3, #4
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <pow+0x29c>)
 8005164:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	2300      	movs	r3, #0
 800516c:	2400      	movs	r4, #0
 800516e:	930c      	str	r3, [sp, #48]	; 0x30
 8005170:	2300      	movs	r3, #0
 8005172:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005176:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800517a:	e7b8      	b.n	80050ee <pow+0x1fa>
 800517c:	a804      	add	r0, sp, #16
 800517e:	f000 fe27 	bl	8005dd0 <matherr>
 8005182:	2800      	cmp	r0, #0
 8005184:	f47f af1e 	bne.w	8004fc4 <pow+0xd0>
 8005188:	e7b5      	b.n	80050f6 <pow+0x202>
 800518a:	bf00      	nop
 800518c:	20000070 	.word	0x20000070
 8005190:	08006070 	.word	0x08006070
 8005194:	3ff00000 	.word	0x3ff00000
 8005198:	fff00000 	.word	0xfff00000
 800519c:	3fe00000 	.word	0x3fe00000
 80051a0:	47efffff 	.word	0x47efffff
 80051a4:	c7efffff 	.word	0xc7efffff
 80051a8:	7ff00000 	.word	0x7ff00000

080051ac <sqrt>:
 80051ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	b08b      	sub	sp, #44	; 0x2c
 80051b2:	4604      	mov	r4, r0
 80051b4:	460d      	mov	r5, r1
 80051b6:	f000 fd59 	bl	8005c6c <__ieee754_sqrt>
 80051ba:	4b24      	ldr	r3, [pc, #144]	; (800524c <sqrt+0xa0>)
 80051bc:	4680      	mov	r8, r0
 80051be:	f993 a000 	ldrsb.w	sl, [r3]
 80051c2:	4689      	mov	r9, r1
 80051c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051c8:	d02b      	beq.n	8005222 <sqrt+0x76>
 80051ca:	4622      	mov	r2, r4
 80051cc:	462b      	mov	r3, r5
 80051ce:	4620      	mov	r0, r4
 80051d0:	4629      	mov	r1, r5
 80051d2:	f7fb fc13 	bl	80009fc <__aeabi_dcmpun>
 80051d6:	4683      	mov	fp, r0
 80051d8:	bb18      	cbnz	r0, 8005222 <sqrt+0x76>
 80051da:	2600      	movs	r6, #0
 80051dc:	2700      	movs	r7, #0
 80051de:	4632      	mov	r2, r6
 80051e0:	463b      	mov	r3, r7
 80051e2:	4620      	mov	r0, r4
 80051e4:	4629      	mov	r1, r5
 80051e6:	f7fb fbe1 	bl	80009ac <__aeabi_dcmplt>
 80051ea:	b1d0      	cbz	r0, 8005222 <sqrt+0x76>
 80051ec:	2301      	movs	r3, #1
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4b17      	ldr	r3, [pc, #92]	; (8005250 <sqrt+0xa4>)
 80051f2:	f8cd b020 	str.w	fp, [sp, #32]
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80051fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005200:	f1ba 0f00 	cmp.w	sl, #0
 8005204:	d112      	bne.n	800522c <sqrt+0x80>
 8005206:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800520a:	4668      	mov	r0, sp
 800520c:	f000 fde0 	bl	8005dd0 <matherr>
 8005210:	b1b8      	cbz	r0, 8005242 <sqrt+0x96>
 8005212:	9b08      	ldr	r3, [sp, #32]
 8005214:	b11b      	cbz	r3, 800521e <sqrt+0x72>
 8005216:	f7ff fca1 	bl	8004b5c <__errno>
 800521a:	9b08      	ldr	r3, [sp, #32]
 800521c:	6003      	str	r3, [r0, #0]
 800521e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005222:	4640      	mov	r0, r8
 8005224:	4649      	mov	r1, r9
 8005226:	b00b      	add	sp, #44	; 0x2c
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522c:	4632      	mov	r2, r6
 800522e:	463b      	mov	r3, r7
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb fa72 	bl	800071c <__aeabi_ddiv>
 8005238:	f1ba 0f02 	cmp.w	sl, #2
 800523c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005240:	d1e3      	bne.n	800520a <sqrt+0x5e>
 8005242:	f7ff fc8b 	bl	8004b5c <__errno>
 8005246:	2321      	movs	r3, #33	; 0x21
 8005248:	6003      	str	r3, [r0, #0]
 800524a:	e7e2      	b.n	8005212 <sqrt+0x66>
 800524c:	20000070 	.word	0x20000070
 8005250:	08006074 	.word	0x08006074
 8005254:	00000000 	.word	0x00000000

08005258 <__ieee754_pow>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	b091      	sub	sp, #68	; 0x44
 800525e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005262:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005266:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800526a:	ea55 0302 	orrs.w	r3, r5, r2
 800526e:	4607      	mov	r7, r0
 8005270:	4688      	mov	r8, r1
 8005272:	f000 84b7 	beq.w	8005be4 <__ieee754_pow+0x98c>
 8005276:	4b80      	ldr	r3, [pc, #512]	; (8005478 <__ieee754_pow+0x220>)
 8005278:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800527c:	429c      	cmp	r4, r3
 800527e:	4689      	mov	r9, r1
 8005280:	4682      	mov	sl, r0
 8005282:	dc09      	bgt.n	8005298 <__ieee754_pow+0x40>
 8005284:	d103      	bne.n	800528e <__ieee754_pow+0x36>
 8005286:	b938      	cbnz	r0, 8005298 <__ieee754_pow+0x40>
 8005288:	42a5      	cmp	r5, r4
 800528a:	dc0d      	bgt.n	80052a8 <__ieee754_pow+0x50>
 800528c:	e001      	b.n	8005292 <__ieee754_pow+0x3a>
 800528e:	429d      	cmp	r5, r3
 8005290:	dc02      	bgt.n	8005298 <__ieee754_pow+0x40>
 8005292:	429d      	cmp	r5, r3
 8005294:	d10e      	bne.n	80052b4 <__ieee754_pow+0x5c>
 8005296:	b16a      	cbz	r2, 80052b4 <__ieee754_pow+0x5c>
 8005298:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800529c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80052a0:	ea54 030a 	orrs.w	r3, r4, sl
 80052a4:	f000 849e 	beq.w	8005be4 <__ieee754_pow+0x98c>
 80052a8:	4874      	ldr	r0, [pc, #464]	; (800547c <__ieee754_pow+0x224>)
 80052aa:	b011      	add	sp, #68	; 0x44
 80052ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	f000 bd90 	b.w	8005dd4 <nan>
 80052b4:	f1b9 0f00 	cmp.w	r9, #0
 80052b8:	da53      	bge.n	8005362 <__ieee754_pow+0x10a>
 80052ba:	4b71      	ldr	r3, [pc, #452]	; (8005480 <__ieee754_pow+0x228>)
 80052bc:	429d      	cmp	r5, r3
 80052be:	dc4e      	bgt.n	800535e <__ieee754_pow+0x106>
 80052c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80052c4:	429d      	cmp	r5, r3
 80052c6:	dd4c      	ble.n	8005362 <__ieee754_pow+0x10a>
 80052c8:	152b      	asrs	r3, r5, #20
 80052ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052ce:	2b14      	cmp	r3, #20
 80052d0:	dd28      	ble.n	8005324 <__ieee754_pow+0xcc>
 80052d2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80052d6:	fa22 f103 	lsr.w	r1, r2, r3
 80052da:	fa01 f303 	lsl.w	r3, r1, r3
 80052de:	4293      	cmp	r3, r2
 80052e0:	d13f      	bne.n	8005362 <__ieee754_pow+0x10a>
 80052e2:	f001 0101 	and.w	r1, r1, #1
 80052e6:	f1c1 0302 	rsb	r3, r1, #2
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	d15c      	bne.n	80053aa <__ieee754_pow+0x152>
 80052f0:	4b61      	ldr	r3, [pc, #388]	; (8005478 <__ieee754_pow+0x220>)
 80052f2:	429d      	cmp	r5, r3
 80052f4:	d126      	bne.n	8005344 <__ieee754_pow+0xec>
 80052f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80052fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80052fe:	ea53 030a 	orrs.w	r3, r3, sl
 8005302:	f000 846f 	beq.w	8005be4 <__ieee754_pow+0x98c>
 8005306:	4b5f      	ldr	r3, [pc, #380]	; (8005484 <__ieee754_pow+0x22c>)
 8005308:	429c      	cmp	r4, r3
 800530a:	dd2c      	ble.n	8005366 <__ieee754_pow+0x10e>
 800530c:	2e00      	cmp	r6, #0
 800530e:	f280 846f 	bge.w	8005bf0 <__ieee754_pow+0x998>
 8005312:	f04f 0b00 	mov.w	fp, #0
 8005316:	f04f 0c00 	mov.w	ip, #0
 800531a:	4658      	mov	r0, fp
 800531c:	4661      	mov	r1, ip
 800531e:	b011      	add	sp, #68	; 0x44
 8005320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005324:	2a00      	cmp	r2, #0
 8005326:	d13e      	bne.n	80053a6 <__ieee754_pow+0x14e>
 8005328:	f1c3 0314 	rsb	r3, r3, #20
 800532c:	fa45 f103 	asr.w	r1, r5, r3
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	42ab      	cmp	r3, r5
 8005336:	f040 8463 	bne.w	8005c00 <__ieee754_pow+0x9a8>
 800533a:	f001 0101 	and.w	r1, r1, #1
 800533e:	f1c1 0302 	rsb	r3, r1, #2
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	4b50      	ldr	r3, [pc, #320]	; (8005488 <__ieee754_pow+0x230>)
 8005346:	429d      	cmp	r5, r3
 8005348:	d114      	bne.n	8005374 <__ieee754_pow+0x11c>
 800534a:	2e00      	cmp	r6, #0
 800534c:	f280 8454 	bge.w	8005bf8 <__ieee754_pow+0x9a0>
 8005350:	463a      	mov	r2, r7
 8005352:	4643      	mov	r3, r8
 8005354:	2000      	movs	r0, #0
 8005356:	494c      	ldr	r1, [pc, #304]	; (8005488 <__ieee754_pow+0x230>)
 8005358:	f7fb f9e0 	bl	800071c <__aeabi_ddiv>
 800535c:	e013      	b.n	8005386 <__ieee754_pow+0x12e>
 800535e:	2302      	movs	r3, #2
 8005360:	e7c3      	b.n	80052ea <__ieee754_pow+0x92>
 8005362:	2300      	movs	r3, #0
 8005364:	e7c1      	b.n	80052ea <__ieee754_pow+0x92>
 8005366:	2e00      	cmp	r6, #0
 8005368:	dad3      	bge.n	8005312 <__ieee754_pow+0xba>
 800536a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800536e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005372:	e7d2      	b.n	800531a <__ieee754_pow+0xc2>
 8005374:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005378:	d108      	bne.n	800538c <__ieee754_pow+0x134>
 800537a:	463a      	mov	r2, r7
 800537c:	4643      	mov	r3, r8
 800537e:	4638      	mov	r0, r7
 8005380:	4641      	mov	r1, r8
 8005382:	f7fb f8a1 	bl	80004c8 <__aeabi_dmul>
 8005386:	4683      	mov	fp, r0
 8005388:	468c      	mov	ip, r1
 800538a:	e7c6      	b.n	800531a <__ieee754_pow+0xc2>
 800538c:	4b3f      	ldr	r3, [pc, #252]	; (800548c <__ieee754_pow+0x234>)
 800538e:	429e      	cmp	r6, r3
 8005390:	d10b      	bne.n	80053aa <__ieee754_pow+0x152>
 8005392:	f1b9 0f00 	cmp.w	r9, #0
 8005396:	db08      	blt.n	80053aa <__ieee754_pow+0x152>
 8005398:	4638      	mov	r0, r7
 800539a:	4641      	mov	r1, r8
 800539c:	b011      	add	sp, #68	; 0x44
 800539e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a2:	f000 bc63 	b.w	8005c6c <__ieee754_sqrt>
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	4638      	mov	r0, r7
 80053ac:	4641      	mov	r1, r8
 80053ae:	f7ff fd9d 	bl	8004eec <fabs>
 80053b2:	4683      	mov	fp, r0
 80053b4:	468c      	mov	ip, r1
 80053b6:	f1ba 0f00 	cmp.w	sl, #0
 80053ba:	d12b      	bne.n	8005414 <__ieee754_pow+0x1bc>
 80053bc:	b124      	cbz	r4, 80053c8 <__ieee754_pow+0x170>
 80053be:	4b32      	ldr	r3, [pc, #200]	; (8005488 <__ieee754_pow+0x230>)
 80053c0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d125      	bne.n	8005414 <__ieee754_pow+0x1bc>
 80053c8:	2e00      	cmp	r6, #0
 80053ca:	da07      	bge.n	80053dc <__ieee754_pow+0x184>
 80053cc:	465a      	mov	r2, fp
 80053ce:	4663      	mov	r3, ip
 80053d0:	2000      	movs	r0, #0
 80053d2:	492d      	ldr	r1, [pc, #180]	; (8005488 <__ieee754_pow+0x230>)
 80053d4:	f7fb f9a2 	bl	800071c <__aeabi_ddiv>
 80053d8:	4683      	mov	fp, r0
 80053da:	468c      	mov	ip, r1
 80053dc:	f1b9 0f00 	cmp.w	r9, #0
 80053e0:	da9b      	bge.n	800531a <__ieee754_pow+0xc2>
 80053e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80053e6:	9b00      	ldr	r3, [sp, #0]
 80053e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80053ec:	4323      	orrs	r3, r4
 80053ee:	d108      	bne.n	8005402 <__ieee754_pow+0x1aa>
 80053f0:	465a      	mov	r2, fp
 80053f2:	4663      	mov	r3, ip
 80053f4:	4658      	mov	r0, fp
 80053f6:	4661      	mov	r1, ip
 80053f8:	f7fa feae 	bl	8000158 <__aeabi_dsub>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	e7aa      	b.n	8005358 <__ieee754_pow+0x100>
 8005402:	9b00      	ldr	r3, [sp, #0]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d188      	bne.n	800531a <__ieee754_pow+0xc2>
 8005408:	4658      	mov	r0, fp
 800540a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800540e:	4683      	mov	fp, r0
 8005410:	469c      	mov	ip, r3
 8005412:	e782      	b.n	800531a <__ieee754_pow+0xc2>
 8005414:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005418:	f109 33ff 	add.w	r3, r9, #4294967295
 800541c:	930d      	str	r3, [sp, #52]	; 0x34
 800541e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005420:	9b00      	ldr	r3, [sp, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	d104      	bne.n	8005430 <__ieee754_pow+0x1d8>
 8005426:	463a      	mov	r2, r7
 8005428:	4643      	mov	r3, r8
 800542a:	4638      	mov	r0, r7
 800542c:	4641      	mov	r1, r8
 800542e:	e7e3      	b.n	80053f8 <__ieee754_pow+0x1a0>
 8005430:	4b17      	ldr	r3, [pc, #92]	; (8005490 <__ieee754_pow+0x238>)
 8005432:	429d      	cmp	r5, r3
 8005434:	f340 80fe 	ble.w	8005634 <__ieee754_pow+0x3dc>
 8005438:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800543c:	429d      	cmp	r5, r3
 800543e:	dd0b      	ble.n	8005458 <__ieee754_pow+0x200>
 8005440:	4b10      	ldr	r3, [pc, #64]	; (8005484 <__ieee754_pow+0x22c>)
 8005442:	429c      	cmp	r4, r3
 8005444:	dc0e      	bgt.n	8005464 <__ieee754_pow+0x20c>
 8005446:	2e00      	cmp	r6, #0
 8005448:	f6bf af63 	bge.w	8005312 <__ieee754_pow+0xba>
 800544c:	a308      	add	r3, pc, #32	; (adr r3, 8005470 <__ieee754_pow+0x218>)
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	e794      	b.n	8005382 <__ieee754_pow+0x12a>
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <__ieee754_pow+0x23c>)
 800545a:	429c      	cmp	r4, r3
 800545c:	ddf3      	ble.n	8005446 <__ieee754_pow+0x1ee>
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <__ieee754_pow+0x230>)
 8005460:	429c      	cmp	r4, r3
 8005462:	dd19      	ble.n	8005498 <__ieee754_pow+0x240>
 8005464:	2e00      	cmp	r6, #0
 8005466:	dcf1      	bgt.n	800544c <__ieee754_pow+0x1f4>
 8005468:	e753      	b.n	8005312 <__ieee754_pow+0xba>
 800546a:	bf00      	nop
 800546c:	f3af 8000 	nop.w
 8005470:	8800759c 	.word	0x8800759c
 8005474:	7e37e43c 	.word	0x7e37e43c
 8005478:	7ff00000 	.word	0x7ff00000
 800547c:	08006078 	.word	0x08006078
 8005480:	433fffff 	.word	0x433fffff
 8005484:	3fefffff 	.word	0x3fefffff
 8005488:	3ff00000 	.word	0x3ff00000
 800548c:	3fe00000 	.word	0x3fe00000
 8005490:	41e00000 	.word	0x41e00000
 8005494:	3feffffe 	.word	0x3feffffe
 8005498:	4661      	mov	r1, ip
 800549a:	2200      	movs	r2, #0
 800549c:	4b60      	ldr	r3, [pc, #384]	; (8005620 <__ieee754_pow+0x3c8>)
 800549e:	4658      	mov	r0, fp
 80054a0:	f7fa fe5a 	bl	8000158 <__aeabi_dsub>
 80054a4:	a354      	add	r3, pc, #336	; (adr r3, 80055f8 <__ieee754_pow+0x3a0>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	4604      	mov	r4, r0
 80054ac:	460d      	mov	r5, r1
 80054ae:	f7fb f80b 	bl	80004c8 <__aeabi_dmul>
 80054b2:	a353      	add	r3, pc, #332	; (adr r3, 8005600 <__ieee754_pow+0x3a8>)
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	4606      	mov	r6, r0
 80054ba:	460f      	mov	r7, r1
 80054bc:	4620      	mov	r0, r4
 80054be:	4629      	mov	r1, r5
 80054c0:	f7fb f802 	bl	80004c8 <__aeabi_dmul>
 80054c4:	2200      	movs	r2, #0
 80054c6:	4682      	mov	sl, r0
 80054c8:	468b      	mov	fp, r1
 80054ca:	4b56      	ldr	r3, [pc, #344]	; (8005624 <__ieee754_pow+0x3cc>)
 80054cc:	4620      	mov	r0, r4
 80054ce:	4629      	mov	r1, r5
 80054d0:	f7fa fffa 	bl	80004c8 <__aeabi_dmul>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	a14b      	add	r1, pc, #300	; (adr r1, 8005608 <__ieee754_pow+0x3b0>)
 80054da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054de:	f7fa fe3b 	bl	8000158 <__aeabi_dsub>
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	f7fa ffef 	bl	80004c8 <__aeabi_dmul>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	2000      	movs	r0, #0
 80054f0:	494d      	ldr	r1, [pc, #308]	; (8005628 <__ieee754_pow+0x3d0>)
 80054f2:	f7fa fe31 	bl	8000158 <__aeabi_dsub>
 80054f6:	4622      	mov	r2, r4
 80054f8:	462b      	mov	r3, r5
 80054fa:	4680      	mov	r8, r0
 80054fc:	4689      	mov	r9, r1
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	f7fa ffe1 	bl	80004c8 <__aeabi_dmul>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4640      	mov	r0, r8
 800550c:	4649      	mov	r1, r9
 800550e:	f7fa ffdb 	bl	80004c8 <__aeabi_dmul>
 8005512:	a33f      	add	r3, pc, #252	; (adr r3, 8005610 <__ieee754_pow+0x3b8>)
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f7fa ffd6 	bl	80004c8 <__aeabi_dmul>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4650      	mov	r0, sl
 8005522:	4659      	mov	r1, fp
 8005524:	f7fa fe18 	bl	8000158 <__aeabi_dsub>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4604      	mov	r4, r0
 800552e:	460d      	mov	r5, r1
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fa fe12 	bl	800015c <__adddf3>
 8005538:	2000      	movs	r0, #0
 800553a:	468b      	mov	fp, r1
 800553c:	4682      	mov	sl, r0
 800553e:	4632      	mov	r2, r6
 8005540:	463b      	mov	r3, r7
 8005542:	f7fa fe09 	bl	8000158 <__aeabi_dsub>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4620      	mov	r0, r4
 800554c:	4629      	mov	r1, r5
 800554e:	f7fa fe03 	bl	8000158 <__aeabi_dsub>
 8005552:	9b00      	ldr	r3, [sp, #0]
 8005554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005556:	3b01      	subs	r3, #1
 8005558:	4313      	orrs	r3, r2
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	4c32      	ldreq	r4, [pc, #200]	; (800562c <__ieee754_pow+0x3d4>)
 8005562:	4c2f      	ldrne	r4, [pc, #188]	; (8005620 <__ieee754_pow+0x3c8>)
 8005564:	4606      	mov	r6, r0
 8005566:	e9cd 3400 	strd	r3, r4, [sp]
 800556a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800556e:	2400      	movs	r4, #0
 8005570:	460f      	mov	r7, r1
 8005572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005576:	4622      	mov	r2, r4
 8005578:	462b      	mov	r3, r5
 800557a:	f7fa fded 	bl	8000158 <__aeabi_dsub>
 800557e:	4652      	mov	r2, sl
 8005580:	465b      	mov	r3, fp
 8005582:	f7fa ffa1 	bl	80004c8 <__aeabi_dmul>
 8005586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800558a:	4680      	mov	r8, r0
 800558c:	4689      	mov	r9, r1
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fa ff99 	bl	80004c8 <__aeabi_dmul>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4640      	mov	r0, r8
 800559c:	4649      	mov	r1, r9
 800559e:	f7fa fddd 	bl	800015c <__adddf3>
 80055a2:	4622      	mov	r2, r4
 80055a4:	462b      	mov	r3, r5
 80055a6:	4680      	mov	r8, r0
 80055a8:	4689      	mov	r9, r1
 80055aa:	4650      	mov	r0, sl
 80055ac:	4659      	mov	r1, fp
 80055ae:	f7fa ff8b 	bl	80004c8 <__aeabi_dmul>
 80055b2:	4604      	mov	r4, r0
 80055b4:	460d      	mov	r5, r1
 80055b6:	460b      	mov	r3, r1
 80055b8:	4602      	mov	r2, r0
 80055ba:	4649      	mov	r1, r9
 80055bc:	4640      	mov	r0, r8
 80055be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80055c2:	f7fa fdcb 	bl	800015c <__adddf3>
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <__ieee754_pow+0x3d8>)
 80055c8:	4682      	mov	sl, r0
 80055ca:	4299      	cmp	r1, r3
 80055cc:	460f      	mov	r7, r1
 80055ce:	460e      	mov	r6, r1
 80055d0:	f340 82e1 	ble.w	8005b96 <__ieee754_pow+0x93e>
 80055d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80055d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80055dc:	4303      	orrs	r3, r0
 80055de:	f000 81db 	beq.w	8005998 <__ieee754_pow+0x740>
 80055e2:	a30d      	add	r3, pc, #52	; (adr r3, 8005618 <__ieee754_pow+0x3c0>)
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055ec:	f7fa ff6c 	bl	80004c8 <__aeabi_dmul>
 80055f0:	a309      	add	r3, pc, #36	; (adr r3, 8005618 <__ieee754_pow+0x3c0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	e6c4      	b.n	8005382 <__ieee754_pow+0x12a>
 80055f8:	60000000 	.word	0x60000000
 80055fc:	3ff71547 	.word	0x3ff71547
 8005600:	f85ddf44 	.word	0xf85ddf44
 8005604:	3e54ae0b 	.word	0x3e54ae0b
 8005608:	55555555 	.word	0x55555555
 800560c:	3fd55555 	.word	0x3fd55555
 8005610:	652b82fe 	.word	0x652b82fe
 8005614:	3ff71547 	.word	0x3ff71547
 8005618:	8800759c 	.word	0x8800759c
 800561c:	7e37e43c 	.word	0x7e37e43c
 8005620:	3ff00000 	.word	0x3ff00000
 8005624:	3fd00000 	.word	0x3fd00000
 8005628:	3fe00000 	.word	0x3fe00000
 800562c:	bff00000 	.word	0xbff00000
 8005630:	408fffff 	.word	0x408fffff
 8005634:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	da08      	bge.n	8005650 <__ieee754_pow+0x3f8>
 800563e:	4658      	mov	r0, fp
 8005640:	4bcd      	ldr	r3, [pc, #820]	; (8005978 <__ieee754_pow+0x720>)
 8005642:	4661      	mov	r1, ip
 8005644:	f7fa ff40 	bl	80004c8 <__aeabi_dmul>
 8005648:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800564c:	4683      	mov	fp, r0
 800564e:	460c      	mov	r4, r1
 8005650:	1523      	asrs	r3, r4, #20
 8005652:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005656:	4413      	add	r3, r2
 8005658:	930c      	str	r3, [sp, #48]	; 0x30
 800565a:	4bc8      	ldr	r3, [pc, #800]	; (800597c <__ieee754_pow+0x724>)
 800565c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005660:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005664:	429c      	cmp	r4, r3
 8005666:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800566a:	dd08      	ble.n	800567e <__ieee754_pow+0x426>
 800566c:	4bc4      	ldr	r3, [pc, #784]	; (8005980 <__ieee754_pow+0x728>)
 800566e:	429c      	cmp	r4, r3
 8005670:	f340 815b 	ble.w	800592a <__ieee754_pow+0x6d2>
 8005674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005676:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800567a:	3301      	adds	r3, #1
 800567c:	930c      	str	r3, [sp, #48]	; 0x30
 800567e:	f04f 0800 	mov.w	r8, #0
 8005682:	4658      	mov	r0, fp
 8005684:	4629      	mov	r1, r5
 8005686:	4bbf      	ldr	r3, [pc, #764]	; (8005984 <__ieee754_pow+0x72c>)
 8005688:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800568c:	444b      	add	r3, r9
 800568e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005692:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005696:	461a      	mov	r2, r3
 8005698:	4623      	mov	r3, r4
 800569a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800569e:	f7fa fd5b 	bl	8000158 <__aeabi_dsub>
 80056a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056a6:	4606      	mov	r6, r0
 80056a8:	460f      	mov	r7, r1
 80056aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056ae:	f7fa fd55 	bl	800015c <__adddf3>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	2000      	movs	r0, #0
 80056b8:	49b3      	ldr	r1, [pc, #716]	; (8005988 <__ieee754_pow+0x730>)
 80056ba:	f7fb f82f 	bl	800071c <__aeabi_ddiv>
 80056be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4630      	mov	r0, r6
 80056c8:	4639      	mov	r1, r7
 80056ca:	f7fa fefd 	bl	80004c8 <__aeabi_dmul>
 80056ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056d2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80056d6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056da:	2300      	movs	r3, #0
 80056dc:	2200      	movs	r2, #0
 80056de:	106d      	asrs	r5, r5, #1
 80056e0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80056e4:	9304      	str	r3, [sp, #16]
 80056e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80056ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80056ee:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80056f2:	4650      	mov	r0, sl
 80056f4:	4659      	mov	r1, fp
 80056f6:	4614      	mov	r4, r2
 80056f8:	461d      	mov	r5, r3
 80056fa:	f7fa fee5 	bl	80004c8 <__aeabi_dmul>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4630      	mov	r0, r6
 8005704:	4639      	mov	r1, r7
 8005706:	f7fa fd27 	bl	8000158 <__aeabi_dsub>
 800570a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800570e:	4606      	mov	r6, r0
 8005710:	460f      	mov	r7, r1
 8005712:	4620      	mov	r0, r4
 8005714:	4629      	mov	r1, r5
 8005716:	f7fa fd1f 	bl	8000158 <__aeabi_dsub>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005722:	f7fa fd19 	bl	8000158 <__aeabi_dsub>
 8005726:	4652      	mov	r2, sl
 8005728:	465b      	mov	r3, fp
 800572a:	f7fa fecd 	bl	80004c8 <__aeabi_dmul>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4630      	mov	r0, r6
 8005734:	4639      	mov	r1, r7
 8005736:	f7fa fd0f 	bl	8000158 <__aeabi_dsub>
 800573a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800573e:	f7fa fec3 	bl	80004c8 <__aeabi_dmul>
 8005742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005746:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	f7fa febb 	bl	80004c8 <__aeabi_dmul>
 8005752:	a377      	add	r3, pc, #476	; (adr r3, 8005930 <__ieee754_pow+0x6d8>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	4604      	mov	r4, r0
 800575a:	460d      	mov	r5, r1
 800575c:	f7fa feb4 	bl	80004c8 <__aeabi_dmul>
 8005760:	a375      	add	r3, pc, #468	; (adr r3, 8005938 <__ieee754_pow+0x6e0>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa fcf9 	bl	800015c <__adddf3>
 800576a:	4622      	mov	r2, r4
 800576c:	462b      	mov	r3, r5
 800576e:	f7fa feab 	bl	80004c8 <__aeabi_dmul>
 8005772:	a373      	add	r3, pc, #460	; (adr r3, 8005940 <__ieee754_pow+0x6e8>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa fcf0 	bl	800015c <__adddf3>
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	f7fa fea2 	bl	80004c8 <__aeabi_dmul>
 8005784:	a370      	add	r3, pc, #448	; (adr r3, 8005948 <__ieee754_pow+0x6f0>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fce7 	bl	800015c <__adddf3>
 800578e:	4622      	mov	r2, r4
 8005790:	462b      	mov	r3, r5
 8005792:	f7fa fe99 	bl	80004c8 <__aeabi_dmul>
 8005796:	a36e      	add	r3, pc, #440	; (adr r3, 8005950 <__ieee754_pow+0x6f8>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa fcde 	bl	800015c <__adddf3>
 80057a0:	4622      	mov	r2, r4
 80057a2:	462b      	mov	r3, r5
 80057a4:	f7fa fe90 	bl	80004c8 <__aeabi_dmul>
 80057a8:	a36b      	add	r3, pc, #428	; (adr r3, 8005958 <__ieee754_pow+0x700>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa fcd5 	bl	800015c <__adddf3>
 80057b2:	4622      	mov	r2, r4
 80057b4:	4606      	mov	r6, r0
 80057b6:	460f      	mov	r7, r1
 80057b8:	462b      	mov	r3, r5
 80057ba:	4620      	mov	r0, r4
 80057bc:	4629      	mov	r1, r5
 80057be:	f7fa fe83 	bl	80004c8 <__aeabi_dmul>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4630      	mov	r0, r6
 80057c8:	4639      	mov	r1, r7
 80057ca:	f7fa fe7d 	bl	80004c8 <__aeabi_dmul>
 80057ce:	4604      	mov	r4, r0
 80057d0:	460d      	mov	r5, r1
 80057d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057d6:	4652      	mov	r2, sl
 80057d8:	465b      	mov	r3, fp
 80057da:	f7fa fcbf 	bl	800015c <__adddf3>
 80057de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057e2:	f7fa fe71 	bl	80004c8 <__aeabi_dmul>
 80057e6:	4622      	mov	r2, r4
 80057e8:	462b      	mov	r3, r5
 80057ea:	f7fa fcb7 	bl	800015c <__adddf3>
 80057ee:	4652      	mov	r2, sl
 80057f0:	4606      	mov	r6, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	465b      	mov	r3, fp
 80057f6:	4650      	mov	r0, sl
 80057f8:	4659      	mov	r1, fp
 80057fa:	f7fa fe65 	bl	80004c8 <__aeabi_dmul>
 80057fe:	2200      	movs	r2, #0
 8005800:	4b62      	ldr	r3, [pc, #392]	; (800598c <__ieee754_pow+0x734>)
 8005802:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005806:	f7fa fca9 	bl	800015c <__adddf3>
 800580a:	4632      	mov	r2, r6
 800580c:	463b      	mov	r3, r7
 800580e:	f7fa fca5 	bl	800015c <__adddf3>
 8005812:	9804      	ldr	r0, [sp, #16]
 8005814:	460d      	mov	r5, r1
 8005816:	4604      	mov	r4, r0
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4650      	mov	r0, sl
 800581e:	4659      	mov	r1, fp
 8005820:	f7fa fe52 	bl	80004c8 <__aeabi_dmul>
 8005824:	2200      	movs	r2, #0
 8005826:	4682      	mov	sl, r0
 8005828:	468b      	mov	fp, r1
 800582a:	4b58      	ldr	r3, [pc, #352]	; (800598c <__ieee754_pow+0x734>)
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fa fc92 	bl	8000158 <__aeabi_dsub>
 8005834:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005838:	f7fa fc8e 	bl	8000158 <__aeabi_dsub>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4630      	mov	r0, r6
 8005842:	4639      	mov	r1, r7
 8005844:	f7fa fc88 	bl	8000158 <__aeabi_dsub>
 8005848:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800584c:	f7fa fe3c 	bl	80004c8 <__aeabi_dmul>
 8005850:	4622      	mov	r2, r4
 8005852:	4606      	mov	r6, r0
 8005854:	460f      	mov	r7, r1
 8005856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800585a:	462b      	mov	r3, r5
 800585c:	f7fa fe34 	bl	80004c8 <__aeabi_dmul>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4630      	mov	r0, r6
 8005866:	4639      	mov	r1, r7
 8005868:	f7fa fc78 	bl	800015c <__adddf3>
 800586c:	4606      	mov	r6, r0
 800586e:	460f      	mov	r7, r1
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4650      	mov	r0, sl
 8005876:	4659      	mov	r1, fp
 8005878:	f7fa fc70 	bl	800015c <__adddf3>
 800587c:	a338      	add	r3, pc, #224	; (adr r3, 8005960 <__ieee754_pow+0x708>)
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	9804      	ldr	r0, [sp, #16]
 8005884:	460d      	mov	r5, r1
 8005886:	4604      	mov	r4, r0
 8005888:	f7fa fe1e 	bl	80004c8 <__aeabi_dmul>
 800588c:	4652      	mov	r2, sl
 800588e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005892:	465b      	mov	r3, fp
 8005894:	4620      	mov	r0, r4
 8005896:	4629      	mov	r1, r5
 8005898:	f7fa fc5e 	bl	8000158 <__aeabi_dsub>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fa fc58 	bl	8000158 <__aeabi_dsub>
 80058a8:	a32f      	add	r3, pc, #188	; (adr r3, 8005968 <__ieee754_pow+0x710>)
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f7fa fe0b 	bl	80004c8 <__aeabi_dmul>
 80058b2:	a32f      	add	r3, pc, #188	; (adr r3, 8005970 <__ieee754_pow+0x718>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	4606      	mov	r6, r0
 80058ba:	460f      	mov	r7, r1
 80058bc:	4620      	mov	r0, r4
 80058be:	4629      	mov	r1, r5
 80058c0:	f7fa fe02 	bl	80004c8 <__aeabi_dmul>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4630      	mov	r0, r6
 80058ca:	4639      	mov	r1, r7
 80058cc:	f7fa fc46 	bl	800015c <__adddf3>
 80058d0:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <__ieee754_pow+0x738>)
 80058d2:	444b      	add	r3, r9
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f7fa fc40 	bl	800015c <__adddf3>
 80058dc:	4604      	mov	r4, r0
 80058de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058e0:	460d      	mov	r5, r1
 80058e2:	f7fa fd87 	bl	80003f4 <__aeabi_i2d>
 80058e6:	4606      	mov	r6, r0
 80058e8:	460f      	mov	r7, r1
 80058ea:	4b2a      	ldr	r3, [pc, #168]	; (8005994 <__ieee754_pow+0x73c>)
 80058ec:	4622      	mov	r2, r4
 80058ee:	444b      	add	r3, r9
 80058f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058f4:	462b      	mov	r3, r5
 80058f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fa:	f7fa fc2f 	bl	800015c <__adddf3>
 80058fe:	4642      	mov	r2, r8
 8005900:	464b      	mov	r3, r9
 8005902:	f7fa fc2b 	bl	800015c <__adddf3>
 8005906:	4632      	mov	r2, r6
 8005908:	463b      	mov	r3, r7
 800590a:	f7fa fc27 	bl	800015c <__adddf3>
 800590e:	9804      	ldr	r0, [sp, #16]
 8005910:	4632      	mov	r2, r6
 8005912:	463b      	mov	r3, r7
 8005914:	4682      	mov	sl, r0
 8005916:	468b      	mov	fp, r1
 8005918:	f7fa fc1e 	bl	8000158 <__aeabi_dsub>
 800591c:	4642      	mov	r2, r8
 800591e:	464b      	mov	r3, r9
 8005920:	f7fa fc1a 	bl	8000158 <__aeabi_dsub>
 8005924:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005928:	e60b      	b.n	8005542 <__ieee754_pow+0x2ea>
 800592a:	f04f 0801 	mov.w	r8, #1
 800592e:	e6a8      	b.n	8005682 <__ieee754_pow+0x42a>
 8005930:	4a454eef 	.word	0x4a454eef
 8005934:	3fca7e28 	.word	0x3fca7e28
 8005938:	93c9db65 	.word	0x93c9db65
 800593c:	3fcd864a 	.word	0x3fcd864a
 8005940:	a91d4101 	.word	0xa91d4101
 8005944:	3fd17460 	.word	0x3fd17460
 8005948:	518f264d 	.word	0x518f264d
 800594c:	3fd55555 	.word	0x3fd55555
 8005950:	db6fabff 	.word	0xdb6fabff
 8005954:	3fdb6db6 	.word	0x3fdb6db6
 8005958:	33333303 	.word	0x33333303
 800595c:	3fe33333 	.word	0x3fe33333
 8005960:	e0000000 	.word	0xe0000000
 8005964:	3feec709 	.word	0x3feec709
 8005968:	dc3a03fd 	.word	0xdc3a03fd
 800596c:	3feec709 	.word	0x3feec709
 8005970:	145b01f5 	.word	0x145b01f5
 8005974:	be3e2fe0 	.word	0xbe3e2fe0
 8005978:	43400000 	.word	0x43400000
 800597c:	0003988e 	.word	0x0003988e
 8005980:	000bb679 	.word	0x000bb679
 8005984:	08006080 	.word	0x08006080
 8005988:	3ff00000 	.word	0x3ff00000
 800598c:	40080000 	.word	0x40080000
 8005990:	080060a0 	.word	0x080060a0
 8005994:	08006090 	.word	0x08006090
 8005998:	a39b      	add	r3, pc, #620	; (adr r3, 8005c08 <__ieee754_pow+0x9b0>)
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fa fbdb 	bl	800015c <__adddf3>
 80059a6:	4622      	mov	r2, r4
 80059a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ac:	462b      	mov	r3, r5
 80059ae:	4650      	mov	r0, sl
 80059b0:	4639      	mov	r1, r7
 80059b2:	f7fa fbd1 	bl	8000158 <__aeabi_dsub>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059be:	f7fb f813 	bl	80009e8 <__aeabi_dcmpgt>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	f47f ae0d 	bne.w	80055e2 <__ieee754_pow+0x38a>
 80059c8:	4aa3      	ldr	r2, [pc, #652]	; (8005c58 <__ieee754_pow+0xa00>)
 80059ca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f340 8103 	ble.w	8005bda <__ieee754_pow+0x982>
 80059d4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80059d8:	2000      	movs	r0, #0
 80059da:	151b      	asrs	r3, r3, #20
 80059dc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80059e0:	fa4a f303 	asr.w	r3, sl, r3
 80059e4:	4433      	add	r3, r6
 80059e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80059ea:	4f9c      	ldr	r7, [pc, #624]	; (8005c5c <__ieee754_pow+0xa04>)
 80059ec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80059f0:	4117      	asrs	r7, r2
 80059f2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80059f6:	ea23 0107 	bic.w	r1, r3, r7
 80059fa:	f1c2 0214 	rsb	r2, r2, #20
 80059fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005a02:	fa4a fa02 	asr.w	sl, sl, r2
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	4629      	mov	r1, r5
 8005a10:	bfb8      	it	lt
 8005a12:	f1ca 0a00 	rsblt	sl, sl, #0
 8005a16:	f7fa fb9f 	bl	8000158 <__aeabi_dsub>
 8005a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a22:	4642      	mov	r2, r8
 8005a24:	464b      	mov	r3, r9
 8005a26:	f7fa fb99 	bl	800015c <__adddf3>
 8005a2a:	a379      	add	r3, pc, #484	; (adr r3, 8005c10 <__ieee754_pow+0x9b8>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	2000      	movs	r0, #0
 8005a32:	460d      	mov	r5, r1
 8005a34:	4604      	mov	r4, r0
 8005a36:	f7fa fd47 	bl	80004c8 <__aeabi_dmul>
 8005a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460f      	mov	r7, r1
 8005a42:	4620      	mov	r0, r4
 8005a44:	4629      	mov	r1, r5
 8005a46:	f7fa fb87 	bl	8000158 <__aeabi_dsub>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4640      	mov	r0, r8
 8005a50:	4649      	mov	r1, r9
 8005a52:	f7fa fb81 	bl	8000158 <__aeabi_dsub>
 8005a56:	a370      	add	r3, pc, #448	; (adr r3, 8005c18 <__ieee754_pow+0x9c0>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa fd34 	bl	80004c8 <__aeabi_dmul>
 8005a60:	a36f      	add	r3, pc, #444	; (adr r3, 8005c20 <__ieee754_pow+0x9c8>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	4680      	mov	r8, r0
 8005a68:	4689      	mov	r9, r1
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	f7fa fd2b 	bl	80004c8 <__aeabi_dmul>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4640      	mov	r0, r8
 8005a78:	4649      	mov	r1, r9
 8005a7a:	f7fa fb6f 	bl	800015c <__adddf3>
 8005a7e:	4604      	mov	r4, r0
 8005a80:	460d      	mov	r5, r1
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4630      	mov	r0, r6
 8005a88:	4639      	mov	r1, r7
 8005a8a:	f7fa fb67 	bl	800015c <__adddf3>
 8005a8e:	4632      	mov	r2, r6
 8005a90:	463b      	mov	r3, r7
 8005a92:	4680      	mov	r8, r0
 8005a94:	4689      	mov	r9, r1
 8005a96:	f7fa fb5f 	bl	8000158 <__aeabi_dsub>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7fa fb59 	bl	8000158 <__aeabi_dsub>
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	464b      	mov	r3, r9
 8005aae:	4640      	mov	r0, r8
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	f7fa fd09 	bl	80004c8 <__aeabi_dmul>
 8005ab6:	a35c      	add	r3, pc, #368	; (adr r3, 8005c28 <__ieee754_pow+0x9d0>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	4604      	mov	r4, r0
 8005abe:	460d      	mov	r5, r1
 8005ac0:	f7fa fd02 	bl	80004c8 <__aeabi_dmul>
 8005ac4:	a35a      	add	r3, pc, #360	; (adr r3, 8005c30 <__ieee754_pow+0x9d8>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fa fb45 	bl	8000158 <__aeabi_dsub>
 8005ace:	4622      	mov	r2, r4
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	f7fa fcf9 	bl	80004c8 <__aeabi_dmul>
 8005ad6:	a358      	add	r3, pc, #352	; (adr r3, 8005c38 <__ieee754_pow+0x9e0>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f7fa fb3e 	bl	800015c <__adddf3>
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	f7fa fcf0 	bl	80004c8 <__aeabi_dmul>
 8005ae8:	a355      	add	r3, pc, #340	; (adr r3, 8005c40 <__ieee754_pow+0x9e8>)
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f7fa fb33 	bl	8000158 <__aeabi_dsub>
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	f7fa fce7 	bl	80004c8 <__aeabi_dmul>
 8005afa:	a353      	add	r3, pc, #332	; (adr r3, 8005c48 <__ieee754_pow+0x9f0>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f7fa fb2c 	bl	800015c <__adddf3>
 8005b04:	4622      	mov	r2, r4
 8005b06:	462b      	mov	r3, r5
 8005b08:	f7fa fcde 	bl	80004c8 <__aeabi_dmul>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4640      	mov	r0, r8
 8005b12:	4649      	mov	r1, r9
 8005b14:	f7fa fb20 	bl	8000158 <__aeabi_dsub>
 8005b18:	4604      	mov	r4, r0
 8005b1a:	460d      	mov	r5, r1
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4640      	mov	r0, r8
 8005b22:	4649      	mov	r1, r9
 8005b24:	f7fa fcd0 	bl	80004c8 <__aeabi_dmul>
 8005b28:	2200      	movs	r2, #0
 8005b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b32:	4620      	mov	r0, r4
 8005b34:	4629      	mov	r1, r5
 8005b36:	f7fa fb0f 	bl	8000158 <__aeabi_dsub>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b42:	f7fa fdeb 	bl	800071c <__aeabi_ddiv>
 8005b46:	4632      	mov	r2, r6
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	4640      	mov	r0, r8
 8005b50:	4649      	mov	r1, r9
 8005b52:	f7fa fcb9 	bl	80004c8 <__aeabi_dmul>
 8005b56:	4632      	mov	r2, r6
 8005b58:	463b      	mov	r3, r7
 8005b5a:	f7fa faff 	bl	800015c <__adddf3>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4620      	mov	r0, r4
 8005b64:	4629      	mov	r1, r5
 8005b66:	f7fa faf7 	bl	8000158 <__aeabi_dsub>
 8005b6a:	4642      	mov	r2, r8
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	f7fa faf3 	bl	8000158 <__aeabi_dsub>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	2000      	movs	r0, #0
 8005b78:	4939      	ldr	r1, [pc, #228]	; (8005c60 <__ieee754_pow+0xa08>)
 8005b7a:	f7fa faed 	bl	8000158 <__aeabi_dsub>
 8005b7e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005b82:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005b86:	da2b      	bge.n	8005be0 <__ieee754_pow+0x988>
 8005b88:	4652      	mov	r2, sl
 8005b8a:	f000 f9b5 	bl	8005ef8 <scalbn>
 8005b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b92:	f7ff bbf6 	b.w	8005382 <__ieee754_pow+0x12a>
 8005b96:	4b33      	ldr	r3, [pc, #204]	; (8005c64 <__ieee754_pow+0xa0c>)
 8005b98:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005b9c:	429f      	cmp	r7, r3
 8005b9e:	f77f af13 	ble.w	80059c8 <__ieee754_pow+0x770>
 8005ba2:	4b31      	ldr	r3, [pc, #196]	; (8005c68 <__ieee754_pow+0xa10>)
 8005ba4:	440b      	add	r3, r1
 8005ba6:	4303      	orrs	r3, r0
 8005ba8:	d00b      	beq.n	8005bc2 <__ieee754_pow+0x96a>
 8005baa:	a329      	add	r3, pc, #164	; (adr r3, 8005c50 <__ieee754_pow+0x9f8>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bb4:	f7fa fc88 	bl	80004c8 <__aeabi_dmul>
 8005bb8:	a325      	add	r3, pc, #148	; (adr r3, 8005c50 <__ieee754_pow+0x9f8>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f7ff bbe0 	b.w	8005382 <__ieee754_pow+0x12a>
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	462b      	mov	r3, r5
 8005bc6:	f7fa fac7 	bl	8000158 <__aeabi_dsub>
 8005bca:	4642      	mov	r2, r8
 8005bcc:	464b      	mov	r3, r9
 8005bce:	f7fa ff01 	bl	80009d4 <__aeabi_dcmpge>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	f43f aef8 	beq.w	80059c8 <__ieee754_pow+0x770>
 8005bd8:	e7e7      	b.n	8005baa <__ieee754_pow+0x952>
 8005bda:	f04f 0a00 	mov.w	sl, #0
 8005bde:	e71e      	b.n	8005a1e <__ieee754_pow+0x7c6>
 8005be0:	4621      	mov	r1, r4
 8005be2:	e7d4      	b.n	8005b8e <__ieee754_pow+0x936>
 8005be4:	f04f 0b00 	mov.w	fp, #0
 8005be8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005c60 <__ieee754_pow+0xa08>
 8005bec:	f7ff bb95 	b.w	800531a <__ieee754_pow+0xc2>
 8005bf0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005bf4:	f7ff bb91 	b.w	800531a <__ieee754_pow+0xc2>
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	f7ff bbc3 	b.w	8005386 <__ieee754_pow+0x12e>
 8005c00:	9200      	str	r2, [sp, #0]
 8005c02:	f7ff bb9f 	b.w	8005344 <__ieee754_pow+0xec>
 8005c06:	bf00      	nop
 8005c08:	652b82fe 	.word	0x652b82fe
 8005c0c:	3c971547 	.word	0x3c971547
 8005c10:	00000000 	.word	0x00000000
 8005c14:	3fe62e43 	.word	0x3fe62e43
 8005c18:	fefa39ef 	.word	0xfefa39ef
 8005c1c:	3fe62e42 	.word	0x3fe62e42
 8005c20:	0ca86c39 	.word	0x0ca86c39
 8005c24:	be205c61 	.word	0xbe205c61
 8005c28:	72bea4d0 	.word	0x72bea4d0
 8005c2c:	3e663769 	.word	0x3e663769
 8005c30:	c5d26bf1 	.word	0xc5d26bf1
 8005c34:	3ebbbd41 	.word	0x3ebbbd41
 8005c38:	af25de2c 	.word	0xaf25de2c
 8005c3c:	3f11566a 	.word	0x3f11566a
 8005c40:	16bebd93 	.word	0x16bebd93
 8005c44:	3f66c16c 	.word	0x3f66c16c
 8005c48:	5555553e 	.word	0x5555553e
 8005c4c:	3fc55555 	.word	0x3fc55555
 8005c50:	c2f8f359 	.word	0xc2f8f359
 8005c54:	01a56e1f 	.word	0x01a56e1f
 8005c58:	3fe00000 	.word	0x3fe00000
 8005c5c:	000fffff 	.word	0x000fffff
 8005c60:	3ff00000 	.word	0x3ff00000
 8005c64:	4090cbff 	.word	0x4090cbff
 8005c68:	3f6f3400 	.word	0x3f6f3400

08005c6c <__ieee754_sqrt>:
 8005c6c:	4b54      	ldr	r3, [pc, #336]	; (8005dc0 <__ieee754_sqrt+0x154>)
 8005c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c72:	438b      	bics	r3, r1
 8005c74:	4606      	mov	r6, r0
 8005c76:	460d      	mov	r5, r1
 8005c78:	460a      	mov	r2, r1
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	d10f      	bne.n	8005c9e <__ieee754_sqrt+0x32>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	f7fa fc21 	bl	80004c8 <__aeabi_dmul>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	f7fa fa65 	bl	800015c <__adddf3>
 8005c92:	4606      	mov	r6, r0
 8005c94:	460d      	mov	r5, r1
 8005c96:	4630      	mov	r0, r6
 8005c98:	4629      	mov	r1, r5
 8005c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9e:	2900      	cmp	r1, #0
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	dc0e      	bgt.n	8005cc4 <__ieee754_sqrt+0x58>
 8005ca6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005caa:	ea5c 0707 	orrs.w	r7, ip, r7
 8005cae:	d0f2      	beq.n	8005c96 <__ieee754_sqrt+0x2a>
 8005cb0:	b141      	cbz	r1, 8005cc4 <__ieee754_sqrt+0x58>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	f7fa fa4f 	bl	8000158 <__aeabi_dsub>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	f7fa fd2d 	bl	800071c <__aeabi_ddiv>
 8005cc2:	e7e6      	b.n	8005c92 <__ieee754_sqrt+0x26>
 8005cc4:	1512      	asrs	r2, r2, #20
 8005cc6:	d074      	beq.n	8005db2 <__ieee754_sqrt+0x146>
 8005cc8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005ccc:	07d5      	lsls	r5, r2, #31
 8005cce:	f04f 0500 	mov.w	r5, #0
 8005cd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005cd6:	bf48      	it	mi
 8005cd8:	0fd9      	lsrmi	r1, r3, #31
 8005cda:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005cde:	bf44      	itt	mi
 8005ce0:	005b      	lslmi	r3, r3, #1
 8005ce2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005ce6:	1051      	asrs	r1, r2, #1
 8005ce8:	0fda      	lsrs	r2, r3, #31
 8005cea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005cee:	4628      	mov	r0, r5
 8005cf0:	2216      	movs	r2, #22
 8005cf2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	1987      	adds	r7, r0, r6
 8005cfa:	42a7      	cmp	r7, r4
 8005cfc:	bfde      	ittt	le
 8005cfe:	19b8      	addle	r0, r7, r6
 8005d00:	1be4      	suble	r4, r4, r7
 8005d02:	19ad      	addle	r5, r5, r6
 8005d04:	0fdf      	lsrs	r7, r3, #31
 8005d06:	3a01      	subs	r2, #1
 8005d08:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d10:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005d14:	d1f0      	bne.n	8005cf8 <__ieee754_sqrt+0x8c>
 8005d16:	f04f 0c20 	mov.w	ip, #32
 8005d1a:	4696      	mov	lr, r2
 8005d1c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005d20:	4284      	cmp	r4, r0
 8005d22:	eb06 070e 	add.w	r7, r6, lr
 8005d26:	dc02      	bgt.n	8005d2e <__ieee754_sqrt+0xc2>
 8005d28:	d112      	bne.n	8005d50 <__ieee754_sqrt+0xe4>
 8005d2a:	429f      	cmp	r7, r3
 8005d2c:	d810      	bhi.n	8005d50 <__ieee754_sqrt+0xe4>
 8005d2e:	2f00      	cmp	r7, #0
 8005d30:	eb07 0e06 	add.w	lr, r7, r6
 8005d34:	da42      	bge.n	8005dbc <__ieee754_sqrt+0x150>
 8005d36:	f1be 0f00 	cmp.w	lr, #0
 8005d3a:	db3f      	blt.n	8005dbc <__ieee754_sqrt+0x150>
 8005d3c:	f100 0801 	add.w	r8, r0, #1
 8005d40:	1a24      	subs	r4, r4, r0
 8005d42:	4640      	mov	r0, r8
 8005d44:	429f      	cmp	r7, r3
 8005d46:	bf88      	it	hi
 8005d48:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8005d4c:	1bdb      	subs	r3, r3, r7
 8005d4e:	4432      	add	r2, r6
 8005d50:	0064      	lsls	r4, r4, #1
 8005d52:	f1bc 0c01 	subs.w	ip, ip, #1
 8005d56:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005d5a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005d5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d62:	d1dd      	bne.n	8005d20 <__ieee754_sqrt+0xb4>
 8005d64:	4323      	orrs	r3, r4
 8005d66:	d006      	beq.n	8005d76 <__ieee754_sqrt+0x10a>
 8005d68:	1c54      	adds	r4, r2, #1
 8005d6a:	bf0b      	itete	eq
 8005d6c:	4662      	moveq	r2, ip
 8005d6e:	3201      	addne	r2, #1
 8005d70:	3501      	addeq	r5, #1
 8005d72:	f022 0201 	bicne.w	r2, r2, #1
 8005d76:	106b      	asrs	r3, r5, #1
 8005d78:	0852      	lsrs	r2, r2, #1
 8005d7a:	07e8      	lsls	r0, r5, #31
 8005d7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005d80:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005d84:	bf48      	it	mi
 8005d86:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005d8a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005d8e:	4616      	mov	r6, r2
 8005d90:	e781      	b.n	8005c96 <__ieee754_sqrt+0x2a>
 8005d92:	0adc      	lsrs	r4, r3, #11
 8005d94:	3915      	subs	r1, #21
 8005d96:	055b      	lsls	r3, r3, #21
 8005d98:	2c00      	cmp	r4, #0
 8005d9a:	d0fa      	beq.n	8005d92 <__ieee754_sqrt+0x126>
 8005d9c:	02e6      	lsls	r6, r4, #11
 8005d9e:	d50a      	bpl.n	8005db6 <__ieee754_sqrt+0x14a>
 8005da0:	f1c2 0020 	rsb	r0, r2, #32
 8005da4:	fa23 f000 	lsr.w	r0, r3, r0
 8005da8:	1e55      	subs	r5, r2, #1
 8005daa:	4093      	lsls	r3, r2
 8005dac:	4304      	orrs	r4, r0
 8005dae:	1b4a      	subs	r2, r1, r5
 8005db0:	e78a      	b.n	8005cc8 <__ieee754_sqrt+0x5c>
 8005db2:	4611      	mov	r1, r2
 8005db4:	e7f0      	b.n	8005d98 <__ieee754_sqrt+0x12c>
 8005db6:	0064      	lsls	r4, r4, #1
 8005db8:	3201      	adds	r2, #1
 8005dba:	e7ef      	b.n	8005d9c <__ieee754_sqrt+0x130>
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	e7bf      	b.n	8005d40 <__ieee754_sqrt+0xd4>
 8005dc0:	7ff00000 	.word	0x7ff00000

08005dc4 <finite>:
 8005dc4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005dc8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8005dcc:	0fc0      	lsrs	r0, r0, #31
 8005dce:	4770      	bx	lr

08005dd0 <matherr>:
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	4770      	bx	lr

08005dd4 <nan>:
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	4901      	ldr	r1, [pc, #4]	; (8005ddc <nan+0x8>)
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	7ff80000 	.word	0x7ff80000

08005de0 <rint>:
 8005de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005de6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8005dea:	f1bc 0f13 	cmp.w	ip, #19
 8005dee:	4604      	mov	r4, r0
 8005df0:	460d      	mov	r5, r1
 8005df2:	460b      	mov	r3, r1
 8005df4:	4606      	mov	r6, r0
 8005df6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005dfa:	dc5a      	bgt.n	8005eb2 <rint+0xd2>
 8005dfc:	f1bc 0f00 	cmp.w	ip, #0
 8005e00:	da2b      	bge.n	8005e5a <rint+0x7a>
 8005e02:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005e06:	4302      	orrs	r2, r0
 8005e08:	d023      	beq.n	8005e52 <rint+0x72>
 8005e0a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005e0e:	4302      	orrs	r2, r0
 8005e10:	4256      	negs	r6, r2
 8005e12:	4316      	orrs	r6, r2
 8005e14:	0c4b      	lsrs	r3, r1, #17
 8005e16:	0b36      	lsrs	r6, r6, #12
 8005e18:	4934      	ldr	r1, [pc, #208]	; (8005eec <rint+0x10c>)
 8005e1a:	045b      	lsls	r3, r3, #17
 8005e1c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8005e20:	ea46 0503 	orr.w	r5, r6, r3
 8005e24:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005e28:	4602      	mov	r2, r0
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005e30:	4620      	mov	r0, r4
 8005e32:	4629      	mov	r1, r5
 8005e34:	f7fa f992 	bl	800015c <__adddf3>
 8005e38:	e9cd 0100 	strd	r0, r1, [sp]
 8005e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e40:	462b      	mov	r3, r5
 8005e42:	4622      	mov	r2, r4
 8005e44:	f7fa f988 	bl	8000158 <__aeabi_dsub>
 8005e48:	4604      	mov	r4, r0
 8005e4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e4e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	b003      	add	sp, #12
 8005e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5a:	4a25      	ldr	r2, [pc, #148]	; (8005ef0 <rint+0x110>)
 8005e5c:	fa42 f20c 	asr.w	r2, r2, ip
 8005e60:	4011      	ands	r1, r2
 8005e62:	4301      	orrs	r1, r0
 8005e64:	d0f5      	beq.n	8005e52 <rint+0x72>
 8005e66:	0852      	lsrs	r2, r2, #1
 8005e68:	ea05 0102 	and.w	r1, r5, r2
 8005e6c:	ea50 0601 	orrs.w	r6, r0, r1
 8005e70:	d00c      	beq.n	8005e8c <rint+0xac>
 8005e72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e76:	f1bc 0f13 	cmp.w	ip, #19
 8005e7a:	bf0c      	ite	eq
 8005e7c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005e80:	2600      	movne	r6, #0
 8005e82:	ea25 0202 	bic.w	r2, r5, r2
 8005e86:	fa43 f30c 	asr.w	r3, r3, ip
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	4917      	ldr	r1, [pc, #92]	; (8005eec <rint+0x10c>)
 8005e8e:	4632      	mov	r2, r6
 8005e90:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8005e94:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7fa f95e 	bl	800015c <__adddf3>
 8005ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	462b      	mov	r3, r5
 8005eac:	f7fa f954 	bl	8000158 <__aeabi_dsub>
 8005eb0:	e008      	b.n	8005ec4 <rint+0xe4>
 8005eb2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8005eb6:	dd08      	ble.n	8005eca <rint+0xea>
 8005eb8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8005ebc:	d1c9      	bne.n	8005e52 <rint+0x72>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	f7fa f94c 	bl	800015c <__adddf3>
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	460d      	mov	r5, r1
 8005ec8:	e7c3      	b.n	8005e52 <rint+0x72>
 8005eca:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8005ece:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed2:	40ca      	lsrs	r2, r1
 8005ed4:	4210      	tst	r0, r2
 8005ed6:	d0bc      	beq.n	8005e52 <rint+0x72>
 8005ed8:	0852      	lsrs	r2, r2, #1
 8005eda:	4210      	tst	r0, r2
 8005edc:	bf1f      	itttt	ne
 8005ede:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8005ee2:	ea20 0202 	bicne.w	r2, r0, r2
 8005ee6:	410e      	asrne	r6, r1
 8005ee8:	4316      	orrne	r6, r2
 8005eea:	e7cf      	b.n	8005e8c <rint+0xac>
 8005eec:	080060b0 	.word	0x080060b0
 8005ef0:	000fffff 	.word	0x000fffff
 8005ef4:	00000000 	.word	0x00000000

08005ef8 <scalbn>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	4616      	mov	r6, r2
 8005efc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f00:	4604      	mov	r4, r0
 8005f02:	460d      	mov	r5, r1
 8005f04:	460b      	mov	r3, r1
 8005f06:	b982      	cbnz	r2, 8005f2a <scalbn+0x32>
 8005f08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f0c:	4303      	orrs	r3, r0
 8005f0e:	d034      	beq.n	8005f7a <scalbn+0x82>
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <scalbn+0xd0>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	f7fa fad8 	bl	80004c8 <__aeabi_dmul>
 8005f18:	4b2c      	ldr	r3, [pc, #176]	; (8005fcc <scalbn+0xd4>)
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	429e      	cmp	r6, r3
 8005f1e:	460d      	mov	r5, r1
 8005f20:	da0d      	bge.n	8005f3e <scalbn+0x46>
 8005f22:	a325      	add	r3, pc, #148	; (adr r3, 8005fb8 <scalbn+0xc0>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	e01c      	b.n	8005f64 <scalbn+0x6c>
 8005f2a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005f2e:	42ba      	cmp	r2, r7
 8005f30:	d109      	bne.n	8005f46 <scalbn+0x4e>
 8005f32:	4602      	mov	r2, r0
 8005f34:	f7fa f912 	bl	800015c <__adddf3>
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	e01d      	b.n	8005f7a <scalbn+0x82>
 8005f3e:	460b      	mov	r3, r1
 8005f40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f44:	3a36      	subs	r2, #54	; 0x36
 8005f46:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005f4a:	4432      	add	r2, r6
 8005f4c:	428a      	cmp	r2, r1
 8005f4e:	dd0c      	ble.n	8005f6a <scalbn+0x72>
 8005f50:	4622      	mov	r2, r4
 8005f52:	462b      	mov	r3, r5
 8005f54:	a11a      	add	r1, pc, #104	; (adr r1, 8005fc0 <scalbn+0xc8>)
 8005f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f5a:	f000 f83b 	bl	8005fd4 <copysign>
 8005f5e:	a318      	add	r3, pc, #96	; (adr r3, 8005fc0 <scalbn+0xc8>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa fab0 	bl	80004c8 <__aeabi_dmul>
 8005f68:	e7e6      	b.n	8005f38 <scalbn+0x40>
 8005f6a:	2a00      	cmp	r2, #0
 8005f6c:	dd08      	ble.n	8005f80 <scalbn+0x88>
 8005f6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f76:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f80:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005f84:	da0b      	bge.n	8005f9e <scalbn+0xa6>
 8005f86:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005f8a:	429e      	cmp	r6, r3
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	462b      	mov	r3, r5
 8005f90:	dce0      	bgt.n	8005f54 <scalbn+0x5c>
 8005f92:	a109      	add	r1, pc, #36	; (adr r1, 8005fb8 <scalbn+0xc0>)
 8005f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f98:	f000 f81c 	bl	8005fd4 <copysign>
 8005f9c:	e7c1      	b.n	8005f22 <scalbn+0x2a>
 8005f9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fa2:	3236      	adds	r2, #54	; 0x36
 8005fa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fa8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fac:	4620      	mov	r0, r4
 8005fae:	4629      	mov	r1, r5
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <scalbn+0xd8>)
 8005fb4:	e7d6      	b.n	8005f64 <scalbn+0x6c>
 8005fb6:	bf00      	nop
 8005fb8:	c2f8f359 	.word	0xc2f8f359
 8005fbc:	01a56e1f 	.word	0x01a56e1f
 8005fc0:	8800759c 	.word	0x8800759c
 8005fc4:	7e37e43c 	.word	0x7e37e43c
 8005fc8:	43500000 	.word	0x43500000
 8005fcc:	ffff3cb0 	.word	0xffff3cb0
 8005fd0:	3c900000 	.word	0x3c900000

08005fd4 <copysign>:
 8005fd4:	b530      	push	{r4, r5, lr}
 8005fd6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	ea42 0503 	orr.w	r5, r2, r3
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	bd30      	pop	{r4, r5, pc}
	...

08005fe8 <_init>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr

08005ff4 <_fini>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr
