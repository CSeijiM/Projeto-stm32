
Acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006830  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001438  08006940  08006940  00016940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d78  08007d78  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08007d78  08007d78  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d78  08007d78  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d7c  08007d7c  00017d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  2000007c  08007dfc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08007dfc  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df25  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cca  00000000  00000000  0002dfca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  0002fc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  000309d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014798  00000000  00000000  00031640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000099d2  00000000  00000000  00045dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072157  00000000  00000000  0004f7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e28  00000000  00000000  000c197c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006928 	.word	0x08006928

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08006928 	.word	0x08006928

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001104:	2254      	movs	r2, #84	; 0x54
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <MPU6050_Init+0x1c>)
 800110a:	f004 f9b3 	bl	8005474 <memcpy>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000098 	.word	0x20000098

0800111c <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	4613      	mov	r3, r2
 800112a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 800112c:	23d0      	movs	r3, #208	; 0xd0
 800112e:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	b299      	uxth	r1, r3
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	230a      	movs	r3, #10
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <I2C_Read+0x4c>)
 8001144:	f002 f8aa 	bl	800329c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	b299      	uxth	r1, r3
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	b29a      	uxth	r2, r3
 8001150:	2364      	movs	r3, #100	; 0x64
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <I2C_Read+0x4c>)
 800115a:	f002 f99d 	bl	8003498 <HAL_I2C_Master_Receive>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000098 	.word	0x20000098

0800116c <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af02      	add	r7, sp, #8
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001184:	23d0      	movs	r3, #208	; 0xd0
 8001186:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	b299      	uxth	r1, r3
 800118c:	f107 020c 	add.w	r2, r7, #12
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2302      	movs	r3, #2
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <I2C_Write8+0x38>)
 8001198:	f002 f880 	bl	800329c <HAL_I2C_Master_Transmit>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000098 	.word	0x20000098

080011a8 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	206b      	movs	r0, #107	; 0x6b
 80011b8:	f7ff ffd8 	bl	800116c <I2C_Write8>
	HAL_Delay(100);
 80011bc:	2064      	movs	r0, #100	; 0x64
 80011be:	f001 fcb5 	bl	8002b2c <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	019b      	lsls	r3, r3, #6
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4313      	orrs	r3, r2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4619      	mov	r1, r3
 80011e8:	206b      	movs	r0, #107	; 0x6b
 80011ea:	f7ff ffbf 	bl	800116c <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f001 fc9c 	bl	8002b2c <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	78db      	ldrb	r3, [r3, #3]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	4619      	mov	r1, r3
 8001206:	201a      	movs	r0, #26
 8001208:	f7ff ffb0 	bl	800116c <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	785b      	ldrb	r3, [r3, #1]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f003 0318 	and.w	r3, r3, #24
 800121c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4619      	mov	r1, r3
 8001222:	201b      	movs	r0, #27
 8001224:	f7ff ffa2 	bl	800116c <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 0318 	and.w	r3, r3, #24
 8001238:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	4619      	mov	r1, r3
 800123e:	201c      	movs	r0, #28
 8001240:	f7ff ff94 	bl	800116c <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001244:	2004      	movs	r0, #4
 8001246:	f000 f857 	bl	80012f8 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	789b      	ldrb	r3, [r3, #2]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d81a      	bhi.n	8001288 <MPU6050_Config+0xe0>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <MPU6050_Config+0xb0>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	08001271 	.word	0x08001271
 8001260:	08001279 	.word	0x08001279
 8001264:	08001281 	.word	0x08001281
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MPU6050_Config+0x12c>)
 800126a:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <MPU6050_Config+0x130>)
 800126c:	601a      	str	r2, [r3, #0]
			break;
 800126e:	e00c      	b.n	800128a <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MPU6050_Config+0x12c>)
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <MPU6050_Config+0x134>)
 8001274:	601a      	str	r2, [r3, #0]
				break;
 8001276:	e008      	b.n	800128a <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MPU6050_Config+0x12c>)
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <MPU6050_Config+0x138>)
 800127c:	601a      	str	r2, [r3, #0]
			break;
 800127e:	e004      	b.n	800128a <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MPU6050_Config+0x12c>)
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MPU6050_Config+0x13c>)
 8001284:	601a      	str	r2, [r3, #0]
			break;
 8001286:	e000      	b.n	800128a <MPU6050_Config+0xe2>
		
		default:
			break;
 8001288:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d81a      	bhi.n	80012c8 <MPU6050_Config+0x120>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <MPU6050_Config+0xf0>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012a9 	.word	0x080012a9
 800129c:	080012b1 	.word	0x080012b1
 80012a0:	080012b9 	.word	0x080012b9
 80012a4:	080012c1 	.word	0x080012c1
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MPU6050_Config+0x140>)
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <MPU6050_Config+0x144>)
 80012ac:	601a      	str	r2, [r3, #0]
			break;
 80012ae:	e00c      	b.n	80012ca <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <MPU6050_Config+0x140>)
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <MPU6050_Config+0x148>)
 80012b4:	601a      	str	r2, [r3, #0]
				break;
 80012b6:	e008      	b.n	80012ca <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MPU6050_Config+0x140>)
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <MPU6050_Config+0x14c>)
 80012bc:	601a      	str	r2, [r3, #0]
			break;
 80012be:	e004      	b.n	80012ca <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MPU6050_Config+0x140>)
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <MPU6050_Config+0x130>)
 80012c4:	601a      	str	r2, [r3, #0]
			break;
 80012c6:	e000      	b.n	80012ca <MPU6050_Config+0x122>
		
		default:
			break;
 80012c8:	bf00      	nop
	}
	
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200000ec 	.word	0x200000ec
 80012d8:	3d7a0000 	.word	0x3d7a0000
 80012dc:	3dfa0000 	.word	0x3dfa0000
 80012e0:	3e7a0000 	.word	0x3e7a0000
 80012e4:	3efa0000 	.word	0x3efa0000
 80012e8:	200000f0 	.word	0x200000f0
 80012ec:	3bfa0000 	.word	0x3bfa0000
 80012f0:	3c7a0000 	.word	0x3c7a0000
 80012f4:	3cfa0000 	.word	0x3cfa0000

080012f8 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4619      	mov	r1, r3
 8001306:	2019      	movs	r0, #25
 8001308:	f7ff ff30 	bl	800116c <I2C_Write8>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	3301      	adds	r3, #1
 8001322:	2201      	movs	r2, #1
 8001324:	4619      	mov	r1, r3
 8001326:	203a      	movs	r0, #58	; 0x3a
 8001328:	f7ff fef8 	bl	800111c <I2C_Read>
	if((i2cBuf[1]&&0x01))
 800132c:	7f7b      	ldrb	r3, [r7, #29]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d04f      	beq.n	80013d2 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2206      	movs	r2, #6
 8001338:	4619      	mov	r1, r3
 800133a:	203b      	movs	r0, #59	; 0x3b
 800133c:	f7ff feee 	bl	800111c <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001340:	7d3b      	ldrb	r3, [r7, #20]
 8001342:	b29b      	uxth	r3, r3
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b29a      	uxth	r2, r3
 8001348:	7d7b      	ldrb	r3, [r7, #21]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4413      	add	r3, r2
 800134e:	b29b      	uxth	r3, r3
 8001350:	b21a      	sxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8001356:	7dbb      	ldrb	r3, [r7, #22]
 8001358:	b29b      	uxth	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b29a      	uxth	r2, r3
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	b29b      	uxth	r3, r3
 8001362:	4413      	add	r3, r2
 8001364:	b29b      	uxth	r3, r3
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 800136c:	7e3b      	ldrb	r3, [r7, #24]
 800136e:	b29b      	uxth	r3, r3
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b29a      	uxth	r2, r3
 8001374:	7e7b      	ldrb	r3, [r7, #25]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4413      	add	r3, r2
 800137a:	b29b      	uxth	r3, r3
 800137c:	b21a      	sxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2206      	movs	r2, #6
 8001388:	4619      	mov	r1, r3
 800138a:	2043      	movs	r0, #67	; 0x43
 800138c:	f7ff fec6 	bl	800111c <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001390:	7b3b      	ldrb	r3, [r7, #12]
 8001392:	b29b      	uxth	r3, r3
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b29a      	uxth	r2, r3
 8001398:	7b7b      	ldrb	r3, [r7, #13]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MPU6050_Get_Accel_RawData+0xc8>)
 80013a4:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MPU6050_Get_Accel_RawData+0xc8>)
 80013ba:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80013bc:	7c3b      	ldrb	r3, [r7, #16]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	7c7b      	ldrb	r3, [r7, #17]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <MPU6050_Get_Accel_RawData+0xc8>)
 80013d0:	809a      	strh	r2, [r3, #4]
	}
}
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000f4 	.word	0x200000f4

080013e0 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MPU6050_Get_Gyro_RawData+0x30>)
 80013ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MPU6050_Get_Gyro_RawData+0x30>)
 80013f4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <MPU6050_Get_Gyro_RawData+0x30>)
 80013fe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	809a      	strh	r2, [r3, #4]
	
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200000f4 	.word	0x200000f4
 8001414:	00000000 	.word	0x00000000

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f001 fb22 	bl	8002a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 fd62 	bl	8001eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 feae 	bl	8002188 <MX_GPIO_Init>
  MX_I2C1_Init();
 800142c:	f000 fda4 	bl	8001f78 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001430:	f000 fdd0 	bl	8001fd4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001434:	f000 fdfc 	bl	8002030 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001438:	f000 ff04 	bl	8002244 <SSD1306_Init>

  MPU6050_Init(&hi2c2);
 800143c:	4882      	ldr	r0, [pc, #520]	; (8001648 <main+0x230>)
 800143e:	f7ff fe5d 	bl	80010fc <MPU6050_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001442:	2100      	movs	r1, #0
 8001444:	4881      	ldr	r0, [pc, #516]	; (800164c <main+0x234>)
 8001446:	f003 fae7 	bl	8004a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800144a:	2104      	movs	r1, #4
 800144c:	487f      	ldr	r0, [pc, #508]	; (800164c <main+0x234>)
 800144e:	f003 fae3 	bl	8004a18 <HAL_TIM_PWM_Start>

  myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 8001452:	2301      	movs	r3, #1
 8001454:	70bb      	strb	r3, [r7, #2]
  myMpuConfig.ClockSource = Internal_8MHz;
 8001456:	2300      	movs	r3, #0
 8001458:	703b      	strb	r3, [r7, #0]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 800145a:	2301      	movs	r3, #1
 800145c:	70fb      	strb	r3, [r7, #3]
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 800145e:	2301      	movs	r3, #1
 8001460:	707b      	strb	r3, [r7, #1]
  myMpuConfig.Sleep_Mode_Bit = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	713b      	strb	r3, [r7, #4]
  MPU6050_Config(&myMpuConfig);
 8001466:	463b      	mov	r3, r7
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe9d 	bl	80011a8 <MPU6050_Config>

  //acc_error
  if(acc_error==0){
 800146e:	4b78      	ldr	r3, [pc, #480]	; (8001650 <main+0x238>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f040 80db 	bne.w	800162e <main+0x216>
	  for(i=0;i<200;i++){
 8001478:	4b76      	ldr	r3, [pc, #472]	; (8001654 <main+0x23c>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e0d1      	b.n	8001624 <main+0x20c>

		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8001480:	4875      	ldr	r0, [pc, #468]	; (8001658 <main+0x240>)
 8001482:	f7ff ff47 	bl	8001314 <MPU6050_Get_Accel_RawData>

		  acc_error_x+=atan(myAccelRaw.y/sqrt(pow(myAccelRaw.x,2)+pow(myAccelRaw.z,2)))*(180/3.141592654);
 8001486:	4b74      	ldr	r3, [pc, #464]	; (8001658 <main+0x240>)
 8001488:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe ffb1 	bl	80003f4 <__aeabi_i2d>
 8001492:	4604      	mov	r4, r0
 8001494:	460d      	mov	r5, r1
 8001496:	4b70      	ldr	r3, [pc, #448]	; (8001658 <main+0x240>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffa9 	bl	80003f4 <__aeabi_i2d>
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014aa:	f004 f9c3 	bl	8005834 <pow>
 80014ae:	4680      	mov	r8, r0
 80014b0:	4689      	mov	r9, r1
 80014b2:	4b69      	ldr	r3, [pc, #420]	; (8001658 <main+0x240>)
 80014b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ff9b 	bl	80003f4 <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c6:	f004 f9b5 	bl	8005834 <pow>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4640      	mov	r0, r8
 80014d0:	4649      	mov	r1, r9
 80014d2:	f7fe fe43 	bl	800015c <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f004 fb05 	bl	8005aec <sqrt>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7ff f917 	bl	800071c <__aeabi_ddiv>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	f004 f80f 	bl	8005518 <atan>
 80014fa:	a351      	add	r3, pc, #324	; (adr r3, 8001640 <main+0x228>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7fe ffe2 	bl	80004c8 <__aeabi_dmul>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4625      	mov	r5, r4
 800150a:	461c      	mov	r4, r3
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <main+0x244>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ff81 	bl	8000418 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fe1d 	bl	800015c <__adddf3>
 8001522:	4603      	mov	r3, r0
 8001524:	460c      	mov	r4, r1
 8001526:	4618      	mov	r0, r3
 8001528:	4621      	mov	r1, r4
 800152a:	f7ff fa7d 	bl	8000a28 <__aeabi_d2f>
 800152e:	4602      	mov	r2, r0
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <main+0x244>)
 8001532:	601a      	str	r2, [r3, #0]
		  acc_error_y+=atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654);
 8001534:	4b48      	ldr	r3, [pc, #288]	; (8001658 <main+0x240>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	425b      	negs	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ff59 	bl	80003f4 <__aeabi_i2d>
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	4b44      	ldr	r3, [pc, #272]	; (8001658 <main+0x240>)
 8001548:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff51 	bl	80003f4 <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155a:	f004 f96b 	bl	8005834 <pow>
 800155e:	4680      	mov	r8, r0
 8001560:	4689      	mov	r9, r1
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <main+0x240>)
 8001564:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff43 	bl	80003f4 <__aeabi_i2d>
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001576:	f004 f95d 	bl	8005834 <pow>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4640      	mov	r0, r8
 8001580:	4649      	mov	r1, r9
 8001582:	f7fe fdeb 	bl	800015c <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f004 faad 	bl	8005aec <sqrt>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4620      	mov	r0, r4
 8001598:	4629      	mov	r1, r5
 800159a:	f7ff f8bf 	bl	800071c <__aeabi_ddiv>
 800159e:	4603      	mov	r3, r0
 80015a0:	460c      	mov	r4, r1
 80015a2:	4618      	mov	r0, r3
 80015a4:	4621      	mov	r1, r4
 80015a6:	f003 ffb7 	bl	8005518 <atan>
 80015aa:	a325      	add	r3, pc, #148	; (adr r3, 8001640 <main+0x228>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe ff8a 	bl	80004c8 <__aeabi_dmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	4625      	mov	r5, r4
 80015ba:	461c      	mov	r4, r3
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <main+0x248>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff29 	bl	8000418 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fdc5 	bl	800015c <__adddf3>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	4618      	mov	r0, r3
 80015d8:	4621      	mov	r1, r4
 80015da:	f7ff fa25 	bl	8000a28 <__aeabi_d2f>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <main+0x248>)
 80015e2:	601a      	str	r2, [r3, #0]
		  if(i==199){
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <main+0x23c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2bc7      	cmp	r3, #199	; 0xc7
 80015ea:	d116      	bne.n	800161a <main+0x202>
			  acc_error_x/=200;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <main+0x244>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	491c      	ldr	r1, [pc, #112]	; (8001664 <main+0x24c>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fc2a 	bl	8000e4c <__aeabi_fdiv>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <main+0x244>)
 80015fe:	601a      	str	r2, [r3, #0]
			  acc_error_y/=200;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <main+0x248>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4917      	ldr	r1, [pc, #92]	; (8001664 <main+0x24c>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fc20 	bl	8000e4c <__aeabi_fdiv>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <main+0x248>)
 8001612:	601a      	str	r2, [r3, #0]
			  acc_error=1;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <main+0x238>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]
	  for(i=0;i<200;i++){
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <main+0x23c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <main+0x23c>)
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <main+0x23c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2bc7      	cmp	r3, #199	; 0xc7
 800162a:	f77f af29 	ble.w	8001480 <main+0x68>
		  }
	  }
  }
  //gyro error
  if(gyro_error==0){
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <main+0x250>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 8083 	bne.w	800173e <main+0x326>
	  for(i=0;i<200;i++){
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <main+0x23c>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e07a      	b.n	8001736 <main+0x31e>
 8001640:	1a53b118 	.word	0x1a53b118
 8001644:	404ca5dc 	.word	0x404ca5dc
 8001648:	200005b4 	.word	0x200005b4
 800164c:	20000628 	.word	0x20000628
 8001650:	20000150 	.word	0x20000150
 8001654:	20000610 	.word	0x20000610
 8001658:	20000674 	.word	0x20000674
 800165c:	200000fc 	.word	0x200000fc
 8001660:	20000100 	.word	0x20000100
 8001664:	43480000 	.word	0x43480000
 8001668:	20000154 	.word	0x20000154
		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 800166c:	48c0      	ldr	r0, [pc, #768]	; (8001970 <main+0x558>)
 800166e:	f7ff feb7 	bl	80013e0 <MPU6050_Get_Gyro_RawData>

		  gyro_error_x+=(myGyroRaw.x/65.5);
 8001672:	4bc0      	ldr	r3, [pc, #768]	; (8001974 <main+0x55c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fece 	bl	8000418 <__aeabi_f2d>
 800167c:	4604      	mov	r4, r0
 800167e:	460d      	mov	r5, r1
 8001680:	4bbb      	ldr	r3, [pc, #748]	; (8001970 <main+0x558>)
 8001682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe feb4 	bl	80003f4 <__aeabi_i2d>
 800168c:	a3b0      	add	r3, pc, #704	; (adr r3, 8001950 <main+0x538>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7ff f843 	bl	800071c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4620      	mov	r0, r4
 800169c:	4629      	mov	r1, r5
 800169e:	f7fe fd5d 	bl	800015c <__adddf3>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	4618      	mov	r0, r3
 80016a8:	4621      	mov	r1, r4
 80016aa:	f7ff f9bd 	bl	8000a28 <__aeabi_d2f>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4bb0      	ldr	r3, [pc, #704]	; (8001974 <main+0x55c>)
 80016b2:	601a      	str	r2, [r3, #0]
		  gyro_error_y+=(myGyroRaw.y/65.5);
 80016b4:	4bb0      	ldr	r3, [pc, #704]	; (8001978 <main+0x560>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fead 	bl	8000418 <__aeabi_f2d>
 80016be:	4604      	mov	r4, r0
 80016c0:	460d      	mov	r5, r1
 80016c2:	4bab      	ldr	r3, [pc, #684]	; (8001970 <main+0x558>)
 80016c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fe93 	bl	80003f4 <__aeabi_i2d>
 80016ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8001950 <main+0x538>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7ff f822 	bl	800071c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fd3c 	bl	800015c <__adddf3>
 80016e4:	4603      	mov	r3, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	4618      	mov	r0, r3
 80016ea:	4621      	mov	r1, r4
 80016ec:	f7ff f99c 	bl	8000a28 <__aeabi_d2f>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4ba1      	ldr	r3, [pc, #644]	; (8001978 <main+0x560>)
 80016f4:	601a      	str	r2, [r3, #0]
		  if(i==199){
 80016f6:	4ba1      	ldr	r3, [pc, #644]	; (800197c <main+0x564>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2bc7      	cmp	r3, #199	; 0xc7
 80016fc:	d116      	bne.n	800172c <main+0x314>
			  gyro_error_x/=200;
 80016fe:	4b9d      	ldr	r3, [pc, #628]	; (8001974 <main+0x55c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	499f      	ldr	r1, [pc, #636]	; (8001980 <main+0x568>)
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fba1 	bl	8000e4c <__aeabi_fdiv>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b99      	ldr	r3, [pc, #612]	; (8001974 <main+0x55c>)
 8001710:	601a      	str	r2, [r3, #0]
			  gyro_error_y/=200;
 8001712:	4b99      	ldr	r3, [pc, #612]	; (8001978 <main+0x560>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	499a      	ldr	r1, [pc, #616]	; (8001980 <main+0x568>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fb97 	bl	8000e4c <__aeabi_fdiv>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b95      	ldr	r3, [pc, #596]	; (8001978 <main+0x560>)
 8001724:	601a      	str	r2, [r3, #0]
			  gyro_error=1;
 8001726:	4b97      	ldr	r3, [pc, #604]	; (8001984 <main+0x56c>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
	  for(i=0;i<200;i++){
 800172c:	4b93      	ldr	r3, [pc, #588]	; (800197c <main+0x564>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a92      	ldr	r2, [pc, #584]	; (800197c <main+0x564>)
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b91      	ldr	r3, [pc, #580]	; (800197c <main+0x564>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2bc7      	cmp	r3, #199	; 0xc7
 800173c:	dd96      	ble.n	800166c <main+0x254>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GetTick()-time_velocity_initial>1){
 800173e:	f001 f9eb 	bl	8002b18 <HAL_GetTick>
 8001742:	4603      	mov	r3, r0
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fa75 	bl	8000c34 <__aeabi_ui2f>
 800174a:	4602      	mov	r2, r0
 800174c:	4b8e      	ldr	r3, [pc, #568]	; (8001988 <main+0x570>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	4610      	mov	r0, r2
 8001754:	f7ff f9bc 	bl	8000ad0 <__aeabi_fsub>
 8001758:	4603      	mov	r3, r0
 800175a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc7c 	bl	800105c <__aeabi_fcmpgt>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8130 	beq.w	80019cc <main+0x5b4>
		  time_velocity_initial=HAL_GetTick();
 800176c:	f001 f9d4 	bl	8002b18 <HAL_GetTick>
 8001770:	4603      	mov	r3, r0
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fa5e 	bl	8000c34 <__aeabi_ui2f>
 8001778:	4602      	mov	r2, r0
 800177a:	4b83      	ldr	r3, [pc, #524]	; (8001988 <main+0x570>)
 800177c:	601a      	str	r2, [r3, #0]

		  timePrev = time;
 800177e:	4b83      	ldr	r3, [pc, #524]	; (800198c <main+0x574>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a83      	ldr	r2, [pc, #524]	; (8001990 <main+0x578>)
 8001784:	6013      	str	r3, [r2, #0]
		  time = HAL_GetTick();
 8001786:	f001 f9c7 	bl	8002b18 <HAL_GetTick>
 800178a:	4603      	mov	r3, r0
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fa51 	bl	8000c34 <__aeabi_ui2f>
 8001792:	4602      	mov	r2, r0
 8001794:	4b7d      	ldr	r3, [pc, #500]	; (800198c <main+0x574>)
 8001796:	601a      	str	r2, [r3, #0]
		  elapsed = (time - timePrev) / 1000;
 8001798:	4b7c      	ldr	r3, [pc, #496]	; (800198c <main+0x574>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <main+0x578>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7ff f994 	bl	8000ad0 <__aeabi_fsub>
 80017a8:	4603      	mov	r3, r0
 80017aa:	497a      	ldr	r1, [pc, #488]	; (8001994 <main+0x57c>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fb4d 	bl	8000e4c <__aeabi_fdiv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b78      	ldr	r3, [pc, #480]	; (8001998 <main+0x580>)
 80017b8:	601a      	str	r2, [r3, #0]

		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 80017ba:	486d      	ldr	r0, [pc, #436]	; (8001970 <main+0x558>)
 80017bc:	f7ff fe10 	bl	80013e0 <MPU6050_Get_Gyro_RawData>

		  //gyro_angle_x =  ((myGyroRaw.x/65.5) - gyro_error_x)*elapsed;
		  gyro_angle_y =  ((myGyroRaw.y/65.5) - gyro_error_y)*elapsed;
 80017c0:	4b6b      	ldr	r3, [pc, #428]	; (8001970 <main+0x558>)
 80017c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe14 	bl	80003f4 <__aeabi_i2d>
 80017cc:	a360      	add	r3, pc, #384	; (adr r3, 8001950 <main+0x538>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ffa3 	bl	800071c <__aeabi_ddiv>
 80017d6:	4603      	mov	r3, r0
 80017d8:	460c      	mov	r4, r1
 80017da:	4625      	mov	r5, r4
 80017dc:	461c      	mov	r4, r3
 80017de:	4b66      	ldr	r3, [pc, #408]	; (8001978 <main+0x560>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe18 	bl	8000418 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe fcb2 	bl	8000158 <__aeabi_dsub>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	4625      	mov	r5, r4
 80017fa:	461c      	mov	r4, r3
 80017fc:	4b66      	ldr	r3, [pc, #408]	; (8001998 <main+0x580>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe09 	bl	8000418 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7fe fe5b 	bl	80004c8 <__aeabi_dmul>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	4618      	mov	r0, r3
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff f905 	bl	8000a28 <__aeabi_d2f>
 800181e:	4602      	mov	r2, r0
 8001820:	4b5e      	ldr	r3, [pc, #376]	; (800199c <main+0x584>)
 8001822:	601a      	str	r2, [r3, #0]

		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8001824:	485e      	ldr	r0, [pc, #376]	; (80019a0 <main+0x588>)
 8001826:	f7ff fd75 	bl	8001314 <MPU6050_Get_Accel_RawData>

		 // acc_angle_x = atan(myAccelRaw.y/sqrt(pow(myAccelRaw.x,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_x;
		  acc_angle_y = atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_y;
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <main+0x588>)
 800182c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001830:	425b      	negs	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fdde 	bl	80003f4 <__aeabi_i2d>
 8001838:	4604      	mov	r4, r0
 800183a:	460d      	mov	r5, r1
 800183c:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <main+0x588>)
 800183e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fdd6 	bl	80003f4 <__aeabi_i2d>
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001850:	f003 fff0 	bl	8005834 <pow>
 8001854:	4680      	mov	r8, r0
 8001856:	4689      	mov	r9, r1
 8001858:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <main+0x588>)
 800185a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fdc8 	bl	80003f4 <__aeabi_i2d>
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186c:	f003 ffe2 	bl	8005834 <pow>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4640      	mov	r0, r8
 8001876:	4649      	mov	r1, r9
 8001878:	f7fe fc70 	bl	800015c <__adddf3>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f004 f932 	bl	8005aec <sqrt>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe ff44 	bl	800071c <__aeabi_ddiv>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	4618      	mov	r0, r3
 800189a:	4621      	mov	r1, r4
 800189c:	f003 fe3c 	bl	8005518 <atan>
 80018a0:	a32d      	add	r3, pc, #180	; (adr r3, 8001958 <main+0x540>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fe0f 	bl	80004c8 <__aeabi_dmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	4625      	mov	r5, r4
 80018b0:	461c      	mov	r4, r3
 80018b2:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <main+0x58c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fdae 	bl	8000418 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fc48 	bl	8000158 <__aeabi_dsub>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	4618      	mov	r0, r3
 80018ce:	4621      	mov	r1, r4
 80018d0:	f7ff f8aa 	bl	8000a28 <__aeabi_d2f>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <main+0x590>)
 80018d8:	601a      	str	r2, [r3, #0]

		  //final_angle_x = 0.98*(final_angle_x + gyro_angle_x) + 0.02*acc_angle_x;
		  final_angle_y_init = 0.98*(final_angle_y_init + gyro_angle_y) + 0.02*acc_angle_y; // calcula angulo inicial (graus)
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <main+0x594>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b2f      	ldr	r3, [pc, #188]	; (800199c <main+0x584>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7ff f8f5 	bl	8000ad4 <__addsf3>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fd93 	bl	8000418 <__aeabi_f2d>
 80018f2:	a31b      	add	r3, pc, #108	; (adr r3, 8001960 <main+0x548>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fde6 	bl	80004c8 <__aeabi_dmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	4625      	mov	r5, r4
 8001902:	461c      	mov	r4, r3
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <main+0x590>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fd85 	bl	8000418 <__aeabi_f2d>
 800190e:	a316      	add	r3, pc, #88	; (adr r3, 8001968 <main+0x550>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fdd8 	bl	80004c8 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fc1c 	bl	800015c <__adddf3>
 8001924:	4603      	mov	r3, r0
 8001926:	460c      	mov	r4, r1
 8001928:	4618      	mov	r0, r3
 800192a:	4621      	mov	r1, r4
 800192c:	f7ff f87c 	bl	8000a28 <__aeabi_d2f>
 8001930:	4602      	mov	r2, r0
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <main+0x594>)
 8001934:	601a      	str	r2, [r3, #0]

		  erro_init = final_angle_y_init - setpoint;
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <main+0x594>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f8c5 	bl	8000ad0 <__aeabi_fsub>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	e031      	b.n	80019b0 <main+0x598>
 800194c:	f3af 8000 	nop.w
 8001950:	00000000 	.word	0x00000000
 8001954:	40506000 	.word	0x40506000
 8001958:	1a53b118 	.word	0x1a53b118
 800195c:	404ca5dc 	.word	0x404ca5dc
 8001960:	f5c28f5c 	.word	0xf5c28f5c
 8001964:	3fef5c28 	.word	0x3fef5c28
 8001968:	47ae147b 	.word	0x47ae147b
 800196c:	3f947ae1 	.word	0x3f947ae1
 8001970:	20000608 	.word	0x20000608
 8001974:	20000104 	.word	0x20000104
 8001978:	20000108 	.word	0x20000108
 800197c:	20000610 	.word	0x20000610
 8001980:	43480000 	.word	0x43480000
 8001984:	20000154 	.word	0x20000154
 8001988:	20000140 	.word	0x20000140
 800198c:	20000110 	.word	0x20000110
 8001990:	2000010c 	.word	0x2000010c
 8001994:	447a0000 	.word	0x447a0000
 8001998:	20000114 	.word	0x20000114
 800199c:	20000118 	.word	0x20000118
 80019a0:	20000674 	.word	0x20000674
 80019a4:	20000100 	.word	0x20000100
 80019a8:	2000011c 	.word	0x2000011c
 80019ac:	20000120 	.word	0x20000120
 80019b0:	4bbd      	ldr	r3, [pc, #756]	; (8001ca8 <main+0x890>)
 80019b2:	601a      	str	r2, [r3, #0]
		  erro_integrado+=erro_init;
 80019b4:	4bbd      	ldr	r3, [pc, #756]	; (8001cac <main+0x894>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4bbb      	ldr	r3, [pc, #748]	; (8001ca8 <main+0x890>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7ff f888 	bl	8000ad4 <__addsf3>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4bb8      	ldr	r3, [pc, #736]	; (8001cac <main+0x894>)
 80019ca:	601a      	str	r2, [r3, #0]
	  }

	  if(HAL_GetTick()-time_velocity_final>2){
 80019cc:	f001 f8a4 	bl	8002b18 <HAL_GetTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f92e 	bl	8000c34 <__aeabi_ui2f>
 80019d8:	4602      	mov	r2, r0
 80019da:	4bb5      	ldr	r3, [pc, #724]	; (8001cb0 <main+0x898>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f7ff f875 	bl	8000ad0 <__aeabi_fsub>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb35 	bl	800105c <__aeabi_fcmpgt>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 810b 	beq.w	8001c10 <main+0x7f8>
		  time_velocity_final=HAL_GetTick();
 80019fa:	f001 f88d 	bl	8002b18 <HAL_GetTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f917 	bl	8000c34 <__aeabi_ui2f>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4ba9      	ldr	r3, [pc, #676]	; (8001cb0 <main+0x898>)
 8001a0a:	601a      	str	r2, [r3, #0]

		  timePrev = time;
 8001a0c:	4ba9      	ldr	r3, [pc, #676]	; (8001cb4 <main+0x89c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4aa9      	ldr	r2, [pc, #676]	; (8001cb8 <main+0x8a0>)
 8001a12:	6013      	str	r3, [r2, #0]
		  time = HAL_GetTick();
 8001a14:	f001 f880 	bl	8002b18 <HAL_GetTick>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f90a 	bl	8000c34 <__aeabi_ui2f>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4ba4      	ldr	r3, [pc, #656]	; (8001cb4 <main+0x89c>)
 8001a24:	601a      	str	r2, [r3, #0]
		  elapsed = (time - timePrev) / 1000;
 8001a26:	4ba3      	ldr	r3, [pc, #652]	; (8001cb4 <main+0x89c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4ba3      	ldr	r3, [pc, #652]	; (8001cb8 <main+0x8a0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4610      	mov	r0, r2
 8001a32:	f7ff f84d 	bl	8000ad0 <__aeabi_fsub>
 8001a36:	4603      	mov	r3, r0
 8001a38:	49a0      	ldr	r1, [pc, #640]	; (8001cbc <main+0x8a4>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fa06 	bl	8000e4c <__aeabi_fdiv>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b9e      	ldr	r3, [pc, #632]	; (8001cc0 <main+0x8a8>)
 8001a46:	601a      	str	r2, [r3, #0]

		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001a48:	489e      	ldr	r0, [pc, #632]	; (8001cc4 <main+0x8ac>)
 8001a4a:	f7ff fcc9 	bl	80013e0 <MPU6050_Get_Gyro_RawData>

		  gyro_angle_y =  ((myGyroRaw.y/65.5) - gyro_error_y)*elapsed;
 8001a4e:	4b9d      	ldr	r3, [pc, #628]	; (8001cc4 <main+0x8ac>)
 8001a50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fccd 	bl	80003f4 <__aeabi_i2d>
 8001a5a:	a389      	add	r3, pc, #548	; (adr r3, 8001c80 <main+0x868>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fe5c 	bl	800071c <__aeabi_ddiv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	4625      	mov	r5, r4
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <main+0x8b0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fcd1 	bl	8000418 <__aeabi_f2d>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	f7fe fb6b 	bl	8000158 <__aeabi_dsub>
 8001a82:	4603      	mov	r3, r0
 8001a84:	460c      	mov	r4, r1
 8001a86:	4625      	mov	r5, r4
 8001a88:	461c      	mov	r4, r3
 8001a8a:	4b8d      	ldr	r3, [pc, #564]	; (8001cc0 <main+0x8a8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fcc2 	bl	8000418 <__aeabi_f2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fd14 	bl	80004c8 <__aeabi_dmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	f7fe ffbe 	bl	8000a28 <__aeabi_d2f>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b87      	ldr	r3, [pc, #540]	; (8001ccc <main+0x8b4>)
 8001ab0:	601a      	str	r2, [r3, #0]

		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8001ab2:	4887      	ldr	r0, [pc, #540]	; (8001cd0 <main+0x8b8>)
 8001ab4:	f7ff fc2e 	bl	8001314 <MPU6050_Get_Accel_RawData>

		  acc_angle_y = atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_y;
 8001ab8:	4b85      	ldr	r3, [pc, #532]	; (8001cd0 <main+0x8b8>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	425b      	negs	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fc97 	bl	80003f4 <__aeabi_i2d>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	460d      	mov	r5, r1
 8001aca:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <main+0x8b8>)
 8001acc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fc8f 	bl	80003f4 <__aeabi_i2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ade:	f003 fea9 	bl	8005834 <pow>
 8001ae2:	4680      	mov	r8, r0
 8001ae4:	4689      	mov	r9, r1
 8001ae6:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <main+0x8b8>)
 8001ae8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fc81 	bl	80003f4 <__aeabi_i2d>
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afa:	f003 fe9b 	bl	8005834 <pow>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4640      	mov	r0, r8
 8001b04:	4649      	mov	r1, r9
 8001b06:	f7fe fb29 	bl	800015c <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f003 ffeb 	bl	8005aec <sqrt>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fdfd 	bl	800071c <__aeabi_ddiv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f003 fcf5 	bl	8005518 <atan>
 8001b2e:	a356      	add	r3, pc, #344	; (adr r3, 8001c88 <main+0x870>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fcc8 	bl	80004c8 <__aeabi_dmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	4625      	mov	r5, r4
 8001b3e:	461c      	mov	r4, r3
 8001b40:	4b64      	ldr	r3, [pc, #400]	; (8001cd4 <main+0x8bc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fc67 	bl	8000418 <__aeabi_f2d>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4620      	mov	r0, r4
 8001b50:	4629      	mov	r1, r5
 8001b52:	f7fe fb01 	bl	8000158 <__aeabi_dsub>
 8001b56:	4603      	mov	r3, r0
 8001b58:	460c      	mov	r4, r1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	f7fe ff63 	bl	8000a28 <__aeabi_d2f>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <main+0x8c0>)
 8001b66:	601a      	str	r2, [r3, #0]

		  final_angle_y_final = 0.98*(final_angle_y_final + gyro_angle_y) + 0.02*acc_angle_y; // calcula angulo final (graus)
 8001b68:	4b5c      	ldr	r3, [pc, #368]	; (8001cdc <main+0x8c4>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b57      	ldr	r3, [pc, #348]	; (8001ccc <main+0x8b4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f7fe ffae 	bl	8000ad4 <__addsf3>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc4c 	bl	8000418 <__aeabi_f2d>
 8001b80:	a343      	add	r3, pc, #268	; (adr r3, 8001c90 <main+0x878>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe fc9f 	bl	80004c8 <__aeabi_dmul>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	4625      	mov	r5, r4
 8001b90:	461c      	mov	r4, r3
 8001b92:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <main+0x8c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc3e 	bl	8000418 <__aeabi_f2d>
 8001b9c:	a33e      	add	r3, pc, #248	; (adr r3, 8001c98 <main+0x880>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fc91 	bl	80004c8 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fad5 	bl	800015c <__adddf3>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	4621      	mov	r1, r4
 8001bba:	f7fe ff35 	bl	8000a28 <__aeabi_d2f>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <main+0x8c4>)
 8001bc2:	601a      	str	r2, [r3, #0]

		  erro_final = final_angle_y_final - setpoint;
 8001bc4:	4b45      	ldr	r3, [pc, #276]	; (8001cdc <main+0x8c4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe ff7e 	bl	8000ad0 <__aeabi_fsub>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <main+0x8c8>)
 8001bda:	601a      	str	r2, [r3, #0]
		  erro_derivado = (erro_final-erro_init)/0.001;
 8001bdc:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <main+0x8c8>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <main+0x890>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f7fe ff72 	bl	8000ad0 <__aeabi_fsub>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc12 	bl	8000418 <__aeabi_f2d>
 8001bf4:	a32a      	add	r3, pc, #168	; (adr r3, 8001ca0 <main+0x888>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fd8f 	bl	800071c <__aeabi_ddiv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	4618      	mov	r0, r3
 8001c04:	4621      	mov	r1, r4
 8001c06:	f7fe ff0f 	bl	8000a28 <__aeabi_d2f>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <main+0x8cc>)
 8001c0e:	601a      	str	r2, [r3, #0]

	  }

	  if(HAL_GetTick()-time_PID>5){
 8001c10:	f000 ff82 	bl	8002b18 <HAL_GetTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f80c 	bl	8000c34 <__aeabi_ui2f>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <main+0x8d0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4619      	mov	r1, r3
 8001c24:	4610      	mov	r0, r2
 8001c26:	f7fe ff53 	bl	8000ad0 <__aeabi_fsub>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	492f      	ldr	r1, [pc, #188]	; (8001cec <main+0x8d4>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fa14 	bl	800105c <__aeabi_fcmpgt>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8081 	beq.w	8001d3e <main+0x926>
		  time_PID=HAL_GetTick();
 8001c3c:	f000 ff6c 	bl	8002b18 <HAL_GetTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fff6 	bl	8000c34 <__aeabi_ui2f>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <main+0x8d0>)
 8001c4c:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // pisca o led
 8001c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c52:	4827      	ldr	r0, [pc, #156]	; (8001cf0 <main+0x8d8>)
 8001c54:	f001 f9e2 	bl	800301c <HAL_GPIO_TogglePin>

		  saida = kp*erro_init + ki*erro_integrado + kd*erro_derivado; // devo atualizar o calculo.
 8001c58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <main+0x890>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f7ff f83e 	bl	8000ce4 <__aeabi_fmul>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461c      	mov	r4, r3
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <main+0x8dc>)
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <main+0x894>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f7ff f835 	bl	8000ce4 <__aeabi_fmul>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	e03b      	b.n	8001cf8 <main+0x8e0>
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40506000 	.word	0x40506000
 8001c88:	1a53b118 	.word	0x1a53b118
 8001c8c:	404ca5dc 	.word	0x404ca5dc
 8001c90:	f5c28f5c 	.word	0xf5c28f5c
 8001c94:	3fef5c28 	.word	0x3fef5c28
 8001c98:	47ae147b 	.word	0x47ae147b
 8001c9c:	3f947ae1 	.word	0x3f947ae1
 8001ca0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ca4:	3f50624d 	.word	0x3f50624d
 8001ca8:	2000012c 	.word	0x2000012c
 8001cac:	20000138 	.word	0x20000138
 8001cb0:	20000144 	.word	0x20000144
 8001cb4:	20000110 	.word	0x20000110
 8001cb8:	2000010c 	.word	0x2000010c
 8001cbc:	447a0000 	.word	0x447a0000
 8001cc0:	20000114 	.word	0x20000114
 8001cc4:	20000608 	.word	0x20000608
 8001cc8:	20000108 	.word	0x20000108
 8001ccc:	20000118 	.word	0x20000118
 8001cd0:	20000674 	.word	0x20000674
 8001cd4:	20000100 	.word	0x20000100
 8001cd8:	2000011c 	.word	0x2000011c
 8001cdc:	20000124 	.word	0x20000124
 8001ce0:	20000130 	.word	0x20000130
 8001ce4:	2000013c 	.word	0x2000013c
 8001ce8:	20000128 	.word	0x20000128
 8001cec:	40a00000 	.word	0x40a00000
 8001cf0:	40011000 	.word	0x40011000
 8001cf4:	3a83126f 	.word	0x3a83126f
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7fe feeb 	bl	8000ad4 <__addsf3>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461c      	mov	r4, r3
 8001d02:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <main+0xa94>)
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <main+0xa98>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7fe ffea 	bl	8000ce4 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7fe fedd 	bl	8000ad4 <__addsf3>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <main+0xa9c>)
 8001d20:	601a      	str	r2, [r3, #0]
		  saida *=(1024/90);
 8001d22:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <main+0xa9c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4964      	ldr	r1, [pc, #400]	; (8001eb8 <main+0xaa0>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ffdb 	bl	8000ce4 <__aeabi_fmul>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b60      	ldr	r3, [pc, #384]	; (8001eb4 <main+0xa9c>)
 8001d34:	601a      	str	r2, [r3, #0]
		  erro_integrado = 0;
 8001d36:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <main+0xaa4>)
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
	  }
	  if(HAL_GetTick()-time_pwm>1){
 8001d3e:	f000 feeb 	bl	8002b18 <HAL_GetTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe ff75 	bl	8000c34 <__aeabi_ui2f>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <main+0xaa8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f7fe febc 	bl	8000ad0 <__aeabi_fsub>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f97c 	bl	800105c <__aeabi_fcmpgt>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d020      	beq.n	8001dac <main+0x994>
		  time_pwm=HAL_GetTick();
 8001d6a:	f000 fed5 	bl	8002b18 <HAL_GetTick>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ff5f 	bl	8000c34 <__aeabi_ui2f>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b51      	ldr	r3, [pc, #324]	; (8001ec0 <main+0xaa8>)
 8001d7a:	601a      	str	r2, [r3, #0]

		  if(saida<0){
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <main+0xa9c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f94b 	bl	8001020 <__aeabi_fcmplt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <main+0x984>
			  saida*=-1;
 8001d90:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <main+0xa9c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d98:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <main+0xa9c>)
 8001d9a:	6013      	str	r3, [r2, #0]
		  }
		  TIM1->CCR1 = saida;
 8001d9c:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <main+0xa9c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4c48      	ldr	r4, [pc, #288]	; (8001ec4 <main+0xaac>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f98a 	bl	80010bc <__aeabi_f2uiz>
 8001da8:	4603      	mov	r3, r0
 8001daa:	6363      	str	r3, [r4, #52]	; 0x34

	  }
	  if(HAL_GetTick()-now_display > 100){
 8001dac:	f000 feb4 	bl	8002b18 <HAL_GetTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe ff3e 	bl	8000c34 <__aeabi_ui2f>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <main+0xab0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f7fe fe85 	bl	8000ad0 <__aeabi_fsub>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4940      	ldr	r1, [pc, #256]	; (8001ecc <main+0xab4>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f946 	bl	800105c <__aeabi_fcmpgt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d068      	beq.n	8001ea8 <main+0xa90>
		  now_display = HAL_GetTick();
 8001dd6:	f000 fe9f 	bl	8002b18 <HAL_GetTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ff29 	bl	8000c34 <__aeabi_ui2f>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <main+0xab0>)
 8001de6:	601a      	str	r2, [r3, #0]
		  itoa(final_angle_y_final,angle,10);
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <main+0xab8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f93f 	bl	8001070 <__aeabi_f2iz>
 8001df2:	4603      	mov	r3, r0
 8001df4:	220a      	movs	r2, #10
 8001df6:	4937      	ldr	r1, [pc, #220]	; (8001ed4 <main+0xabc>)
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fb39 	bl	8005470 <itoa>
		  if(final_angle_y_final>=0){
 8001dfe:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <main+0xab8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f91e 	bl	8001048 <__aeabi_fcmpge>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d024      	beq.n	8001e5c <main+0xa44>
			  if(final_angle_y_final<10){
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <main+0xab8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4930      	ldr	r1, [pc, #192]	; (8001ed8 <main+0xac0>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff f901 	bl	8001020 <__aeabi_fcmplt>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <main+0xa1e>
				  SSD1306_GotoXY (48,20);
 8001e24:	2114      	movs	r1, #20
 8001e26:	2030      	movs	r0, #48	; 0x30
 8001e28:	f000 fb74 	bl	8002514 <SSD1306_GotoXY>
				  SSD1306_Puts (" ", &Font_16x26, SSD1306_COLOR_WHITE);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	492b      	ldr	r1, [pc, #172]	; (8001edc <main+0xac4>)
 8001e30:	482b      	ldr	r0, [pc, #172]	; (8001ee0 <main+0xac8>)
 8001e32:	f000 fc05 	bl	8002640 <SSD1306_Puts>
			  }
			  SSD1306_GotoXY (32,20);
 8001e36:	2114      	movs	r1, #20
 8001e38:	2020      	movs	r0, #32
 8001e3a:	f000 fb6b 	bl	8002514 <SSD1306_GotoXY>
			  SSD1306_Puts (angle, &Font_16x26, SSD1306_COLOR_WHITE);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4926      	ldr	r1, [pc, #152]	; (8001edc <main+0xac4>)
 8001e42:	4824      	ldr	r0, [pc, #144]	; (8001ed4 <main+0xabc>)
 8001e44:	f000 fbfc 	bl	8002640 <SSD1306_Puts>
			  SSD1306_GotoXY (16,20);
 8001e48:	2114      	movs	r1, #20
 8001e4a:	2010      	movs	r0, #16
 8001e4c:	f000 fb62 	bl	8002514 <SSD1306_GotoXY>
			  SSD1306_Puts (" ", &Font_16x26, SSD1306_COLOR_WHITE);
 8001e50:	2201      	movs	r2, #1
 8001e52:	4922      	ldr	r1, [pc, #136]	; (8001edc <main+0xac4>)
 8001e54:	4822      	ldr	r0, [pc, #136]	; (8001ee0 <main+0xac8>)
 8001e56:	f000 fbf3 	bl	8002640 <SSD1306_Puts>
 8001e5a:	e023      	b.n	8001ea4 <main+0xa8c>
		  }
		  else if(final_angle_y_final<=-1){
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <main+0xab8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4920      	ldr	r1, [pc, #128]	; (8001ee4 <main+0xacc>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f8e6 	bl	8001034 <__aeabi_fcmple>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01a      	beq.n	8001ea4 <main+0xa8c>
			  SSD1306_GotoXY (16,20);
 8001e6e:	2114      	movs	r1, #20
 8001e70:	2010      	movs	r0, #16
 8001e72:	f000 fb4f 	bl	8002514 <SSD1306_GotoXY>
			  SSD1306_Puts (angle, &Font_16x26, SSD1306_COLOR_WHITE);
 8001e76:	2201      	movs	r2, #1
 8001e78:	4918      	ldr	r1, [pc, #96]	; (8001edc <main+0xac4>)
 8001e7a:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <main+0xabc>)
 8001e7c:	f000 fbe0 	bl	8002640 <SSD1306_Puts>
			  if(final_angle_y_final>-10){
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <main+0xab8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4918      	ldr	r1, [pc, #96]	; (8001ee8 <main+0xad0>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f8e8 	bl	800105c <__aeabi_fcmpgt>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <main+0xa8c>
				  SSD1306_GotoXY (48,20);
 8001e92:	2114      	movs	r1, #20
 8001e94:	2030      	movs	r0, #48	; 0x30
 8001e96:	f000 fb3d 	bl	8002514 <SSD1306_GotoXY>
				  SSD1306_Puts (" ", &Font_16x26, SSD1306_COLOR_WHITE);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	490f      	ldr	r1, [pc, #60]	; (8001edc <main+0xac4>)
 8001e9e:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <main+0xac8>)
 8001ea0:	f000 fbce 	bl	8002640 <SSD1306_Puts>
			  }
		  }
		  SSD1306_UpdateScreen();
 8001ea4:	f000 fa92 	bl	80023cc <SSD1306_UpdateScreen>
	  if(HAL_GetTick()-time_velocity_initial>1){
 8001ea8:	e449      	b.n	800173e <main+0x326>
 8001eaa:	bf00      	nop
 8001eac:	3a83126f 	.word	0x3a83126f
 8001eb0:	2000013c 	.word	0x2000013c
 8001eb4:	20000134 	.word	0x20000134
 8001eb8:	41300000 	.word	0x41300000
 8001ebc:	20000138 	.word	0x20000138
 8001ec0:	20000148 	.word	0x20000148
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	2000014c 	.word	0x2000014c
 8001ecc:	42c80000 	.word	0x42c80000
 8001ed0:	20000124 	.word	0x20000124
 8001ed4:	20000620 	.word	0x20000620
 8001ed8:	41200000 	.word	0x41200000
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	08006940 	.word	0x08006940
 8001ee4:	bf800000 	.word	0xbf800000
 8001ee8:	c1200000 	.word	0xc1200000

08001eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b090      	sub	sp, #64	; 0x40
 8001ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0318 	add.w	r3, r7, #24
 8001ef6:	2228      	movs	r2, #40	; 0x28
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fac5 	bl	800548a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f20:	2302      	movs	r3, #2
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f2a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 f907 	bl	8004148 <HAL_RCC_OscConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f40:	f000 f97a 	bl	8002238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f44:	230f      	movs	r3, #15
 8001f46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 fb72 	bl	8004648 <HAL_RCC_ClockConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f6a:	f000 f965 	bl	8002238 <Error_Handler>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3740      	adds	r7, #64	; 0x40
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <MX_I2C1_Init+0x54>)
 8001f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001f84:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <MX_I2C1_Init+0x58>)
 8001f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fb4:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <MX_I2C1_Init+0x50>)
 8001fb6:	f001 f849 	bl	800304c <HAL_I2C_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fc0:	f000 f93a 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000560 	.word	0x20000560
 8001fcc:	40005400 	.word	0x40005400
 8001fd0:	00061a80 	.word	0x00061a80

08001fd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_I2C2_Init+0x50>)
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <MX_I2C2_Init+0x54>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_I2C2_Init+0x50>)
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <MX_I2C2_Init+0x58>)
 8001fe2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_I2C2_Init+0x50>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_I2C2_Init+0x50>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_I2C2_Init+0x50>)
 8001ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ff6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <MX_I2C2_Init+0x50>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_I2C2_Init+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <MX_I2C2_Init+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_I2C2_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <MX_I2C2_Init+0x50>)
 8002012:	f001 f81b 	bl	800304c <HAL_I2C_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800201c:	f000 f90c 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200005b4 	.word	0x200005b4
 8002028:	40005800 	.word	0x40005800
 800202c:	00061a80 	.word	0x00061a80

08002030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b096      	sub	sp, #88	; 0x58
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	615a      	str	r2, [r3, #20]
 8002060:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2220      	movs	r2, #32
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fa0e 	bl	800548a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800206e:	4b44      	ldr	r3, [pc, #272]	; (8002180 <MX_TIM1_Init+0x150>)
 8002070:	4a44      	ldr	r2, [pc, #272]	; (8002184 <MX_TIM1_Init+0x154>)
 8002072:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128;
 8002074:	4b42      	ldr	r3, [pc, #264]	; (8002180 <MX_TIM1_Init+0x150>)
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <MX_TIM1_Init+0x150>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8002080:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <MX_TIM1_Init+0x150>)
 8002082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002086:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <MX_TIM1_Init+0x150>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <MX_TIM1_Init+0x150>)
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <MX_TIM1_Init+0x150>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800209a:	4839      	ldr	r0, [pc, #228]	; (8002180 <MX_TIM1_Init+0x150>)
 800209c:	f002 fc5c 	bl	8004958 <HAL_TIM_Base_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020a6:	f000 f8c7 	bl	8002238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020b4:	4619      	mov	r1, r3
 80020b6:	4832      	ldr	r0, [pc, #200]	; (8002180 <MX_TIM1_Init+0x150>)
 80020b8:	f002 fda6 	bl	8004c08 <HAL_TIM_ConfigClockSource>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020c2:	f000 f8b9 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c6:	482e      	ldr	r0, [pc, #184]	; (8002180 <MX_TIM1_Init+0x150>)
 80020c8:	f002 fc71 	bl	80049ae <HAL_TIM_PWM_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020d2:	f000 f8b1 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020e2:	4619      	mov	r1, r3
 80020e4:	4826      	ldr	r0, [pc, #152]	; (8002180 <MX_TIM1_Init+0x150>)
 80020e6:	f003 f8eb 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80020f0:	f000 f8a2 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f4:	2360      	movs	r3, #96	; 0x60
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	2200      	movs	r2, #0
 8002116:	4619      	mov	r1, r3
 8002118:	4819      	ldr	r0, [pc, #100]	; (8002180 <MX_TIM1_Init+0x150>)
 800211a:	f002 fcaf 	bl	8004a7c <HAL_TIM_PWM_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002124:	f000 f888 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	2204      	movs	r2, #4
 800212e:	4619      	mov	r1, r3
 8002130:	4813      	ldr	r0, [pc, #76]	; (8002180 <MX_TIM1_Init+0x150>)
 8002132:	f002 fca3 	bl	8004a7c <HAL_TIM_PWM_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800213c:	f000 f87c 	bl	8002238 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002158:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	4619      	mov	r1, r3
 8002162:	4807      	ldr	r0, [pc, #28]	; (8002180 <MX_TIM1_Init+0x150>)
 8002164:	f003 f8f0 	bl	8005348 <HAL_TIMEx_ConfigBreakDeadTime>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800216e:	f000 f863 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <MX_TIM1_Init+0x150>)
 8002174:	f000 fbc0 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8002178:	bf00      	nop
 800217a:	3758      	adds	r7, #88	; 0x58
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000628 	.word	0x20000628
 8002184:	40012c00 	.word	0x40012c00

08002188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	f107 0310 	add.w	r3, r7, #16
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <MX_GPIO_Init+0xa8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a23      	ldr	r2, [pc, #140]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a1d      	ldr	r2, [pc, #116]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021ba:	f043 0320 	orr.w	r3, r3, #32
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a11      	ldr	r2, [pc, #68]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <MX_GPIO_Init+0xa8>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002202:	480c      	ldr	r0, [pc, #48]	; (8002234 <MX_GPIO_Init+0xac>)
 8002204:	f000 fef2 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2302      	movs	r3, #2
 8002218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 0310 	add.w	r3, r7, #16
 800221e:	4619      	mov	r1, r3
 8002220:	4804      	ldr	r0, [pc, #16]	; (8002234 <MX_GPIO_Init+0xac>)
 8002222:	f000 fd89 	bl	8002d38 <HAL_GPIO_Init>

}
 8002226:	bf00      	nop
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	40011000 	.word	0x40011000

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800224a:	f000 fa1f 	bl	800268c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800224e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002252:	2201      	movs	r2, #1
 8002254:	2178      	movs	r1, #120	; 0x78
 8002256:	485b      	ldr	r0, [pc, #364]	; (80023c4 <SSD1306_Init+0x180>)
 8002258:	f001 fb4c 	bl	80038f4 <HAL_I2C_IsDeviceReady>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002262:	2300      	movs	r3, #0
 8002264:	e0a9      	b.n	80023ba <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002266:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800226a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800226c:	e002      	b.n	8002274 <SSD1306_Init+0x30>
		p--;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3b01      	subs	r3, #1
 8002272:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f9      	bne.n	800226e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800227a:	22ae      	movs	r2, #174	; 0xae
 800227c:	2100      	movs	r1, #0
 800227e:	2078      	movs	r0, #120	; 0x78
 8002280:	f000 fa60 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002284:	2220      	movs	r2, #32
 8002286:	2100      	movs	r1, #0
 8002288:	2078      	movs	r0, #120	; 0x78
 800228a:	f000 fa5b 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800228e:	2210      	movs	r2, #16
 8002290:	2100      	movs	r1, #0
 8002292:	2078      	movs	r0, #120	; 0x78
 8002294:	f000 fa56 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002298:	22b0      	movs	r2, #176	; 0xb0
 800229a:	2100      	movs	r1, #0
 800229c:	2078      	movs	r0, #120	; 0x78
 800229e:	f000 fa51 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80022a2:	22c8      	movs	r2, #200	; 0xc8
 80022a4:	2100      	movs	r1, #0
 80022a6:	2078      	movs	r0, #120	; 0x78
 80022a8:	f000 fa4c 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2078      	movs	r0, #120	; 0x78
 80022b2:	f000 fa47 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80022b6:	2210      	movs	r2, #16
 80022b8:	2100      	movs	r1, #0
 80022ba:	2078      	movs	r0, #120	; 0x78
 80022bc:	f000 fa42 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	2100      	movs	r1, #0
 80022c4:	2078      	movs	r0, #120	; 0x78
 80022c6:	f000 fa3d 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80022ca:	2281      	movs	r2, #129	; 0x81
 80022cc:	2100      	movs	r1, #0
 80022ce:	2078      	movs	r0, #120	; 0x78
 80022d0:	f000 fa38 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80022d4:	22ff      	movs	r2, #255	; 0xff
 80022d6:	2100      	movs	r1, #0
 80022d8:	2078      	movs	r0, #120	; 0x78
 80022da:	f000 fa33 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80022de:	22a1      	movs	r2, #161	; 0xa1
 80022e0:	2100      	movs	r1, #0
 80022e2:	2078      	movs	r0, #120	; 0x78
 80022e4:	f000 fa2e 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80022e8:	22a6      	movs	r2, #166	; 0xa6
 80022ea:	2100      	movs	r1, #0
 80022ec:	2078      	movs	r0, #120	; 0x78
 80022ee:	f000 fa29 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80022f2:	22a8      	movs	r2, #168	; 0xa8
 80022f4:	2100      	movs	r1, #0
 80022f6:	2078      	movs	r0, #120	; 0x78
 80022f8:	f000 fa24 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80022fc:	223f      	movs	r2, #63	; 0x3f
 80022fe:	2100      	movs	r1, #0
 8002300:	2078      	movs	r0, #120	; 0x78
 8002302:	f000 fa1f 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002306:	22a4      	movs	r2, #164	; 0xa4
 8002308:	2100      	movs	r1, #0
 800230a:	2078      	movs	r0, #120	; 0x78
 800230c:	f000 fa1a 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002310:	22d3      	movs	r2, #211	; 0xd3
 8002312:	2100      	movs	r1, #0
 8002314:	2078      	movs	r0, #120	; 0x78
 8002316:	f000 fa15 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	2078      	movs	r0, #120	; 0x78
 8002320:	f000 fa10 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002324:	22d5      	movs	r2, #213	; 0xd5
 8002326:	2100      	movs	r1, #0
 8002328:	2078      	movs	r0, #120	; 0x78
 800232a:	f000 fa0b 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800232e:	22f0      	movs	r2, #240	; 0xf0
 8002330:	2100      	movs	r1, #0
 8002332:	2078      	movs	r0, #120	; 0x78
 8002334:	f000 fa06 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002338:	22d9      	movs	r2, #217	; 0xd9
 800233a:	2100      	movs	r1, #0
 800233c:	2078      	movs	r0, #120	; 0x78
 800233e:	f000 fa01 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002342:	2222      	movs	r2, #34	; 0x22
 8002344:	2100      	movs	r1, #0
 8002346:	2078      	movs	r0, #120	; 0x78
 8002348:	f000 f9fc 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800234c:	22da      	movs	r2, #218	; 0xda
 800234e:	2100      	movs	r1, #0
 8002350:	2078      	movs	r0, #120	; 0x78
 8002352:	f000 f9f7 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002356:	2212      	movs	r2, #18
 8002358:	2100      	movs	r1, #0
 800235a:	2078      	movs	r0, #120	; 0x78
 800235c:	f000 f9f2 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002360:	22db      	movs	r2, #219	; 0xdb
 8002362:	2100      	movs	r1, #0
 8002364:	2078      	movs	r0, #120	; 0x78
 8002366:	f000 f9ed 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800236a:	2220      	movs	r2, #32
 800236c:	2100      	movs	r1, #0
 800236e:	2078      	movs	r0, #120	; 0x78
 8002370:	f000 f9e8 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002374:	228d      	movs	r2, #141	; 0x8d
 8002376:	2100      	movs	r1, #0
 8002378:	2078      	movs	r0, #120	; 0x78
 800237a:	f000 f9e3 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800237e:	2214      	movs	r2, #20
 8002380:	2100      	movs	r1, #0
 8002382:	2078      	movs	r0, #120	; 0x78
 8002384:	f000 f9de 	bl	8002744 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002388:	22af      	movs	r2, #175	; 0xaf
 800238a:	2100      	movs	r1, #0
 800238c:	2078      	movs	r0, #120	; 0x78
 800238e:	f000 f9d9 	bl	8002744 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002392:	222e      	movs	r2, #46	; 0x2e
 8002394:	2100      	movs	r1, #0
 8002396:	2078      	movs	r0, #120	; 0x78
 8002398:	f000 f9d4 	bl	8002744 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800239c:	2000      	movs	r0, #0
 800239e:	f000 f843 	bl	8002428 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80023a2:	f000 f813 	bl	80023cc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <SSD1306_Init+0x184>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <SSD1306_Init+0x184>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SSD1306_Init+0x184>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000560 	.word	0x20000560
 80023c8:	20000558 	.word	0x20000558

080023cc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80023d2:	2300      	movs	r3, #0
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	e01d      	b.n	8002414 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	3b50      	subs	r3, #80	; 0x50
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	2100      	movs	r1, #0
 80023e2:	2078      	movs	r0, #120	; 0x78
 80023e4:	f000 f9ae 	bl	8002744 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	2078      	movs	r0, #120	; 0x78
 80023ee:	f000 f9a9 	bl	8002744 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80023f2:	2210      	movs	r2, #16
 80023f4:	2100      	movs	r1, #0
 80023f6:	2078      	movs	r0, #120	; 0x78
 80023f8:	f000 f9a4 	bl	8002744 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	01db      	lsls	r3, r3, #7
 8002400:	4a08      	ldr	r2, [pc, #32]	; (8002424 <SSD1306_UpdateScreen+0x58>)
 8002402:	441a      	add	r2, r3
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	2140      	movs	r1, #64	; 0x40
 8002408:	2078      	movs	r0, #120	; 0x78
 800240a:	f000 f953 	bl	80026b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	3301      	adds	r3, #1
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b07      	cmp	r3, #7
 8002418:	d9de      	bls.n	80023d8 <SSD1306_UpdateScreen+0xc>
	}
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000158 	.word	0x20000158

08002428 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <SSD1306_Fill+0x14>
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <SSD1306_Fill+0x16>
 800243c:	23ff      	movs	r3, #255	; 0xff
 800243e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002442:	4619      	mov	r1, r3
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <SSD1306_Fill+0x2c>)
 8002446:	f003 f820 	bl	800548a <memset>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000158 	.word	0x20000158

08002458 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
 8002462:	460b      	mov	r3, r1
 8002464:	80bb      	strh	r3, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	70fb      	strb	r3, [r7, #3]
	if (
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	2b7f      	cmp	r3, #127	; 0x7f
 800246e:	d848      	bhi.n	8002502 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002470:	88bb      	ldrh	r3, [r7, #4]
 8002472:	2b3f      	cmp	r3, #63	; 0x3f
 8002474:	d845      	bhi.n	8002502 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <SSD1306_DrawPixel+0xb4>)
 8002478:	791b      	ldrb	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d11a      	bne.n	80024c8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	08db      	lsrs	r3, r3, #3
 8002498:	b298      	uxth	r0, r3
 800249a:	4603      	mov	r3, r0
 800249c:	01db      	lsls	r3, r3, #7
 800249e:	4413      	add	r3, r2
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <SSD1306_DrawPixel+0xb8>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
 80024a4:	b25a      	sxtb	r2, r3
 80024a6:	88bb      	ldrh	r3, [r7, #4]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b259      	sxtb	r1, r3
 80024b8:	88fa      	ldrh	r2, [r7, #6]
 80024ba:	4603      	mov	r3, r0
 80024bc:	01db      	lsls	r3, r3, #7
 80024be:	4413      	add	r3, r2
 80024c0:	b2c9      	uxtb	r1, r1
 80024c2:	4a13      	ldr	r2, [pc, #76]	; (8002510 <SSD1306_DrawPixel+0xb8>)
 80024c4:	54d1      	strb	r1, [r2, r3]
 80024c6:	e01d      	b.n	8002504 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	b298      	uxth	r0, r3
 80024d0:	4603      	mov	r3, r0
 80024d2:	01db      	lsls	r3, r3, #7
 80024d4:	4413      	add	r3, r2
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <SSD1306_DrawPixel+0xb8>)
 80024d8:	5cd3      	ldrb	r3, [r2, r3]
 80024da:	b25a      	sxtb	r2, r3
 80024dc:	88bb      	ldrh	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	4013      	ands	r3, r2
 80024f0:	b259      	sxtb	r1, r3
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	4603      	mov	r3, r0
 80024f6:	01db      	lsls	r3, r3, #7
 80024f8:	4413      	add	r3, r2
 80024fa:	b2c9      	uxtb	r1, r1
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <SSD1306_DrawPixel+0xb8>)
 80024fe:	54d1      	strb	r1, [r2, r3]
 8002500:	e000      	b.n	8002504 <SSD1306_DrawPixel+0xac>
		return;
 8002502:	bf00      	nop
	}
}
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	20000558 	.word	0x20000558
 8002510:	20000158 	.word	0x20000158

08002514 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	460a      	mov	r2, r1
 800251e:	80fb      	strh	r3, [r7, #6]
 8002520:	4613      	mov	r3, r2
 8002522:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002524:	4a05      	ldr	r2, [pc, #20]	; (800253c <SSD1306_GotoXY+0x28>)
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <SSD1306_GotoXY+0x28>)
 800252c:	88bb      	ldrh	r3, [r7, #4]
 800252e:	8053      	strh	r3, [r2, #2]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000558 	.word	0x20000558

08002540 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
 800254c:	4613      	mov	r3, r2
 800254e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002550:	4b3a      	ldr	r3, [pc, #232]	; (800263c <SSD1306_Putc+0xfc>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
	if (
 800255c:	2b7f      	cmp	r3, #127	; 0x7f
 800255e:	dc07      	bgt.n	8002570 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <SSD1306_Putc+0xfc>)
 8002562:	885b      	ldrh	r3, [r3, #2]
 8002564:	461a      	mov	r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800256c:	2b3f      	cmp	r3, #63	; 0x3f
 800256e:	dd01      	ble.n	8002574 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002570:	2300      	movs	r3, #0
 8002572:	e05e      	b.n	8002632 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e04b      	b.n	8002612 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	3b20      	subs	r3, #32
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	7849      	ldrb	r1, [r1, #1]
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4619      	mov	r1, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	440b      	add	r3, r1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	e030      	b.n	8002600 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80025ae:	4b23      	ldr	r3, [pc, #140]	; (800263c <SSD1306_Putc+0xfc>)
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	b298      	uxth	r0, r3
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <SSD1306_Putc+0xfc>)
 80025bc:	885a      	ldrh	r2, [r3, #2]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	79ba      	ldrb	r2, [r7, #6]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7ff ff45 	bl	8002458 <SSD1306_DrawPixel>
 80025ce:	e014      	b.n	80025fa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <SSD1306_Putc+0xfc>)
 80025d2:	881a      	ldrh	r2, [r3, #0]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4413      	add	r3, r2
 80025da:	b298      	uxth	r0, r3
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <SSD1306_Putc+0xfc>)
 80025de:	885a      	ldrh	r2, [r3, #2]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	b299      	uxth	r1, r3
 80025e8:	79bb      	ldrb	r3, [r7, #6]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	f7ff ff2f 	bl	8002458 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	3301      	adds	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4293      	cmp	r3, r2
 800260a:	d3c8      	bcc.n	800259e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	461a      	mov	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	4293      	cmp	r3, r2
 800261c:	d3ad      	bcc.n	800257a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <SSD1306_Putc+0xfc>)
 8002620:	881a      	ldrh	r2, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	4413      	add	r3, r2
 800262a:	b29a      	uxth	r2, r3
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <SSD1306_Putc+0xfc>)
 800262e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002630:	79fb      	ldrb	r3, [r7, #7]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000558 	.word	0x20000558

08002640 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800264e:	e012      	b.n	8002676 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff71 	bl	8002540 <SSD1306_Putc>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d002      	beq.n	8002670 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	e008      	b.n	8002682 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3301      	adds	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1e8      	bne.n	8002650 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	781b      	ldrb	r3, [r3, #0]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <ssd1306_I2C_Init+0x24>)
 8002694:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002696:	e002      	b.n	800269e <ssd1306_I2C_Init+0x12>
		p--;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f9      	bne.n	8002698 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	0003d090 	.word	0x0003d090

080026b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b0c7      	sub	sp, #284	; 0x11c
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	4604      	mov	r4, r0
 80026bc:	4608      	mov	r0, r1
 80026be:	4639      	mov	r1, r7
 80026c0:	600a      	str	r2, [r1, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	1dfb      	adds	r3, r7, #7
 80026c6:	4622      	mov	r2, r4
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	1dbb      	adds	r3, r7, #6
 80026cc:	4602      	mov	r2, r0
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	460a      	mov	r2, r1
 80026d4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	1dba      	adds	r2, r7, #6
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026e6:	e010      	b.n	800270a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80026e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026ec:	463a      	mov	r2, r7
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	441a      	add	r2, r3
 80026f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026f6:	3301      	adds	r3, #1
 80026f8:	7811      	ldrb	r1, [r2, #0]
 80026fa:	f107 020c 	add.w	r2, r7, #12
 80026fe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002700:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002704:	3301      	adds	r3, #1
 8002706:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800270a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800270e:	b29b      	uxth	r3, r3
 8002710:	1d3a      	adds	r2, r7, #4
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8e7      	bhi.n	80026e8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b299      	uxth	r1, r3
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	b298      	uxth	r0, r3
 8002726:	f107 020c 	add.w	r2, r7, #12
 800272a:	230a      	movs	r3, #10
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	4603      	mov	r3, r0
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <ssd1306_I2C_WriteMulti+0x8c>)
 8002732:	f000 fdb3 	bl	800329c <HAL_I2C_Master_Transmit>
}
 8002736:	bf00      	nop
 8002738:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	20000560 	.word	0x20000560

08002744 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af02      	add	r7, sp, #8
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
 800274e:	460b      	mov	r3, r1
 8002750:	71bb      	strb	r3, [r7, #6]
 8002752:	4613      	mov	r3, r2
 8002754:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800275a:	797b      	ldrb	r3, [r7, #5]
 800275c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	b299      	uxth	r1, r3
 8002762:	f107 020c 	add.w	r2, r7, #12
 8002766:	230a      	movs	r3, #10
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2302      	movs	r3, #2
 800276c:	4803      	ldr	r0, [pc, #12]	; (800277c <ssd1306_I2C_Write+0x38>)
 800276e:	f000 fd95 	bl	800329c <HAL_I2C_Master_Transmit>
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000560 	.word	0x20000560

08002780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_MspInit+0x5c>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4a14      	ldr	r2, [pc, #80]	; (80027dc <HAL_MspInit+0x5c>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6193      	str	r3, [r2, #24]
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_MspInit+0x5c>)
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <HAL_MspInit+0x5c>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_MspInit+0x5c>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a8:	61d3      	str	r3, [r2, #28]
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <HAL_MspInit+0x5c>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_MspInit+0x60>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_MspInit+0x60>)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010000 	.word	0x40010000

080027e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0318 	add.w	r3, r7, #24
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <HAL_I2C_MspInit+0xc8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d124      	bne.n	800284e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	6193      	str	r3, [r2, #24]
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800281c:	23c0      	movs	r3, #192	; 0xc0
 800281e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002820:	2312      	movs	r3, #18
 8002822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 0318 	add.w	r3, r7, #24
 800282c:	4619      	mov	r1, r3
 800282e:	4821      	ldr	r0, [pc, #132]	; (80028b4 <HAL_I2C_MspInit+0xd0>)
 8002830:	f000 fa82 	bl	8002d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 800283a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800283e:	61d3      	str	r3, [r2, #28]
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800284c:	e029      	b.n	80028a2 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_I2C_MspInit+0xd4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d124      	bne.n	80028a2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002870:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002876:	2312      	movs	r3, #18
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287e:	f107 0318 	add.w	r3, r7, #24
 8002882:	4619      	mov	r1, r3
 8002884:	480b      	ldr	r0, [pc, #44]	; (80028b4 <HAL_I2C_MspInit+0xd0>)
 8002886:	f000 fa57 	bl	8002d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 8002890:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002894:	61d3      	str	r3, [r2, #28]
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_I2C_MspInit+0xcc>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
}
 80028a2:	bf00      	nop
 80028a4:	3728      	adds	r7, #40	; 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40005400 	.word	0x40005400
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010c00 	.word	0x40010c00
 80028b8:	40005800 	.word	0x40005800

080028bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_TIM_Base_MspInit+0x34>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10b      	bne.n	80028e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_TIM_Base_MspInit+0x38>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <HAL_TIM_Base_MspInit+0x38>)
 80028d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d8:	6193      	str	r3, [r2, #24]
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_TIM_Base_MspInit+0x38>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a10      	ldr	r2, [pc, #64]	; (8002954 <HAL_TIM_MspPostInit+0x5c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d118      	bne.n	800294a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2302      	movs	r3, #2
 800293c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <HAL_TIM_MspPostInit+0x64>)
 8002946:	f000 f9f7 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800294a:	bf00      	nop
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40010800 	.word	0x40010800

08002960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <HardFault_Handler+0x4>

08002972 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <MemManage_Handler+0x4>

08002978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297c:	e7fe      	b.n	800297c <BusFault_Handler+0x4>

0800297e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <UsageFault_Handler+0x4>

08002984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ac:	f000 f8a2 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <SystemInit+0x5c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <SystemInit+0x5c>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <SystemInit+0x5c>)
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4911      	ldr	r1, [pc, #68]	; (8002a10 <SystemInit+0x5c>)
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <SystemInit+0x60>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <SystemInit+0x5c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <SystemInit+0x5c>)
 80029d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <SystemInit+0x5c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <SystemInit+0x5c>)
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <SystemInit+0x5c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <SystemInit+0x5c>)
 80029f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SystemInit+0x5c>)
 80029fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80029fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <SystemInit+0x64>)
 8002a02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a06:	609a      	str	r2, [r3, #8]
#endif 
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	40021000 	.word	0x40021000
 8002a14:	f8ff0000 	.word	0xf8ff0000
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a1e:	e003      	b.n	8002a28 <LoopCopyDataInit>

08002a20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a26:	3104      	adds	r1, #4

08002a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a28:	480a      	ldr	r0, [pc, #40]	; (8002a54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a30:	d3f6      	bcc.n	8002a20 <CopyDataInit>
  ldr r2, =_sbss
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a34:	e002      	b.n	8002a3c <LoopFillZerobss>

08002a36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a38:	f842 3b04 	str.w	r3, [r2], #4

08002a3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a40:	d3f9      	bcc.n	8002a36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a42:	f7ff ffb7 	bl	80029b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a46:	f002 fcd7 	bl	80053f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a4a:	f7fe fce5 	bl	8001418 <main>
  bx lr
 8002a4e:	4770      	bx	lr
  ldr r3, =_sidata
 8002a50:	08007d80 	.word	0x08007d80
  ldr r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a58:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8002a5c:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8002a60:	20000680 	.word	0x20000680

08002a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC1_2_IRQHandler>
	...

08002a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_Init+0x28>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_Init+0x28>)
 8002a72:	f043 0310 	orr.w	r3, r3, #16
 8002a76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 f929 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff fe7c 	bl	8002780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40022000 	.word	0x40022000

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f933 	bl	8002d1e <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 f909 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	20000010 	.word	0x20000010
 8002af0:	2000000c 	.word	0x2000000c

08002af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_IncTick+0x1c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_IncTick+0x20>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a03      	ldr	r2, [pc, #12]	; (8002b14 <HAL_IncTick+0x20>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	20000010 	.word	0x20000010
 8002b14:	2000067c 	.word	0x2000067c

08002b18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b1c:	4b02      	ldr	r3, [pc, #8]	; (8002b28 <HAL_GetTick+0x10>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	2000067c 	.word	0x2000067c

08002b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff fff0 	bl	8002b18 <HAL_GetTick>
 8002b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d005      	beq.n	8002b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_Delay+0x40>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b52:	bf00      	nop
 8002b54:	f7ff ffe0 	bl	8002b18 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d8f7      	bhi.n	8002b54 <HAL_Delay+0x28>
  {
  }
}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000010 	.word	0x20000010

08002b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	60d3      	str	r3, [r2, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	f003 0307 	and.w	r3, r3, #7
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0a      	blt.n	8002bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	490c      	ldr	r1, [pc, #48]	; (8002c20 <__NVIC_SetPriority+0x4c>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bfc:	e00a      	b.n	8002c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4908      	ldr	r1, [pc, #32]	; (8002c24 <__NVIC_SetPriority+0x50>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	761a      	strb	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e100 	.word	0xe000e100
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f1c3 0307 	rsb	r3, r3, #7
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	bf28      	it	cs
 8002c46:	2304      	movcs	r3, #4
 8002c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d902      	bls.n	8002c58 <NVIC_EncodePriority+0x30>
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3b03      	subs	r3, #3
 8002c56:	e000      	b.n	8002c5a <NVIC_EncodePriority+0x32>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c70:	f04f 31ff 	mov.w	r1, #4294967295
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	43d9      	mvns	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	4313      	orrs	r3, r2
         );
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff90 	bl	8002bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff49 	bl	8002b70 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff5e 	bl	8002bb8 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff90 	bl	8002c28 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5f 	bl	8002bd4 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffb0 	bl	8002c8c <SysTick_Config>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b08b      	sub	sp, #44	; 0x2c
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4a:	e127      	b.n	8002f9c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8116 	bne.w	8002f96 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b12      	cmp	r3, #18
 8002d70:	d034      	beq.n	8002ddc <HAL_GPIO_Init+0xa4>
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d80d      	bhi.n	8002d92 <HAL_GPIO_Init+0x5a>
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d02b      	beq.n	8002dd2 <HAL_GPIO_Init+0x9a>
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d804      	bhi.n	8002d88 <HAL_GPIO_Init+0x50>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d031      	beq.n	8002de6 <HAL_GPIO_Init+0xae>
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d01c      	beq.n	8002dc0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d86:	e048      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d043      	beq.n	8002e14 <HAL_GPIO_Init+0xdc>
 8002d8c:	2b11      	cmp	r3, #17
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_GPIO_Init+0x90>
          break;
 8002d90:	e043      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d92:	4a89      	ldr	r2, [pc, #548]	; (8002fb8 <HAL_GPIO_Init+0x280>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d026      	beq.n	8002de6 <HAL_GPIO_Init+0xae>
 8002d98:	4a87      	ldr	r2, [pc, #540]	; (8002fb8 <HAL_GPIO_Init+0x280>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d806      	bhi.n	8002dac <HAL_GPIO_Init+0x74>
 8002d9e:	4a87      	ldr	r2, [pc, #540]	; (8002fbc <HAL_GPIO_Init+0x284>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d020      	beq.n	8002de6 <HAL_GPIO_Init+0xae>
 8002da4:	4a86      	ldr	r2, [pc, #536]	; (8002fc0 <HAL_GPIO_Init+0x288>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01d      	beq.n	8002de6 <HAL_GPIO_Init+0xae>
          break;
 8002daa:	e036      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002dac:	4a85      	ldr	r2, [pc, #532]	; (8002fc4 <HAL_GPIO_Init+0x28c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d019      	beq.n	8002de6 <HAL_GPIO_Init+0xae>
 8002db2:	4a85      	ldr	r2, [pc, #532]	; (8002fc8 <HAL_GPIO_Init+0x290>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d016      	beq.n	8002de6 <HAL_GPIO_Init+0xae>
 8002db8:	4a84      	ldr	r2, [pc, #528]	; (8002fcc <HAL_GPIO_Init+0x294>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0xae>
          break;
 8002dbe:	e02c      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	623b      	str	r3, [r7, #32]
          break;
 8002dc6:	e028      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	623b      	str	r3, [r7, #32]
          break;
 8002dd0:	e023      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e01e      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	330c      	adds	r3, #12
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e019      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dee:	2304      	movs	r3, #4
 8002df0:	623b      	str	r3, [r7, #32]
          break;
 8002df2:	e012      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	611a      	str	r2, [r3, #16]
          break;
 8002e06:	e008      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e08:	2308      	movs	r3, #8
 8002e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	615a      	str	r2, [r3, #20]
          break;
 8002e12:	e002      	b.n	8002e1a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]
          break;
 8002e18:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2bff      	cmp	r3, #255	; 0xff
 8002e1e:	d801      	bhi.n	8002e24 <HAL_GPIO_Init+0xec>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	e001      	b.n	8002e28 <HAL_GPIO_Init+0xf0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2bff      	cmp	r3, #255	; 0xff
 8002e2e:	d802      	bhi.n	8002e36 <HAL_GPIO_Init+0xfe>
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	e002      	b.n	8002e3c <HAL_GPIO_Init+0x104>
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	3b08      	subs	r3, #8
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	210f      	movs	r1, #15
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	6a39      	ldr	r1, [r7, #32]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	431a      	orrs	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8096 	beq.w	8002f96 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e6a:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_GPIO_Init+0x298>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <HAL_GPIO_Init+0x298>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6193      	str	r3, [r2, #24]
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <HAL_GPIO_Init+0x298>)
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e82:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_GPIO_Init+0x29c>)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4b      	ldr	r2, [pc, #300]	; (8002fd8 <HAL_GPIO_Init+0x2a0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_GPIO_Init+0x19e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	; (8002fdc <HAL_GPIO_Init+0x2a4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_GPIO_Init+0x19a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a49      	ldr	r2, [pc, #292]	; (8002fe0 <HAL_GPIO_Init+0x2a8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <HAL_GPIO_Init+0x196>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a48      	ldr	r2, [pc, #288]	; (8002fe4 <HAL_GPIO_Init+0x2ac>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d101      	bne.n	8002eca <HAL_GPIO_Init+0x192>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x1a0>
 8002eca:	2304      	movs	r3, #4
 8002ecc:	e004      	b.n	8002ed8 <HAL_GPIO_Init+0x1a0>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e002      	b.n	8002ed8 <HAL_GPIO_Init+0x1a0>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_GPIO_Init+0x1a0>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eda:	f002 0203 	and.w	r2, r2, #3
 8002ede:	0092      	lsls	r2, r2, #2
 8002ee0:	4093      	lsls	r3, r2
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ee8:	493a      	ldr	r1, [pc, #232]	; (8002fd4 <HAL_GPIO_Init+0x29c>)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f02:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4938      	ldr	r1, [pc, #224]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
 8002f0e:	e006      	b.n	8002f1e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	4933      	ldr	r1, [pc, #204]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	492e      	ldr	r1, [pc, #184]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
 8002f36:	e006      	b.n	8002f46 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4929      	ldr	r1, [pc, #164]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f52:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	4924      	ldr	r1, [pc, #144]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
 8002f5e:	e006      	b.n	8002f6e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	491f      	ldr	r1, [pc, #124]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	491a      	ldr	r1, [pc, #104]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60cb      	str	r3, [r1, #12]
 8002f86:	e006      	b.n	8002f96 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	4915      	ldr	r1, [pc, #84]	; (8002fe8 <HAL_GPIO_Init+0x2b0>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	3301      	adds	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f47f aed0 	bne.w	8002d4c <HAL_GPIO_Init+0x14>
  }
}
 8002fac:	bf00      	nop
 8002fae:	372c      	adds	r7, #44	; 0x2c
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	10210000 	.word	0x10210000
 8002fbc:	10110000 	.word	0x10110000
 8002fc0:	10120000 	.word	0x10120000
 8002fc4:	10310000 	.word	0x10310000
 8002fc8:	10320000 	.word	0x10320000
 8002fcc:	10220000 	.word	0x10220000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40010800 	.word	0x40010800
 8002fdc:	40010c00 	.word	0x40010c00
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	40011400 	.word	0x40011400
 8002fe8:	40010400 	.word	0x40010400

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	611a      	str	r2, [r3, #16]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003034:	887a      	ldrh	r2, [r7, #2]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800303a:	e002      	b.n	8003042 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800303c:	887a      	ldrh	r2, [r7, #2]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	611a      	str	r2, [r3, #16]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e10f      	b.n	800327e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fbb6 	bl	80027e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2224      	movs	r2, #36	; 0x24
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003090:	f001 fc30 	bl	80048f4 <HAL_RCC_GetPCLK1Freq>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a7b      	ldr	r2, [pc, #492]	; (8003288 <HAL_I2C_Init+0x23c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d807      	bhi.n	80030b0 <HAL_I2C_Init+0x64>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a7a      	ldr	r2, [pc, #488]	; (800328c <HAL_I2C_Init+0x240>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bf94      	ite	ls
 80030a8:	2301      	movls	r3, #1
 80030aa:	2300      	movhi	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e006      	b.n	80030be <HAL_I2C_Init+0x72>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a77      	ldr	r2, [pc, #476]	; (8003290 <HAL_I2C_Init+0x244>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bf94      	ite	ls
 80030b8:	2301      	movls	r3, #1
 80030ba:	2300      	movhi	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0db      	b.n	800327e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a72      	ldr	r2, [pc, #456]	; (8003294 <HAL_I2C_Init+0x248>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0c9b      	lsrs	r3, r3, #18
 80030d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a64      	ldr	r2, [pc, #400]	; (8003288 <HAL_I2C_Init+0x23c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d802      	bhi.n	8003100 <HAL_I2C_Init+0xb4>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	e009      	b.n	8003114 <HAL_I2C_Init+0xc8>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003106:	fb02 f303 	mul.w	r3, r2, r3
 800310a:	4a63      	ldr	r2, [pc, #396]	; (8003298 <HAL_I2C_Init+0x24c>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	3301      	adds	r3, #1
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4956      	ldr	r1, [pc, #344]	; (8003288 <HAL_I2C_Init+0x23c>)
 8003130:	428b      	cmp	r3, r1
 8003132:	d80d      	bhi.n	8003150 <HAL_I2C_Init+0x104>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003148:	2b04      	cmp	r3, #4
 800314a:	bf38      	it	cc
 800314c:	2304      	movcc	r3, #4
 800314e:	e04f      	b.n	80031f0 <HAL_I2C_Init+0x1a4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <HAL_I2C_Init+0x130>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e012      	b.n	80031a2 <HAL_I2C_Init+0x156>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	0099      	lsls	r1, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Init+0x15e>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e022      	b.n	80031f0 <HAL_I2C_Init+0x1a4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10e      	bne.n	80031d0 <HAL_I2C_Init+0x184>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1e58      	subs	r0, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	440b      	add	r3, r1
 80031c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ce:	e00f      	b.n	80031f0 <HAL_I2C_Init+0x1a4>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	0099      	lsls	r1, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6809      	ldr	r1, [r1, #0]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800321e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6911      	ldr	r1, [r2, #16]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68d2      	ldr	r2, [r2, #12]
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	430b      	orrs	r3, r1
 8003232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	000186a0 	.word	0x000186a0
 800328c:	001e847f 	.word	0x001e847f
 8003290:	003d08ff 	.word	0x003d08ff
 8003294:	431bde83 	.word	0x431bde83
 8003298:	10624dd3 	.word	0x10624dd3

0800329c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	460b      	mov	r3, r1
 80032aa:	817b      	strh	r3, [r7, #10]
 80032ac:	4613      	mov	r3, r2
 80032ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7ff fc32 	bl	8002b18 <HAL_GetTick>
 80032b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b20      	cmp	r3, #32
 80032c0:	f040 80e0 	bne.w	8003484 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2319      	movs	r3, #25
 80032ca:	2201      	movs	r2, #1
 80032cc:	4970      	ldr	r1, [pc, #448]	; (8003490 <HAL_I2C_Master_Transmit+0x1f4>)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fd5e 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
 80032dc:	e0d3      	b.n	8003486 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_I2C_Master_Transmit+0x50>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e0cc      	b.n	8003486 <HAL_I2C_Master_Transmit+0x1ea>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d007      	beq.n	8003312 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003320:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2221      	movs	r2, #33	; 0x21
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2210      	movs	r2, #16
 800332e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	893a      	ldrh	r2, [r7, #8]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a50      	ldr	r2, [pc, #320]	; (8003494 <HAL_I2C_Master_Transmit+0x1f8>)
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003354:	8979      	ldrh	r1, [r7, #10]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fbec 	bl	8003b38 <I2C_MasterRequestWrite>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e08d      	b.n	8003486 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003380:	e066      	b.n	8003450 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	6a39      	ldr	r1, [r7, #32]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fdd8 	bl	8003f3c <I2C_WaitOnTXEFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b04      	cmp	r3, #4
 8003398:	d107      	bne.n	80033aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e06b      	b.n	8003486 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d11b      	bne.n	8003424 <HAL_I2C_Master_Transmit+0x188>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d017      	beq.n	8003424 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	6a39      	ldr	r1, [r7, #32]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fdc8 	bl	8003fbe <I2C_WaitOnBTFFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2b04      	cmp	r3, #4
 800343a:	d107      	bne.n	800344c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e01a      	b.n	8003486 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d194      	bne.n	8003382 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	00100002 	.word	0x00100002
 8003494:	ffff0000 	.word	0xffff0000

08003498 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	; 0x30
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	461a      	mov	r2, r3
 80034a4:	460b      	mov	r3, r1
 80034a6:	817b      	strh	r3, [r7, #10]
 80034a8:	4613      	mov	r3, r2
 80034aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ac:	f7ff fb34 	bl	8002b18 <HAL_GetTick>
 80034b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	f040 8213 	bne.w	80038e6 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2319      	movs	r3, #25
 80034c6:	2201      	movs	r2, #1
 80034c8:	497e      	ldr	r1, [pc, #504]	; (80036c4 <HAL_I2C_Master_Receive+0x22c>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fc60 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
 80034d8:	e206      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_I2C_Master_Receive+0x50>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e1ff      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d007      	beq.n	800350e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2222      	movs	r2, #34	; 0x22
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2210      	movs	r2, #16
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	893a      	ldrh	r2, [r7, #8]
 800353e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_I2C_Master_Receive+0x230>)
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003550:	8979      	ldrh	r1, [r7, #10]
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fb64 	bl	8003c24 <I2C_MasterRequestRead>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e1c0      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d113      	bne.n	8003596 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e194      	b.n	80038c0 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	2b01      	cmp	r3, #1
 800359c:	d11d      	bne.n	80035da <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ac:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035ae:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035d6:	b662      	cpsie	i
 80035d8:	e172      	b.n	80038c0 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d11d      	bne.n	800361e <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035f2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003618:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800361a:	b662      	cpsie	i
 800361c:	e150      	b.n	80038c0 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800362c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003644:	e13c      	b.n	80038c0 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	2b03      	cmp	r3, #3
 800364c:	f200 80f5 	bhi.w	800383a <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	2b01      	cmp	r3, #1
 8003656:	d123      	bne.n	80036a0 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fcef 	bl	8004040 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e13d      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800369e:	e10f      	b.n	80038c0 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d150      	bne.n	800374a <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	2200      	movs	r2, #0
 80036b0:	4906      	ldr	r1, [pc, #24]	; (80036cc <HAL_I2C_Master_Receive+0x234>)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fb6c 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e112      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
 80036c2:	bf00      	nop
 80036c4:	00100002 	.word	0x00100002
 80036c8:	ffff0000 	.word	0xffff0000
 80036cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036d0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003714:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003748:	e0ba      	b.n	80038c0 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	2200      	movs	r2, #0
 8003752:	4967      	ldr	r1, [pc, #412]	; (80038f0 <HAL_I2C_Master_Receive+0x458>)
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fb1b 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0c1      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003772:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003774:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	2200      	movs	r2, #0
 80037b0:	494f      	ldr	r1, [pc, #316]	; (80038f0 <HAL_I2C_Master_Receive+0x458>)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 faec 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e092      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003804:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003838:	e042      	b.n	80038c0 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fbfe 	bl	8004040 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e04c      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d118      	bne.n	80038c0 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f aebe 	bne.w	8003646 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	00010004 	.word	0x00010004

080038f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	460b      	mov	r3, r1
 8003902:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003904:	f7ff f908 	bl	8002b18 <HAL_GetTick>
 8003908:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800390a:	2301      	movs	r3, #1
 800390c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	f040 8105 	bne.w	8003b26 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	2319      	movs	r3, #25
 8003922:	2201      	movs	r2, #1
 8003924:	4982      	ldr	r1, [pc, #520]	; (8003b30 <HAL_I2C_IsDeviceReady+0x23c>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fa32 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
 8003934:	e0f8      	b.n	8003b28 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_I2C_IsDeviceReady+0x50>
 8003940:	2302      	movs	r3, #2
 8003942:	e0f1      	b.n	8003b28 <HAL_I2C_IsDeviceReady+0x234>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d007      	beq.n	800396a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003978:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2224      	movs	r2, #36	; 0x24
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a6a      	ldr	r2, [pc, #424]	; (8003b34 <HAL_I2C_IsDeviceReady+0x240>)
 800398c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f9f0 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0b6      	b.n	8003b28 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80039ca:	f7ff f8a5 	bl	8002b18 <HAL_GetTick>
 80039ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	bf0c      	ite	eq
 80039de:	2301      	moveq	r3, #1
 80039e0:	2300      	movne	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	bf0c      	ite	eq
 80039f6:	2301      	moveq	r3, #1
 80039f8:	2300      	movne	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039fe:	e025      	b.n	8003a4c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a00:	f7ff f88a 	bl	8002b18 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <HAL_I2C_IsDeviceReady+0x122>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	22a0      	movs	r2, #160	; 0xa0
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2ba0      	cmp	r3, #160	; 0xa0
 8003a56:	d005      	beq.n	8003a64 <HAL_I2C_IsDeviceReady+0x170>
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_I2C_IsDeviceReady+0x170>
 8003a5e:	7dbb      	ldrb	r3, [r7, #22]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0cd      	beq.n	8003a00 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d129      	bne.n	8003ace <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a88:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	2319      	movs	r3, #25
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4921      	ldr	r1, [pc, #132]	; (8003b30 <HAL_I2C_IsDeviceReady+0x23c>)
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f970 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e036      	b.n	8003b28 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e02c      	b.n	8003b28 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ae6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2319      	movs	r3, #25
 8003aee:	2201      	movs	r2, #1
 8003af0:	490f      	ldr	r1, [pc, #60]	; (8003b30 <HAL_I2C_IsDeviceReady+0x23c>)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f94c 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e012      	b.n	8003b28 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	f4ff af3e 	bcc.w	800398e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	00100002 	.word	0x00100002
 8003b34:	ffff0000 	.word	0xffff0000

08003b38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	460b      	mov	r3, r1
 8003b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d006      	beq.n	8003b62 <I2C_MasterRequestWrite+0x2a>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d003      	beq.n	8003b62 <I2C_MasterRequestWrite+0x2a>
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b60:	d108      	bne.n	8003b74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e00b      	b.n	8003b8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	2b12      	cmp	r3, #18
 8003b7a:	d107      	bne.n	8003b8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f8f9 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e035      	b.n	8003c14 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb0:	d108      	bne.n	8003bc4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bc0:	611a      	str	r2, [r3, #16]
 8003bc2:	e01b      	b.n	8003bfc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bc4:	897b      	ldrh	r3, [r7, #10]
 8003bc6:	11db      	asrs	r3, r3, #7
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0306 	and.w	r3, r3, #6
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f063 030f 	orn	r3, r3, #15
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	490e      	ldr	r1, [pc, #56]	; (8003c1c <I2C_MasterRequestWrite+0xe4>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f92b 	bl	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e010      	b.n	8003c14 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4907      	ldr	r1, [pc, #28]	; (8003c20 <I2C_MasterRequestWrite+0xe8>)
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f91b 	bl	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	00010008 	.word	0x00010008
 8003c20:	00010002 	.word	0x00010002

08003c24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	460b      	mov	r3, r1
 8003c32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d006      	beq.n	8003c5e <I2C_MasterRequestRead+0x3a>
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d003      	beq.n	8003c5e <I2C_MasterRequestRead+0x3a>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c5c:	d108      	bne.n	8003c70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e00b      	b.n	8003c88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	2b11      	cmp	r3, #17
 8003c76:	d107      	bne.n	8003c88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f87b 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e06d      	b.n	8003d80 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cac:	d108      	bne.n	8003cc0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]
 8003cbe:	e053      	b.n	8003d68 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cc0:	897b      	ldrh	r3, [r7, #10]
 8003cc2:	11db      	asrs	r3, r3, #7
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 0306 	and.w	r3, r3, #6
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f063 030f 	orn	r3, r3, #15
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	492a      	ldr	r1, [pc, #168]	; (8003d88 <I2C_MasterRequestRead+0x164>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f8ad 	bl	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e048      	b.n	8003d80 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4923      	ldr	r1, [pc, #140]	; (8003d8c <I2C_MasterRequestRead+0x168>)
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f89d 	bl	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e038      	b.n	8003d80 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f825 	bl	8003d90 <I2C_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e017      	b.n	8003d80 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003d50:	897b      	ldrh	r3, [r7, #10]
 8003d52:	11db      	asrs	r3, r3, #7
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0306 	and.w	r3, r3, #6
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f063 030e 	orn	r3, r3, #14
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4907      	ldr	r1, [pc, #28]	; (8003d8c <I2C_MasterRequestRead+0x168>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f865 	bl	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	00010008 	.word	0x00010008
 8003d8c:	00010002 	.word	0x00010002

08003d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003da0:	e025      	b.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d021      	beq.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe feb5 	bl	8002b18 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e023      	b.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10d      	bne.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	e00c      	b.n	8003e2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d0b6      	beq.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e4c:	e051      	b.n	8003ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5c:	d123      	bne.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f043 0204 	orr.w	r2, r3, #4
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e046      	b.n	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d021      	beq.n	8003ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7fe fe33 	bl	8002b18 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d116      	bne.n	8003ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f043 0220 	orr.w	r2, r3, #32
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e020      	b.n	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d10c      	bne.n	8003f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4013      	ands	r3, r2
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf14      	ite	ne
 8003f0e:	2301      	movne	r3, #1
 8003f10:	2300      	moveq	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	e00b      	b.n	8003f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4013      	ands	r3, r2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d18d      	bne.n	8003e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f48:	e02d      	b.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f8ce 	bl	80040ec <I2C_IsAcknowledgeFailed>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e02d      	b.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d021      	beq.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fe fdd9 	bl	8002b18 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d116      	bne.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e007      	b.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb0:	2b80      	cmp	r3, #128	; 0x80
 8003fb2:	d1ca      	bne.n	8003f4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fca:	e02d      	b.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f88d 	bl	80040ec <I2C_IsAcknowledgeFailed>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e02d      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d021      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7fe fd98 	bl	8002b18 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d1ca      	bne.n	8003fcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800404c:	e042      	b.n	80040d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b10      	cmp	r3, #16
 800405a:	d119      	bne.n	8004090 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e029      	b.n	80040e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004090:	f7fe fd42 	bl	8002b18 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d1b5      	bne.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d11b      	bne.n	800413c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800410c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f043 0204 	orr.w	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e26c      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8087 	beq.w	8004276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004168:	4b92      	ldr	r3, [pc, #584]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b04      	cmp	r3, #4
 8004172:	d00c      	beq.n	800418e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004174:	4b8f      	ldr	r3, [pc, #572]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d112      	bne.n	80041a6 <HAL_RCC_OscConfig+0x5e>
 8004180:	4b8c      	ldr	r3, [pc, #560]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418c:	d10b      	bne.n	80041a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418e:	4b89      	ldr	r3, [pc, #548]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d06c      	beq.n	8004274 <HAL_RCC_OscConfig+0x12c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d168      	bne.n	8004274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e246      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x76>
 80041b0:	4b80      	ldr	r3, [pc, #512]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a7f      	ldr	r2, [pc, #508]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e02e      	b.n	800421c <HAL_RCC_OscConfig+0xd4>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b7b      	ldr	r3, [pc, #492]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7a      	ldr	r2, [pc, #488]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b78      	ldr	r3, [pc, #480]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a77      	ldr	r2, [pc, #476]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e01d      	b.n	800421c <HAL_RCC_OscConfig+0xd4>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0xbc>
 80041ea:	4b72      	ldr	r3, [pc, #456]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a71      	ldr	r2, [pc, #452]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6e      	ldr	r2, [pc, #440]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xd4>
 8004204:	4b6b      	ldr	r3, [pc, #428]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6a      	ldr	r2, [pc, #424]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b68      	ldr	r3, [pc, #416]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a67      	ldr	r2, [pc, #412]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fe fc78 	bl	8002b18 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800422c:	f7fe fc74 	bl	8002b18 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e1fa      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b5d      	ldr	r3, [pc, #372]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xe4>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fe fc64 	bl	8002b18 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe fc60 	bl	8002b18 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e1e6      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x10c>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d063      	beq.n	800434a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004282:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800428e:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b08      	cmp	r3, #8
 8004298:	d11c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x18c>
 800429a:	4b46      	ldr	r3, [pc, #280]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d116      	bne.n	80042d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_OscConfig+0x176>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e1ba      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042be:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4939      	ldr	r1, [pc, #228]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	e03a      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d020      	beq.n	800431e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fe fc19 	bl	8002b18 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ea:	f7fe fc15 	bl	8002b18 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e19b      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4927      	ldr	r1, [pc, #156]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <HAL_RCC_OscConfig+0x270>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fe fbf8 	bl	8002b18 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432c:	f7fe fbf4 	bl	8002b18 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e17a      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d03a      	beq.n	80043cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d019      	beq.n	8004392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <HAL_RCC_OscConfig+0x274>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004364:	f7fe fbd8 	bl	8002b18 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800436c:	f7fe fbd4 	bl	8002b18 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e15a      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <HAL_RCC_OscConfig+0x26c>)
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800438a:	2001      	movs	r0, #1
 800438c:	f000 fac6 	bl	800491c <RCC_Delay>
 8004390:	e01c      	b.n	80043cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_RCC_OscConfig+0x274>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fe fbbe 	bl	8002b18 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439e:	e00f      	b.n	80043c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fe fbba 	bl	8002b18 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d908      	bls.n	80043c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e140      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
 80043b8:	42420000 	.word	0x42420000
 80043bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	4b9e      	ldr	r3, [pc, #632]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e9      	bne.n	80043a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a6 	beq.w	8004526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043de:	4b97      	ldr	r3, [pc, #604]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10d      	bne.n	8004406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	4b94      	ldr	r3, [pc, #592]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	4a93      	ldr	r2, [pc, #588]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80043f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f4:	61d3      	str	r3, [r2, #28]
 80043f6:	4b91      	ldr	r3, [pc, #580]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004402:	2301      	movs	r3, #1
 8004404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	4b8e      	ldr	r3, [pc, #568]	; (8004640 <HAL_RCC_OscConfig+0x4f8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d118      	bne.n	8004444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004412:	4b8b      	ldr	r3, [pc, #556]	; (8004640 <HAL_RCC_OscConfig+0x4f8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a8a      	ldr	r2, [pc, #552]	; (8004640 <HAL_RCC_OscConfig+0x4f8>)
 8004418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441e:	f7fe fb7b 	bl	8002b18 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004426:	f7fe fb77 	bl	8002b18 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b64      	cmp	r3, #100	; 0x64
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0fd      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	4b81      	ldr	r3, [pc, #516]	; (8004640 <HAL_RCC_OscConfig+0x4f8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d106      	bne.n	800445a <HAL_RCC_OscConfig+0x312>
 800444c:	4b7b      	ldr	r3, [pc, #492]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	4a7a      	ldr	r2, [pc, #488]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6213      	str	r3, [r2, #32]
 8004458:	e02d      	b.n	80044b6 <HAL_RCC_OscConfig+0x36e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x334>
 8004462:	4b76      	ldr	r3, [pc, #472]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	4a75      	ldr	r2, [pc, #468]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	6213      	str	r3, [r2, #32]
 800446e:	4b73      	ldr	r3, [pc, #460]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4a72      	ldr	r2, [pc, #456]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	6213      	str	r3, [r2, #32]
 800447a:	e01c      	b.n	80044b6 <HAL_RCC_OscConfig+0x36e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b05      	cmp	r3, #5
 8004482:	d10c      	bne.n	800449e <HAL_RCC_OscConfig+0x356>
 8004484:	4b6d      	ldr	r3, [pc, #436]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	4a6c      	ldr	r2, [pc, #432]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	6213      	str	r3, [r2, #32]
 8004490:	4b6a      	ldr	r3, [pc, #424]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	4a69      	ldr	r2, [pc, #420]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6213      	str	r3, [r2, #32]
 800449c:	e00b      	b.n	80044b6 <HAL_RCC_OscConfig+0x36e>
 800449e:	4b67      	ldr	r3, [pc, #412]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a66      	ldr	r2, [pc, #408]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	6213      	str	r3, [r2, #32]
 80044aa:	4b64      	ldr	r3, [pc, #400]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a63      	ldr	r2, [pc, #396]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80044b0:	f023 0304 	bic.w	r3, r3, #4
 80044b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7fe fb2b 	bl	8002b18 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c4:	e00a      	b.n	80044dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fe fb27 	bl	8002b18 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e0ab      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044dc:	4b57      	ldr	r3, [pc, #348]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ee      	beq.n	80044c6 <HAL_RCC_OscConfig+0x37e>
 80044e8:	e014      	b.n	8004514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fe fb15 	bl	8002b18 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f0:	e00a      	b.n	8004508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fe fb11 	bl	8002b18 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e095      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004508:	4b4c      	ldr	r3, [pc, #304]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ee      	bne.n	80044f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004514:	7dfb      	ldrb	r3, [r7, #23]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451a:	4b48      	ldr	r3, [pc, #288]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4a47      	ldr	r2, [pc, #284]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8081 	beq.w	8004632 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004530:	4b42      	ldr	r3, [pc, #264]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d061      	beq.n	8004600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d146      	bne.n	80045d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004544:	4b3f      	ldr	r3, [pc, #252]	; (8004644 <HAL_RCC_OscConfig+0x4fc>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454a:	f7fe fae5 	bl	8002b18 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004552:	f7fe fae1 	bl	8002b18 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e067      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004564:	4b35      	ldr	r3, [pc, #212]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d108      	bne.n	800458c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800457a:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	492d      	ldr	r1, [pc, #180]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a19      	ldr	r1, [r3, #32]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	430b      	orrs	r3, r1
 800459e:	4927      	ldr	r1, [pc, #156]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_RCC_OscConfig+0x4fc>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fe fab5 	bl	8002b18 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fe fab1 	bl	8002b18 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e037      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x46a>
 80045d0:	e02f      	b.n	8004632 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <HAL_RCC_OscConfig+0x4fc>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fe fa9e 	bl	8002b18 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fe fa9a 	bl	8002b18 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e020      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x498>
 80045fe:	e018      	b.n	8004632 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e013      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_OscConfig+0x4f4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	429a      	cmp	r2, r3
 800461e:	d106      	bne.n	800462e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	40007000 	.word	0x40007000
 8004644:	42420060 	.word	0x42420060

08004648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0d0      	b.n	80047fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d910      	bls.n	800468c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b67      	ldr	r3, [pc, #412]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 0207 	bic.w	r2, r3, #7
 8004672:	4965      	ldr	r1, [pc, #404]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467a:	4b63      	ldr	r3, [pc, #396]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0b8      	b.n	80047fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a4:	4b59      	ldr	r3, [pc, #356]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4a58      	ldr	r2, [pc, #352]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046bc:	4b53      	ldr	r3, [pc, #332]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4a52      	ldr	r2, [pc, #328]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c8:	4b50      	ldr	r3, [pc, #320]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	494d      	ldr	r1, [pc, #308]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d040      	beq.n	8004768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d107      	bne.n	80046fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	4b47      	ldr	r3, [pc, #284]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d115      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e07f      	b.n	80047fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b41      	ldr	r3, [pc, #260]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e073      	b.n	80047fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	4b3d      	ldr	r3, [pc, #244]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e06b      	b.n	80047fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004726:	4b39      	ldr	r3, [pc, #228]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4936      	ldr	r1, [pc, #216]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	4313      	orrs	r3, r2
 8004736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004738:	f7fe f9ee 	bl	8002b18 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fe f9ea 	bl	8002b18 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e053      	b.n	80047fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	4b2d      	ldr	r3, [pc, #180]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 020c 	and.w	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d1eb      	bne.n	8004740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b27      	ldr	r3, [pc, #156]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d210      	bcs.n	8004798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b24      	ldr	r3, [pc, #144]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 0207 	bic.w	r2, r3, #7
 800477e:	4922      	ldr	r1, [pc, #136]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e032      	b.n	80047fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a4:	4b19      	ldr	r3, [pc, #100]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4916      	ldr	r1, [pc, #88]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	490e      	ldr	r1, [pc, #56]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047d6:	f000 f821 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80047da:	4601      	mov	r1, r0
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047e8:	5cd3      	ldrb	r3, [r2, r3]
 80047ea:	fa21 f303 	lsr.w	r3, r1, r3
 80047ee:	4a09      	ldr	r2, [pc, #36]	; (8004814 <HAL_RCC_ClockConfig+0x1cc>)
 80047f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_RCC_ClockConfig+0x1d0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe f94c 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40022000 	.word	0x40022000
 800480c:	40021000 	.word	0x40021000
 8004810:	08007ca4 	.word	0x08007ca4
 8004814:	20000008 	.word	0x20000008
 8004818:	2000000c 	.word	0x2000000c

0800481c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800481c:	b490      	push	{r4, r7}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004822:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004824:	1d3c      	adds	r4, r7, #4
 8004826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800482c:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004846:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b04      	cmp	r3, #4
 8004854:	d002      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x40>
 8004856:	2b08      	cmp	r3, #8
 8004858:	d003      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0x46>
 800485a:	e02d      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800485c:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800485e:	623b      	str	r3, [r7, #32]
      break;
 8004860:	e02d      	b.n	80048be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	0c9b      	lsrs	r3, r3, #18
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800486e:	4413      	add	r3, r2
 8004870:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004874:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004880:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	0c5b      	lsrs	r3, r3, #17
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800488e:	4413      	add	r3, r2
 8004890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004894:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800489a:	fb02 f203 	mul.w	r2, r2, r3
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	e004      	b.n	80048b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80048ac:	fb02 f303 	mul.w	r3, r2, r3
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	623b      	str	r3, [r7, #32]
      break;
 80048b6:	e002      	b.n	80048be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048ba:	623b      	str	r3, [r7, #32]
      break;
 80048bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048be:	6a3b      	ldr	r3, [r7, #32]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3728      	adds	r7, #40	; 0x28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc90      	pop	{r4, r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	08006944 	.word	0x08006944
 80048d0:	08006954 	.word	0x08006954
 80048d4:	40021000 	.word	0x40021000
 80048d8:	007a1200 	.word	0x007a1200
 80048dc:	003d0900 	.word	0x003d0900

080048e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b02      	ldr	r3, [pc, #8]	; (80048f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	20000008 	.word	0x20000008

080048f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f8:	f7ff fff2 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 80048fc:	4601      	mov	r1, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4a03      	ldr	r2, [pc, #12]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800490a:	5cd3      	ldrb	r3, [r2, r3]
 800490c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000
 8004918:	08007cb4 	.word	0x08007cb4

0800491c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <RCC_Delay+0x34>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <RCC_Delay+0x38>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	0a5b      	lsrs	r3, r3, #9
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004938:	bf00      	nop
  }
  while (Delay --);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1e5a      	subs	r2, r3, #1
 800493e:	60fa      	str	r2, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1f9      	bne.n	8004938 <RCC_Delay+0x1c>
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000008 	.word	0x20000008
 8004954:	10624dd3 	.word	0x10624dd3

08004958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e01d      	b.n	80049a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fd ff9c 	bl	80028bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f000 f9ee 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e01d      	b.n	80049fc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f815 	bl	8004a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f000 f9c3 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr
	...

08004a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2201      	movs	r2, #1
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fc24 	bl	8005278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <HAL_TIM_PWM_Start+0x60>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d007      	beq.n	8004a6c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40012c00 	.word	0x40012c00

08004a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0b4      	b.n	8004c00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	f200 809f 	bhi.w	8004bec <HAL_TIM_PWM_ConfigChannel+0x170>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004bed 	.word	0x08004bed
 8004abc:	08004bed 	.word	0x08004bed
 8004ac0:	08004bed 	.word	0x08004bed
 8004ac4:	08004b29 	.word	0x08004b29
 8004ac8:	08004bed 	.word	0x08004bed
 8004acc:	08004bed 	.word	0x08004bed
 8004ad0:	08004bed 	.word	0x08004bed
 8004ad4:	08004b6b 	.word	0x08004b6b
 8004ad8:	08004bed 	.word	0x08004bed
 8004adc:	08004bed 	.word	0x08004bed
 8004ae0:	08004bed 	.word	0x08004bed
 8004ae4:	08004bab 	.word	0x08004bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9a4 	bl	8004e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	619a      	str	r2, [r3, #24]
      break;
 8004b26:	e062      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f9ea 	bl	8004f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6999      	ldr	r1, [r3, #24]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	619a      	str	r2, [r3, #24]
      break;
 8004b68:	e041      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fa33 	bl	8004fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0208 	orr.w	r2, r2, #8
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0204 	bic.w	r2, r2, #4
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
      break;
 8004ba8:	e021      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fa7d 	bl	80050b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	61da      	str	r2, [r3, #28]
      break;
 8004bea:	e000      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004bec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_ConfigClockSource+0x18>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0a6      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x166>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d067      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0x120>
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d80b      	bhi.n	8004c74 <HAL_TIM_ConfigClockSource+0x6c>
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d073      	beq.n	8004d48 <HAL_TIM_ConfigClockSource+0x140>
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d802      	bhi.n	8004c6a <HAL_TIM_ConfigClockSource+0x62>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d06f      	beq.n	8004d48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c68:	e078      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d06c      	beq.n	8004d48 <HAL_TIM_ConfigClockSource+0x140>
 8004c6e:	2b30      	cmp	r3, #48	; 0x30
 8004c70:	d06a      	beq.n	8004d48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c72:	e073      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c74:	2b70      	cmp	r3, #112	; 0x70
 8004c76:	d00d      	beq.n	8004c94 <HAL_TIM_ConfigClockSource+0x8c>
 8004c78:	2b70      	cmp	r3, #112	; 0x70
 8004c7a:	d804      	bhi.n	8004c86 <HAL_TIM_ConfigClockSource+0x7e>
 8004c7c:	2b50      	cmp	r3, #80	; 0x50
 8004c7e:	d033      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0xe0>
 8004c80:	2b60      	cmp	r3, #96	; 0x60
 8004c82:	d041      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c84:	e06a      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8a:	d066      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x152>
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c90:	d017      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c92:	e063      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6899      	ldr	r1, [r3, #8]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f000 fac9 	bl	800523a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	609a      	str	r2, [r3, #8]
      break;
 8004cc0:	e04c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f000 fab2 	bl	800523a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce4:	609a      	str	r2, [r3, #8]
      break;
 8004ce6:	e039      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f000 fa29 	bl	800514c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2150      	movs	r1, #80	; 0x50
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fa80 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004d06:	e029      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f000 fa47 	bl	80051a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2160      	movs	r1, #96	; 0x60
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fa70 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004d26:	e019      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	461a      	mov	r2, r3
 8004d36:	f000 fa09 	bl	800514c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2140      	movs	r1, #64	; 0x40
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fa60 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004d46:	e009      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f000 fa57 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <TIM_Base_SetConfig+0xb8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <TIM_Base_SetConfig+0x30>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d007      	beq.n	8004da8 <TIM_Base_SetConfig+0x30>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a26      	ldr	r2, [pc, #152]	; (8004e34 <TIM_Base_SetConfig+0xbc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_Base_SetConfig+0x30>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <TIM_Base_SetConfig+0xc0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d108      	bne.n	8004dba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <TIM_Base_SetConfig+0xb8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <TIM_Base_SetConfig+0x62>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc8:	d007      	beq.n	8004dda <TIM_Base_SetConfig+0x62>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <TIM_Base_SetConfig+0xbc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_Base_SetConfig+0x62>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <TIM_Base_SetConfig+0xc0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d108      	bne.n	8004dec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <TIM_Base_SetConfig+0xb8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d103      	bne.n	8004e20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	615a      	str	r2, [r3, #20]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40000400 	.word	0x40000400
 8004e38:	40000800 	.word	0x40000800

08004e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f023 0201 	bic.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 0302 	bic.w	r3, r3, #2
 8004e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <TIM_OC1_SetConfig+0xc8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d10c      	bne.n	8004eb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0308 	bic.w	r3, r3, #8
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f023 0304 	bic.w	r3, r3, #4
 8004eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <TIM_OC1_SetConfig+0xc8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d111      	bne.n	8004ede <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	621a      	str	r2, [r3, #32]
}
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00

08004f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0210 	bic.w	r2, r3, #16
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 0320 	bic.w	r3, r3, #32
 8004f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <TIM_OC2_SetConfig+0xd0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d10d      	bne.n	8004f84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <TIM_OC2_SetConfig+0xd0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d113      	bne.n	8004fb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr
 8004fd8:	40012c00 	.word	0x40012c00

08004fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <TIM_OC3_SetConfig+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d10d      	bne.n	8005056 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a14      	ldr	r2, [pc, #80]	; (80050ac <TIM_OC3_SetConfig+0xd0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d113      	bne.n	8005086 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	621a      	str	r2, [r3, #32]
}
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40012c00 	.word	0x40012c00

080050b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <TIM_OC4_SetConfig+0x98>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d109      	bne.n	8005124 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00

0800514c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 030a 	bic.w	r3, r3, #10
 8005188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 0210 	bic.w	r2, r3, #16
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	031b      	lsls	r3, r3, #12
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	621a      	str	r2, [r3, #32]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr

08005206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	f043 0307 	orr.w	r3, r3, #7
 8005228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800523a:	b480      	push	{r7}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005254:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	021a      	lsls	r2, r3, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	431a      	orrs	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4313      	orrs	r3, r2
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	609a      	str	r2, [r3, #8]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2201      	movs	r2, #1
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1a      	ldr	r2, [r3, #32]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	43db      	mvns	r3, r3
 800529a:	401a      	ands	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e032      	b.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005310:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005360:	2302      	movs	r3, #2
 8005362:	e03d      	b.n	80053e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
	...

080053ec <__errno>:
 80053ec:	4b01      	ldr	r3, [pc, #4]	; (80053f4 <__errno+0x8>)
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000014 	.word	0x20000014

080053f8 <__libc_init_array>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	2500      	movs	r5, #0
 80053fc:	4e0c      	ldr	r6, [pc, #48]	; (8005430 <__libc_init_array+0x38>)
 80053fe:	4c0d      	ldr	r4, [pc, #52]	; (8005434 <__libc_init_array+0x3c>)
 8005400:	1ba4      	subs	r4, r4, r6
 8005402:	10a4      	asrs	r4, r4, #2
 8005404:	42a5      	cmp	r5, r4
 8005406:	d109      	bne.n	800541c <__libc_init_array+0x24>
 8005408:	f001 fa8e 	bl	8006928 <_init>
 800540c:	2500      	movs	r5, #0
 800540e:	4e0a      	ldr	r6, [pc, #40]	; (8005438 <__libc_init_array+0x40>)
 8005410:	4c0a      	ldr	r4, [pc, #40]	; (800543c <__libc_init_array+0x44>)
 8005412:	1ba4      	subs	r4, r4, r6
 8005414:	10a4      	asrs	r4, r4, #2
 8005416:	42a5      	cmp	r5, r4
 8005418:	d105      	bne.n	8005426 <__libc_init_array+0x2e>
 800541a:	bd70      	pop	{r4, r5, r6, pc}
 800541c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005420:	4798      	blx	r3
 8005422:	3501      	adds	r5, #1
 8005424:	e7ee      	b.n	8005404 <__libc_init_array+0xc>
 8005426:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800542a:	4798      	blx	r3
 800542c:	3501      	adds	r5, #1
 800542e:	e7f2      	b.n	8005416 <__libc_init_array+0x1e>
 8005430:	08007d78 	.word	0x08007d78
 8005434:	08007d78 	.word	0x08007d78
 8005438:	08007d78 	.word	0x08007d78
 800543c:	08007d7c 	.word	0x08007d7c

08005440 <__itoa>:
 8005440:	1e93      	subs	r3, r2, #2
 8005442:	2b22      	cmp	r3, #34	; 0x22
 8005444:	b510      	push	{r4, lr}
 8005446:	460c      	mov	r4, r1
 8005448:	d904      	bls.n	8005454 <__itoa+0x14>
 800544a:	2300      	movs	r3, #0
 800544c:	461c      	mov	r4, r3
 800544e:	700b      	strb	r3, [r1, #0]
 8005450:	4620      	mov	r0, r4
 8005452:	bd10      	pop	{r4, pc}
 8005454:	2a0a      	cmp	r2, #10
 8005456:	d109      	bne.n	800546c <__itoa+0x2c>
 8005458:	2800      	cmp	r0, #0
 800545a:	da07      	bge.n	800546c <__itoa+0x2c>
 800545c:	232d      	movs	r3, #45	; 0x2d
 800545e:	700b      	strb	r3, [r1, #0]
 8005460:	2101      	movs	r1, #1
 8005462:	4240      	negs	r0, r0
 8005464:	4421      	add	r1, r4
 8005466:	f000 f819 	bl	800549c <__utoa>
 800546a:	e7f1      	b.n	8005450 <__itoa+0x10>
 800546c:	2100      	movs	r1, #0
 800546e:	e7f9      	b.n	8005464 <__itoa+0x24>

08005470 <itoa>:
 8005470:	f7ff bfe6 	b.w	8005440 <__itoa>

08005474 <memcpy>:
 8005474:	b510      	push	{r4, lr}
 8005476:	1e43      	subs	r3, r0, #1
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	bd10      	pop	{r4, pc}
 8005480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005488:	e7f7      	b.n	800547a <memcpy+0x6>

0800548a <memset>:
 800548a:	4603      	mov	r3, r0
 800548c:	4402      	add	r2, r0
 800548e:	4293      	cmp	r3, r2
 8005490:	d100      	bne.n	8005494 <memset+0xa>
 8005492:	4770      	bx	lr
 8005494:	f803 1b01 	strb.w	r1, [r3], #1
 8005498:	e7f9      	b.n	800548e <memset+0x4>
	...

0800549c <__utoa>:
 800549c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549e:	b08b      	sub	sp, #44	; 0x2c
 80054a0:	4605      	mov	r5, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	466e      	mov	r6, sp
 80054a6:	4b1b      	ldr	r3, [pc, #108]	; (8005514 <__utoa+0x78>)
 80054a8:	f103 0c20 	add.w	ip, r3, #32
 80054ac:	4637      	mov	r7, r6
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	3308      	adds	r3, #8
 80054b4:	c703      	stmia	r7!, {r0, r1}
 80054b6:	4563      	cmp	r3, ip
 80054b8:	463e      	mov	r6, r7
 80054ba:	d1f7      	bne.n	80054ac <__utoa+0x10>
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	791b      	ldrb	r3, [r3, #4]
 80054c0:	6038      	str	r0, [r7, #0]
 80054c2:	713b      	strb	r3, [r7, #4]
 80054c4:	1e93      	subs	r3, r2, #2
 80054c6:	2b22      	cmp	r3, #34	; 0x22
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	d904      	bls.n	80054d8 <__utoa+0x3c>
 80054ce:	7023      	strb	r3, [r4, #0]
 80054d0:	461c      	mov	r4, r3
 80054d2:	4620      	mov	r0, r4
 80054d4:	b00b      	add	sp, #44	; 0x2c
 80054d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d8:	1e66      	subs	r6, r4, #1
 80054da:	fbb5 f0f2 	udiv	r0, r5, r2
 80054de:	fb02 5510 	mls	r5, r2, r0, r5
 80054e2:	af0a      	add	r7, sp, #40	; 0x28
 80054e4:	443d      	add	r5, r7
 80054e6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80054ea:	1c59      	adds	r1, r3, #1
 80054ec:	f806 5f01 	strb.w	r5, [r6, #1]!
 80054f0:	4605      	mov	r5, r0
 80054f2:	b968      	cbnz	r0, 8005510 <__utoa+0x74>
 80054f4:	4622      	mov	r2, r4
 80054f6:	5460      	strb	r0, [r4, r1]
 80054f8:	4423      	add	r3, r4
 80054fa:	1b19      	subs	r1, r3, r4
 80054fc:	1b10      	subs	r0, r2, r4
 80054fe:	4281      	cmp	r1, r0
 8005500:	dde7      	ble.n	80054d2 <__utoa+0x36>
 8005502:	7811      	ldrb	r1, [r2, #0]
 8005504:	7818      	ldrb	r0, [r3, #0]
 8005506:	f802 0b01 	strb.w	r0, [r2], #1
 800550a:	f803 1901 	strb.w	r1, [r3], #-1
 800550e:	e7f4      	b.n	80054fa <__utoa+0x5e>
 8005510:	460b      	mov	r3, r1
 8005512:	e7e2      	b.n	80054da <__utoa+0x3e>
 8005514:	08007cbc 	.word	0x08007cbc

08005518 <atan>:
 8005518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	4bb6      	ldr	r3, [pc, #728]	; (80057f8 <atan+0x2e0>)
 800551e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005522:	429e      	cmp	r6, r3
 8005524:	4604      	mov	r4, r0
 8005526:	460d      	mov	r5, r1
 8005528:	468b      	mov	fp, r1
 800552a:	dd17      	ble.n	800555c <atan+0x44>
 800552c:	4bb3      	ldr	r3, [pc, #716]	; (80057fc <atan+0x2e4>)
 800552e:	429e      	cmp	r6, r3
 8005530:	dc01      	bgt.n	8005536 <atan+0x1e>
 8005532:	d109      	bne.n	8005548 <atan+0x30>
 8005534:	b140      	cbz	r0, 8005548 <atan+0x30>
 8005536:	4622      	mov	r2, r4
 8005538:	462b      	mov	r3, r5
 800553a:	4620      	mov	r0, r4
 800553c:	4629      	mov	r1, r5
 800553e:	f7fa fe0d 	bl	800015c <__adddf3>
 8005542:	4604      	mov	r4, r0
 8005544:	460d      	mov	r5, r1
 8005546:	e005      	b.n	8005554 <atan+0x3c>
 8005548:	f1bb 0f00 	cmp.w	fp, #0
 800554c:	4cac      	ldr	r4, [pc, #688]	; (8005800 <atan+0x2e8>)
 800554e:	f340 8121 	ble.w	8005794 <atan+0x27c>
 8005552:	4dac      	ldr	r5, [pc, #688]	; (8005804 <atan+0x2ec>)
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555c:	4baa      	ldr	r3, [pc, #680]	; (8005808 <atan+0x2f0>)
 800555e:	429e      	cmp	r6, r3
 8005560:	dc11      	bgt.n	8005586 <atan+0x6e>
 8005562:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005566:	429e      	cmp	r6, r3
 8005568:	dc0a      	bgt.n	8005580 <atan+0x68>
 800556a:	a38b      	add	r3, pc, #556	; (adr r3, 8005798 <atan+0x280>)
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	f7fa fdf4 	bl	800015c <__adddf3>
 8005574:	2200      	movs	r2, #0
 8005576:	4ba5      	ldr	r3, [pc, #660]	; (800580c <atan+0x2f4>)
 8005578:	f7fb fa36 	bl	80009e8 <__aeabi_dcmpgt>
 800557c:	2800      	cmp	r0, #0
 800557e:	d1e9      	bne.n	8005554 <atan+0x3c>
 8005580:	f04f 3aff 	mov.w	sl, #4294967295
 8005584:	e027      	b.n	80055d6 <atan+0xbe>
 8005586:	f000 f951 	bl	800582c <fabs>
 800558a:	4ba1      	ldr	r3, [pc, #644]	; (8005810 <atan+0x2f8>)
 800558c:	4604      	mov	r4, r0
 800558e:	429e      	cmp	r6, r3
 8005590:	460d      	mov	r5, r1
 8005592:	f300 80b8 	bgt.w	8005706 <atan+0x1ee>
 8005596:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800559a:	429e      	cmp	r6, r3
 800559c:	f300 809c 	bgt.w	80056d8 <atan+0x1c0>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	f7fa fdda 	bl	800015c <__adddf3>
 80055a8:	2200      	movs	r2, #0
 80055aa:	4b98      	ldr	r3, [pc, #608]	; (800580c <atan+0x2f4>)
 80055ac:	f7fa fdd4 	bl	8000158 <__aeabi_dsub>
 80055b0:	2200      	movs	r2, #0
 80055b2:	4606      	mov	r6, r0
 80055b4:	460f      	mov	r7, r1
 80055b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	f7fa fdcd 	bl	800015c <__adddf3>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4630      	mov	r0, r6
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fb f8a7 	bl	800071c <__aeabi_ddiv>
 80055ce:	f04f 0a00 	mov.w	sl, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	460d      	mov	r5, r1
 80055d6:	4622      	mov	r2, r4
 80055d8:	462b      	mov	r3, r5
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fa ff73 	bl	80004c8 <__aeabi_dmul>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4680      	mov	r8, r0
 80055e8:	4689      	mov	r9, r1
 80055ea:	f7fa ff6d 	bl	80004c8 <__aeabi_dmul>
 80055ee:	a36c      	add	r3, pc, #432	; (adr r3, 80057a0 <atan+0x288>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	4606      	mov	r6, r0
 80055f6:	460f      	mov	r7, r1
 80055f8:	f7fa ff66 	bl	80004c8 <__aeabi_dmul>
 80055fc:	a36a      	add	r3, pc, #424	; (adr r3, 80057a8 <atan+0x290>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fa fdab 	bl	800015c <__adddf3>
 8005606:	4632      	mov	r2, r6
 8005608:	463b      	mov	r3, r7
 800560a:	f7fa ff5d 	bl	80004c8 <__aeabi_dmul>
 800560e:	a368      	add	r3, pc, #416	; (adr r3, 80057b0 <atan+0x298>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f7fa fda2 	bl	800015c <__adddf3>
 8005618:	4632      	mov	r2, r6
 800561a:	463b      	mov	r3, r7
 800561c:	f7fa ff54 	bl	80004c8 <__aeabi_dmul>
 8005620:	a365      	add	r3, pc, #404	; (adr r3, 80057b8 <atan+0x2a0>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f7fa fd99 	bl	800015c <__adddf3>
 800562a:	4632      	mov	r2, r6
 800562c:	463b      	mov	r3, r7
 800562e:	f7fa ff4b 	bl	80004c8 <__aeabi_dmul>
 8005632:	a363      	add	r3, pc, #396	; (adr r3, 80057c0 <atan+0x2a8>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa fd90 	bl	800015c <__adddf3>
 800563c:	4632      	mov	r2, r6
 800563e:	463b      	mov	r3, r7
 8005640:	f7fa ff42 	bl	80004c8 <__aeabi_dmul>
 8005644:	a360      	add	r3, pc, #384	; (adr r3, 80057c8 <atan+0x2b0>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f7fa fd87 	bl	800015c <__adddf3>
 800564e:	4642      	mov	r2, r8
 8005650:	464b      	mov	r3, r9
 8005652:	f7fa ff39 	bl	80004c8 <__aeabi_dmul>
 8005656:	a35e      	add	r3, pc, #376	; (adr r3, 80057d0 <atan+0x2b8>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	4680      	mov	r8, r0
 800565e:	4689      	mov	r9, r1
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fa ff30 	bl	80004c8 <__aeabi_dmul>
 8005668:	a35b      	add	r3, pc, #364	; (adr r3, 80057d8 <atan+0x2c0>)
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fa fd73 	bl	8000158 <__aeabi_dsub>
 8005672:	4632      	mov	r2, r6
 8005674:	463b      	mov	r3, r7
 8005676:	f7fa ff27 	bl	80004c8 <__aeabi_dmul>
 800567a:	a359      	add	r3, pc, #356	; (adr r3, 80057e0 <atan+0x2c8>)
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f7fa fd6a 	bl	8000158 <__aeabi_dsub>
 8005684:	4632      	mov	r2, r6
 8005686:	463b      	mov	r3, r7
 8005688:	f7fa ff1e 	bl	80004c8 <__aeabi_dmul>
 800568c:	a356      	add	r3, pc, #344	; (adr r3, 80057e8 <atan+0x2d0>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fa fd61 	bl	8000158 <__aeabi_dsub>
 8005696:	4632      	mov	r2, r6
 8005698:	463b      	mov	r3, r7
 800569a:	f7fa ff15 	bl	80004c8 <__aeabi_dmul>
 800569e:	a354      	add	r3, pc, #336	; (adr r3, 80057f0 <atan+0x2d8>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa fd58 	bl	8000158 <__aeabi_dsub>
 80056a8:	4632      	mov	r2, r6
 80056aa:	463b      	mov	r3, r7
 80056ac:	f7fa ff0c 	bl	80004c8 <__aeabi_dmul>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4640      	mov	r0, r8
 80056b6:	4649      	mov	r1, r9
 80056b8:	f7fa fd50 	bl	800015c <__adddf3>
 80056bc:	4622      	mov	r2, r4
 80056be:	462b      	mov	r3, r5
 80056c0:	f7fa ff02 	bl	80004c8 <__aeabi_dmul>
 80056c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	d144      	bne.n	8005758 <atan+0x240>
 80056ce:	4620      	mov	r0, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	f7fa fd41 	bl	8000158 <__aeabi_dsub>
 80056d6:	e734      	b.n	8005542 <atan+0x2a>
 80056d8:	2200      	movs	r2, #0
 80056da:	4b4c      	ldr	r3, [pc, #304]	; (800580c <atan+0x2f4>)
 80056dc:	f7fa fd3c 	bl	8000158 <__aeabi_dsub>
 80056e0:	2200      	movs	r2, #0
 80056e2:	4606      	mov	r6, r0
 80056e4:	460f      	mov	r7, r1
 80056e6:	4b49      	ldr	r3, [pc, #292]	; (800580c <atan+0x2f4>)
 80056e8:	4620      	mov	r0, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	f7fa fd36 	bl	800015c <__adddf3>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4630      	mov	r0, r6
 80056f6:	4639      	mov	r1, r7
 80056f8:	f7fb f810 	bl	800071c <__aeabi_ddiv>
 80056fc:	f04f 0a01 	mov.w	sl, #1
 8005700:	4604      	mov	r4, r0
 8005702:	460d      	mov	r5, r1
 8005704:	e767      	b.n	80055d6 <atan+0xbe>
 8005706:	4b43      	ldr	r3, [pc, #268]	; (8005814 <atan+0x2fc>)
 8005708:	429e      	cmp	r6, r3
 800570a:	dc1a      	bgt.n	8005742 <atan+0x22a>
 800570c:	2200      	movs	r2, #0
 800570e:	4b42      	ldr	r3, [pc, #264]	; (8005818 <atan+0x300>)
 8005710:	f7fa fd22 	bl	8000158 <__aeabi_dsub>
 8005714:	2200      	movs	r2, #0
 8005716:	4606      	mov	r6, r0
 8005718:	460f      	mov	r7, r1
 800571a:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <atan+0x300>)
 800571c:	4620      	mov	r0, r4
 800571e:	4629      	mov	r1, r5
 8005720:	f7fa fed2 	bl	80004c8 <__aeabi_dmul>
 8005724:	2200      	movs	r2, #0
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <atan+0x2f4>)
 8005728:	f7fa fd18 	bl	800015c <__adddf3>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4630      	mov	r0, r6
 8005732:	4639      	mov	r1, r7
 8005734:	f7fa fff2 	bl	800071c <__aeabi_ddiv>
 8005738:	f04f 0a02 	mov.w	sl, #2
 800573c:	4604      	mov	r4, r0
 800573e:	460d      	mov	r5, r1
 8005740:	e749      	b.n	80055d6 <atan+0xbe>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	2000      	movs	r0, #0
 8005748:	4934      	ldr	r1, [pc, #208]	; (800581c <atan+0x304>)
 800574a:	f7fa ffe7 	bl	800071c <__aeabi_ddiv>
 800574e:	f04f 0a03 	mov.w	sl, #3
 8005752:	4604      	mov	r4, r0
 8005754:	460d      	mov	r5, r1
 8005756:	e73e      	b.n	80055d6 <atan+0xbe>
 8005758:	4b31      	ldr	r3, [pc, #196]	; (8005820 <atan+0x308>)
 800575a:	4e32      	ldr	r6, [pc, #200]	; (8005824 <atan+0x30c>)
 800575c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005760:	4456      	add	r6, sl
 8005762:	449a      	add	sl, r3
 8005764:	e9da 2300 	ldrd	r2, r3, [sl]
 8005768:	f7fa fcf6 	bl	8000158 <__aeabi_dsub>
 800576c:	4622      	mov	r2, r4
 800576e:	462b      	mov	r3, r5
 8005770:	f7fa fcf2 	bl	8000158 <__aeabi_dsub>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	e9d6 0100 	ldrd	r0, r1, [r6]
 800577c:	f7fa fcec 	bl	8000158 <__aeabi_dsub>
 8005780:	f1bb 0f00 	cmp.w	fp, #0
 8005784:	4604      	mov	r4, r0
 8005786:	460d      	mov	r5, r1
 8005788:	f6bf aee4 	bge.w	8005554 <atan+0x3c>
 800578c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005790:	461d      	mov	r5, r3
 8005792:	e6df      	b.n	8005554 <atan+0x3c>
 8005794:	4d24      	ldr	r5, [pc, #144]	; (8005828 <atan+0x310>)
 8005796:	e6dd      	b.n	8005554 <atan+0x3c>
 8005798:	8800759c 	.word	0x8800759c
 800579c:	7e37e43c 	.word	0x7e37e43c
 80057a0:	e322da11 	.word	0xe322da11
 80057a4:	3f90ad3a 	.word	0x3f90ad3a
 80057a8:	24760deb 	.word	0x24760deb
 80057ac:	3fa97b4b 	.word	0x3fa97b4b
 80057b0:	a0d03d51 	.word	0xa0d03d51
 80057b4:	3fb10d66 	.word	0x3fb10d66
 80057b8:	c54c206e 	.word	0xc54c206e
 80057bc:	3fb745cd 	.word	0x3fb745cd
 80057c0:	920083ff 	.word	0x920083ff
 80057c4:	3fc24924 	.word	0x3fc24924
 80057c8:	5555550d 	.word	0x5555550d
 80057cc:	3fd55555 	.word	0x3fd55555
 80057d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80057d4:	bfa2b444 	.word	0xbfa2b444
 80057d8:	52defd9a 	.word	0x52defd9a
 80057dc:	3fadde2d 	.word	0x3fadde2d
 80057e0:	af749a6d 	.word	0xaf749a6d
 80057e4:	3fb3b0f2 	.word	0x3fb3b0f2
 80057e8:	fe231671 	.word	0xfe231671
 80057ec:	3fbc71c6 	.word	0x3fbc71c6
 80057f0:	9998ebc4 	.word	0x9998ebc4
 80057f4:	3fc99999 	.word	0x3fc99999
 80057f8:	440fffff 	.word	0x440fffff
 80057fc:	7ff00000 	.word	0x7ff00000
 8005800:	54442d18 	.word	0x54442d18
 8005804:	3ff921fb 	.word	0x3ff921fb
 8005808:	3fdbffff 	.word	0x3fdbffff
 800580c:	3ff00000 	.word	0x3ff00000
 8005810:	3ff2ffff 	.word	0x3ff2ffff
 8005814:	40037fff 	.word	0x40037fff
 8005818:	3ff80000 	.word	0x3ff80000
 800581c:	bff00000 	.word	0xbff00000
 8005820:	08007d08 	.word	0x08007d08
 8005824:	08007ce8 	.word	0x08007ce8
 8005828:	bff921fb 	.word	0xbff921fb

0800582c <fabs>:
 800582c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005830:	4619      	mov	r1, r3
 8005832:	4770      	bx	lr

08005834 <pow>:
 8005834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005838:	b08f      	sub	sp, #60	; 0x3c
 800583a:	461d      	mov	r5, r3
 800583c:	4680      	mov	r8, r0
 800583e:	4689      	mov	r9, r1
 8005840:	4614      	mov	r4, r2
 8005842:	f000 f9a9 	bl	8005b98 <__ieee754_pow>
 8005846:	4fa1      	ldr	r7, [pc, #644]	; (8005acc <pow+0x298>)
 8005848:	e9cd 0100 	strd	r0, r1, [sp]
 800584c:	f997 3000 	ldrsb.w	r3, [r7]
 8005850:	463e      	mov	r6, r7
 8005852:	9302      	str	r3, [sp, #8]
 8005854:	3301      	adds	r3, #1
 8005856:	d05f      	beq.n	8005918 <pow+0xe4>
 8005858:	4622      	mov	r2, r4
 800585a:	462b      	mov	r3, r5
 800585c:	4620      	mov	r0, r4
 800585e:	4629      	mov	r1, r5
 8005860:	f7fb f8cc 	bl	80009fc <__aeabi_dcmpun>
 8005864:	4682      	mov	sl, r0
 8005866:	2800      	cmp	r0, #0
 8005868:	d156      	bne.n	8005918 <pow+0xe4>
 800586a:	4642      	mov	r2, r8
 800586c:	464b      	mov	r3, r9
 800586e:	4640      	mov	r0, r8
 8005870:	4649      	mov	r1, r9
 8005872:	f7fb f8c3 	bl	80009fc <__aeabi_dcmpun>
 8005876:	9003      	str	r0, [sp, #12]
 8005878:	b1e8      	cbz	r0, 80058b6 <pow+0x82>
 800587a:	2200      	movs	r2, #0
 800587c:	2300      	movs	r3, #0
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fb f889 	bl	8000998 <__aeabi_dcmpeq>
 8005886:	2800      	cmp	r0, #0
 8005888:	d046      	beq.n	8005918 <pow+0xe4>
 800588a:	2301      	movs	r3, #1
 800588c:	2200      	movs	r2, #0
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	4b8f      	ldr	r3, [pc, #572]	; (8005ad0 <pow+0x29c>)
 8005892:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005896:	9305      	str	r3, [sp, #20]
 8005898:	4b8e      	ldr	r3, [pc, #568]	; (8005ad4 <pow+0x2a0>)
 800589a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800589e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80058a2:	9b02      	ldr	r3, [sp, #8]
 80058a4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d031      	beq.n	8005910 <pow+0xdc>
 80058ac:	a804      	add	r0, sp, #16
 80058ae:	f000 ff2f 	bl	8006710 <matherr>
 80058b2:	bb38      	cbnz	r0, 8005904 <pow+0xd0>
 80058b4:	e058      	b.n	8005968 <pow+0x134>
 80058b6:	f04f 0a00 	mov.w	sl, #0
 80058ba:	f04f 0b00 	mov.w	fp, #0
 80058be:	4652      	mov	r2, sl
 80058c0:	465b      	mov	r3, fp
 80058c2:	4640      	mov	r0, r8
 80058c4:	4649      	mov	r1, r9
 80058c6:	f7fb f867 	bl	8000998 <__aeabi_dcmpeq>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d051      	beq.n	8005972 <pow+0x13e>
 80058ce:	4652      	mov	r2, sl
 80058d0:	465b      	mov	r3, fp
 80058d2:	4620      	mov	r0, r4
 80058d4:	4629      	mov	r1, r5
 80058d6:	f7fb f85f 	bl	8000998 <__aeabi_dcmpeq>
 80058da:	4606      	mov	r6, r0
 80058dc:	b308      	cbz	r0, 8005922 <pow+0xee>
 80058de:	2301      	movs	r3, #1
 80058e0:	9304      	str	r3, [sp, #16]
 80058e2:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <pow+0x29c>)
 80058e4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80058e8:	9305      	str	r3, [sp, #20]
 80058ea:	9b03      	ldr	r3, [sp, #12]
 80058ec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80058f0:	930c      	str	r3, [sp, #48]	; 0x30
 80058f2:	9b02      	ldr	r3, [sp, #8]
 80058f4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0d7      	beq.n	80058ac <pow+0x78>
 80058fc:	2200      	movs	r2, #0
 80058fe:	4b75      	ldr	r3, [pc, #468]	; (8005ad4 <pow+0x2a0>)
 8005900:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005906:	b11b      	cbz	r3, 8005910 <pow+0xdc>
 8005908:	f7ff fd70 	bl	80053ec <__errno>
 800590c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800590e:	6003      	str	r3, [r0, #0]
 8005910:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8005914:	e9cd 3400 	strd	r3, r4, [sp]
 8005918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800591c:	b00f      	add	sp, #60	; 0x3c
 800591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f000 feed 	bl	8006704 <finite>
 800592a:	2800      	cmp	r0, #0
 800592c:	d0f4      	beq.n	8005918 <pow+0xe4>
 800592e:	4652      	mov	r2, sl
 8005930:	465b      	mov	r3, fp
 8005932:	4620      	mov	r0, r4
 8005934:	4629      	mov	r1, r5
 8005936:	f7fb f839 	bl	80009ac <__aeabi_dcmplt>
 800593a:	2800      	cmp	r0, #0
 800593c:	d0ec      	beq.n	8005918 <pow+0xe4>
 800593e:	2301      	movs	r3, #1
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	4b63      	ldr	r3, [pc, #396]	; (8005ad0 <pow+0x29c>)
 8005944:	960c      	str	r6, [sp, #48]	; 0x30
 8005946:	9305      	str	r3, [sp, #20]
 8005948:	f997 3000 	ldrsb.w	r3, [r7]
 800594c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005950:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005954:	b913      	cbnz	r3, 800595c <pow+0x128>
 8005956:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800595a:	e7a7      	b.n	80058ac <pow+0x78>
 800595c:	2000      	movs	r0, #0
 800595e:	495e      	ldr	r1, [pc, #376]	; (8005ad8 <pow+0x2a4>)
 8005960:	2b02      	cmp	r3, #2
 8005962:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005966:	d1a1      	bne.n	80058ac <pow+0x78>
 8005968:	f7ff fd40 	bl	80053ec <__errno>
 800596c:	2321      	movs	r3, #33	; 0x21
 800596e:	6003      	str	r3, [r0, #0]
 8005970:	e7c8      	b.n	8005904 <pow+0xd0>
 8005972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005976:	f000 fec5 	bl	8006704 <finite>
 800597a:	9002      	str	r0, [sp, #8]
 800597c:	2800      	cmp	r0, #0
 800597e:	d177      	bne.n	8005a70 <pow+0x23c>
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f000 febe 	bl	8006704 <finite>
 8005988:	2800      	cmp	r0, #0
 800598a:	d071      	beq.n	8005a70 <pow+0x23c>
 800598c:	4620      	mov	r0, r4
 800598e:	4629      	mov	r1, r5
 8005990:	f000 feb8 	bl	8006704 <finite>
 8005994:	2800      	cmp	r0, #0
 8005996:	d06b      	beq.n	8005a70 <pow+0x23c>
 8005998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800599c:	4619      	mov	r1, r3
 800599e:	4610      	mov	r0, r2
 80059a0:	f7fb f82c 	bl	80009fc <__aeabi_dcmpun>
 80059a4:	f997 7000 	ldrsb.w	r7, [r7]
 80059a8:	4b49      	ldr	r3, [pc, #292]	; (8005ad0 <pow+0x29c>)
 80059aa:	b1a0      	cbz	r0, 80059d6 <pow+0x1a2>
 80059ac:	2201      	movs	r2, #1
 80059ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80059b8:	930c      	str	r3, [sp, #48]	; 0x30
 80059ba:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80059be:	2f00      	cmp	r7, #0
 80059c0:	d0c9      	beq.n	8005956 <pow+0x122>
 80059c2:	4652      	mov	r2, sl
 80059c4:	465b      	mov	r3, fp
 80059c6:	4650      	mov	r0, sl
 80059c8:	4659      	mov	r1, fp
 80059ca:	f7fa fea7 	bl	800071c <__aeabi_ddiv>
 80059ce:	2f02      	cmp	r7, #2
 80059d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80059d4:	e7c7      	b.n	8005966 <pow+0x132>
 80059d6:	2203      	movs	r2, #3
 80059d8:	900c      	str	r0, [sp, #48]	; 0x30
 80059da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059de:	4620      	mov	r0, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	2200      	movs	r2, #0
 80059e4:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <pow+0x2a8>)
 80059e6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80059ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80059ee:	f7fa fd6b 	bl	80004c8 <__aeabi_dmul>
 80059f2:	4604      	mov	r4, r0
 80059f4:	460d      	mov	r5, r1
 80059f6:	bb17      	cbnz	r7, 8005a3e <pow+0x20a>
 80059f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80059fc:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <pow+0x2ac>)
 80059fe:	4640      	mov	r0, r8
 8005a00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a04:	4649      	mov	r1, r9
 8005a06:	4652      	mov	r2, sl
 8005a08:	465b      	mov	r3, fp
 8005a0a:	f7fa ffcf 	bl	80009ac <__aeabi_dcmplt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d054      	beq.n	8005abc <pow+0x288>
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f000 fe83 	bl	8006720 <rint>
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	f7fa ffbb 	bl	8000998 <__aeabi_dcmpeq>
 8005a22:	b920      	cbnz	r0, 8005a2e <pow+0x1fa>
 8005a24:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005a28:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <pow+0x2b0>)
 8005a2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a2e:	f996 3000 	ldrsb.w	r3, [r6]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d142      	bne.n	8005abc <pow+0x288>
 8005a36:	f7ff fcd9 	bl	80053ec <__errno>
 8005a3a:	2322      	movs	r3, #34	; 0x22
 8005a3c:	e797      	b.n	800596e <pow+0x13a>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <pow+0x2b4>)
 8005a42:	4640      	mov	r0, r8
 8005a44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a48:	4649      	mov	r1, r9
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	465b      	mov	r3, fp
 8005a4e:	f7fa ffad 	bl	80009ac <__aeabi_dcmplt>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0eb      	beq.n	8005a2e <pow+0x1fa>
 8005a56:	4620      	mov	r0, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	f000 fe61 	bl	8006720 <rint>
 8005a5e:	4622      	mov	r2, r4
 8005a60:	462b      	mov	r3, r5
 8005a62:	f7fa ff99 	bl	8000998 <__aeabi_dcmpeq>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d1e1      	bne.n	8005a2e <pow+0x1fa>
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <pow+0x2a4>)
 8005a6e:	e7dc      	b.n	8005a2a <pow+0x1f6>
 8005a70:	2200      	movs	r2, #0
 8005a72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a76:	2300      	movs	r3, #0
 8005a78:	f7fa ff8e 	bl	8000998 <__aeabi_dcmpeq>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f43f af4b 	beq.w	8005918 <pow+0xe4>
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f000 fe3d 	bl	8006704 <finite>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	f43f af44 	beq.w	8005918 <pow+0xe4>
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f000 fe36 	bl	8006704 <finite>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	f43f af3d 	beq.w	8005918 <pow+0xe4>
 8005a9e:	2304      	movs	r3, #4
 8005aa0:	9304      	str	r3, [sp, #16]
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <pow+0x29c>)
 8005aa4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005aa8:	9305      	str	r3, [sp, #20]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2400      	movs	r4, #0
 8005aae:	930c      	str	r3, [sp, #48]	; 0x30
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005ab6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005aba:	e7b8      	b.n	8005a2e <pow+0x1fa>
 8005abc:	a804      	add	r0, sp, #16
 8005abe:	f000 fe27 	bl	8006710 <matherr>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	f47f af1e 	bne.w	8005904 <pow+0xd0>
 8005ac8:	e7b5      	b.n	8005a36 <pow+0x202>
 8005aca:	bf00      	nop
 8005acc:	20000078 	.word	0x20000078
 8005ad0:	08007d28 	.word	0x08007d28
 8005ad4:	3ff00000 	.word	0x3ff00000
 8005ad8:	fff00000 	.word	0xfff00000
 8005adc:	3fe00000 	.word	0x3fe00000
 8005ae0:	47efffff 	.word	0x47efffff
 8005ae4:	c7efffff 	.word	0xc7efffff
 8005ae8:	7ff00000 	.word	0x7ff00000

08005aec <sqrt>:
 8005aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af0:	b08b      	sub	sp, #44	; 0x2c
 8005af2:	4604      	mov	r4, r0
 8005af4:	460d      	mov	r5, r1
 8005af6:	f000 fd59 	bl	80065ac <__ieee754_sqrt>
 8005afa:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <sqrt+0xa0>)
 8005afc:	4680      	mov	r8, r0
 8005afe:	f993 a000 	ldrsb.w	sl, [r3]
 8005b02:	4689      	mov	r9, r1
 8005b04:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005b08:	d02b      	beq.n	8005b62 <sqrt+0x76>
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	f7fa ff73 	bl	80009fc <__aeabi_dcmpun>
 8005b16:	4683      	mov	fp, r0
 8005b18:	bb18      	cbnz	r0, 8005b62 <sqrt+0x76>
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	2700      	movs	r7, #0
 8005b1e:	4632      	mov	r2, r6
 8005b20:	463b      	mov	r3, r7
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	f7fa ff41 	bl	80009ac <__aeabi_dcmplt>
 8005b2a:	b1d0      	cbz	r0, 8005b62 <sqrt+0x76>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	4b17      	ldr	r3, [pc, #92]	; (8005b90 <sqrt+0xa4>)
 8005b32:	f8cd b020 	str.w	fp, [sp, #32]
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005b3c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005b40:	f1ba 0f00 	cmp.w	sl, #0
 8005b44:	d112      	bne.n	8005b6c <sqrt+0x80>
 8005b46:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005b4a:	4668      	mov	r0, sp
 8005b4c:	f000 fde0 	bl	8006710 <matherr>
 8005b50:	b1b8      	cbz	r0, 8005b82 <sqrt+0x96>
 8005b52:	9b08      	ldr	r3, [sp, #32]
 8005b54:	b11b      	cbz	r3, 8005b5e <sqrt+0x72>
 8005b56:	f7ff fc49 	bl	80053ec <__errno>
 8005b5a:	9b08      	ldr	r3, [sp, #32]
 8005b5c:	6003      	str	r3, [r0, #0]
 8005b5e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005b62:	4640      	mov	r0, r8
 8005b64:	4649      	mov	r1, r9
 8005b66:	b00b      	add	sp, #44	; 0x2c
 8005b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	463b      	mov	r3, r7
 8005b70:	4630      	mov	r0, r6
 8005b72:	4639      	mov	r1, r7
 8005b74:	f7fa fdd2 	bl	800071c <__aeabi_ddiv>
 8005b78:	f1ba 0f02 	cmp.w	sl, #2
 8005b7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b80:	d1e3      	bne.n	8005b4a <sqrt+0x5e>
 8005b82:	f7ff fc33 	bl	80053ec <__errno>
 8005b86:	2321      	movs	r3, #33	; 0x21
 8005b88:	6003      	str	r3, [r0, #0]
 8005b8a:	e7e2      	b.n	8005b52 <sqrt+0x66>
 8005b8c:	20000078 	.word	0x20000078
 8005b90:	08007d2c 	.word	0x08007d2c
 8005b94:	00000000 	.word	0x00000000

08005b98 <__ieee754_pow>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	b091      	sub	sp, #68	; 0x44
 8005b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ba2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005ba6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005baa:	ea55 0302 	orrs.w	r3, r5, r2
 8005bae:	4607      	mov	r7, r0
 8005bb0:	4688      	mov	r8, r1
 8005bb2:	f000 84b7 	beq.w	8006524 <__ieee754_pow+0x98c>
 8005bb6:	4b80      	ldr	r3, [pc, #512]	; (8005db8 <__ieee754_pow+0x220>)
 8005bb8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	4689      	mov	r9, r1
 8005bc0:	4682      	mov	sl, r0
 8005bc2:	dc09      	bgt.n	8005bd8 <__ieee754_pow+0x40>
 8005bc4:	d103      	bne.n	8005bce <__ieee754_pow+0x36>
 8005bc6:	b938      	cbnz	r0, 8005bd8 <__ieee754_pow+0x40>
 8005bc8:	42a5      	cmp	r5, r4
 8005bca:	dc0d      	bgt.n	8005be8 <__ieee754_pow+0x50>
 8005bcc:	e001      	b.n	8005bd2 <__ieee754_pow+0x3a>
 8005bce:	429d      	cmp	r5, r3
 8005bd0:	dc02      	bgt.n	8005bd8 <__ieee754_pow+0x40>
 8005bd2:	429d      	cmp	r5, r3
 8005bd4:	d10e      	bne.n	8005bf4 <__ieee754_pow+0x5c>
 8005bd6:	b16a      	cbz	r2, 8005bf4 <__ieee754_pow+0x5c>
 8005bd8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005bdc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005be0:	ea54 030a 	orrs.w	r3, r4, sl
 8005be4:	f000 849e 	beq.w	8006524 <__ieee754_pow+0x98c>
 8005be8:	4874      	ldr	r0, [pc, #464]	; (8005dbc <__ieee754_pow+0x224>)
 8005bea:	b011      	add	sp, #68	; 0x44
 8005bec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	f000 bd90 	b.w	8006714 <nan>
 8005bf4:	f1b9 0f00 	cmp.w	r9, #0
 8005bf8:	da53      	bge.n	8005ca2 <__ieee754_pow+0x10a>
 8005bfa:	4b71      	ldr	r3, [pc, #452]	; (8005dc0 <__ieee754_pow+0x228>)
 8005bfc:	429d      	cmp	r5, r3
 8005bfe:	dc4e      	bgt.n	8005c9e <__ieee754_pow+0x106>
 8005c00:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005c04:	429d      	cmp	r5, r3
 8005c06:	dd4c      	ble.n	8005ca2 <__ieee754_pow+0x10a>
 8005c08:	152b      	asrs	r3, r5, #20
 8005c0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c0e:	2b14      	cmp	r3, #20
 8005c10:	dd28      	ble.n	8005c64 <__ieee754_pow+0xcc>
 8005c12:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005c16:	fa22 f103 	lsr.w	r1, r2, r3
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d13f      	bne.n	8005ca2 <__ieee754_pow+0x10a>
 8005c22:	f001 0101 	and.w	r1, r1, #1
 8005c26:	f1c1 0302 	rsb	r3, r1, #2
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	d15c      	bne.n	8005cea <__ieee754_pow+0x152>
 8005c30:	4b61      	ldr	r3, [pc, #388]	; (8005db8 <__ieee754_pow+0x220>)
 8005c32:	429d      	cmp	r5, r3
 8005c34:	d126      	bne.n	8005c84 <__ieee754_pow+0xec>
 8005c36:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005c3a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005c3e:	ea53 030a 	orrs.w	r3, r3, sl
 8005c42:	f000 846f 	beq.w	8006524 <__ieee754_pow+0x98c>
 8005c46:	4b5f      	ldr	r3, [pc, #380]	; (8005dc4 <__ieee754_pow+0x22c>)
 8005c48:	429c      	cmp	r4, r3
 8005c4a:	dd2c      	ble.n	8005ca6 <__ieee754_pow+0x10e>
 8005c4c:	2e00      	cmp	r6, #0
 8005c4e:	f280 846f 	bge.w	8006530 <__ieee754_pow+0x998>
 8005c52:	f04f 0b00 	mov.w	fp, #0
 8005c56:	f04f 0c00 	mov.w	ip, #0
 8005c5a:	4658      	mov	r0, fp
 8005c5c:	4661      	mov	r1, ip
 8005c5e:	b011      	add	sp, #68	; 0x44
 8005c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d13e      	bne.n	8005ce6 <__ieee754_pow+0x14e>
 8005c68:	f1c3 0314 	rsb	r3, r3, #20
 8005c6c:	fa45 f103 	asr.w	r1, r5, r3
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	42ab      	cmp	r3, r5
 8005c76:	f040 8463 	bne.w	8006540 <__ieee754_pow+0x9a8>
 8005c7a:	f001 0101 	and.w	r1, r1, #1
 8005c7e:	f1c1 0302 	rsb	r3, r1, #2
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <__ieee754_pow+0x230>)
 8005c86:	429d      	cmp	r5, r3
 8005c88:	d114      	bne.n	8005cb4 <__ieee754_pow+0x11c>
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	f280 8454 	bge.w	8006538 <__ieee754_pow+0x9a0>
 8005c90:	463a      	mov	r2, r7
 8005c92:	4643      	mov	r3, r8
 8005c94:	2000      	movs	r0, #0
 8005c96:	494c      	ldr	r1, [pc, #304]	; (8005dc8 <__ieee754_pow+0x230>)
 8005c98:	f7fa fd40 	bl	800071c <__aeabi_ddiv>
 8005c9c:	e013      	b.n	8005cc6 <__ieee754_pow+0x12e>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e7c3      	b.n	8005c2a <__ieee754_pow+0x92>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e7c1      	b.n	8005c2a <__ieee754_pow+0x92>
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	dad3      	bge.n	8005c52 <__ieee754_pow+0xba>
 8005caa:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005cae:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005cb2:	e7d2      	b.n	8005c5a <__ieee754_pow+0xc2>
 8005cb4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005cb8:	d108      	bne.n	8005ccc <__ieee754_pow+0x134>
 8005cba:	463a      	mov	r2, r7
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	f7fa fc01 	bl	80004c8 <__aeabi_dmul>
 8005cc6:	4683      	mov	fp, r0
 8005cc8:	468c      	mov	ip, r1
 8005cca:	e7c6      	b.n	8005c5a <__ieee754_pow+0xc2>
 8005ccc:	4b3f      	ldr	r3, [pc, #252]	; (8005dcc <__ieee754_pow+0x234>)
 8005cce:	429e      	cmp	r6, r3
 8005cd0:	d10b      	bne.n	8005cea <__ieee754_pow+0x152>
 8005cd2:	f1b9 0f00 	cmp.w	r9, #0
 8005cd6:	db08      	blt.n	8005cea <__ieee754_pow+0x152>
 8005cd8:	4638      	mov	r0, r7
 8005cda:	4641      	mov	r1, r8
 8005cdc:	b011      	add	sp, #68	; 0x44
 8005cde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce2:	f000 bc63 	b.w	80065ac <__ieee754_sqrt>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4638      	mov	r0, r7
 8005cec:	4641      	mov	r1, r8
 8005cee:	f7ff fd9d 	bl	800582c <fabs>
 8005cf2:	4683      	mov	fp, r0
 8005cf4:	468c      	mov	ip, r1
 8005cf6:	f1ba 0f00 	cmp.w	sl, #0
 8005cfa:	d12b      	bne.n	8005d54 <__ieee754_pow+0x1bc>
 8005cfc:	b124      	cbz	r4, 8005d08 <__ieee754_pow+0x170>
 8005cfe:	4b32      	ldr	r3, [pc, #200]	; (8005dc8 <__ieee754_pow+0x230>)
 8005d00:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d125      	bne.n	8005d54 <__ieee754_pow+0x1bc>
 8005d08:	2e00      	cmp	r6, #0
 8005d0a:	da07      	bge.n	8005d1c <__ieee754_pow+0x184>
 8005d0c:	465a      	mov	r2, fp
 8005d0e:	4663      	mov	r3, ip
 8005d10:	2000      	movs	r0, #0
 8005d12:	492d      	ldr	r1, [pc, #180]	; (8005dc8 <__ieee754_pow+0x230>)
 8005d14:	f7fa fd02 	bl	800071c <__aeabi_ddiv>
 8005d18:	4683      	mov	fp, r0
 8005d1a:	468c      	mov	ip, r1
 8005d1c:	f1b9 0f00 	cmp.w	r9, #0
 8005d20:	da9b      	bge.n	8005c5a <__ieee754_pow+0xc2>
 8005d22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d26:	9b00      	ldr	r3, [sp, #0]
 8005d28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d2c:	4323      	orrs	r3, r4
 8005d2e:	d108      	bne.n	8005d42 <__ieee754_pow+0x1aa>
 8005d30:	465a      	mov	r2, fp
 8005d32:	4663      	mov	r3, ip
 8005d34:	4658      	mov	r0, fp
 8005d36:	4661      	mov	r1, ip
 8005d38:	f7fa fa0e 	bl	8000158 <__aeabi_dsub>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	e7aa      	b.n	8005c98 <__ieee754_pow+0x100>
 8005d42:	9b00      	ldr	r3, [sp, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d188      	bne.n	8005c5a <__ieee754_pow+0xc2>
 8005d48:	4658      	mov	r0, fp
 8005d4a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005d4e:	4683      	mov	fp, r0
 8005d50:	469c      	mov	ip, r3
 8005d52:	e782      	b.n	8005c5a <__ieee754_pow+0xc2>
 8005d54:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005d58:	f109 33ff 	add.w	r3, r9, #4294967295
 8005d5c:	930d      	str	r3, [sp, #52]	; 0x34
 8005d5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d60:	9b00      	ldr	r3, [sp, #0]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	d104      	bne.n	8005d70 <__ieee754_pow+0x1d8>
 8005d66:	463a      	mov	r2, r7
 8005d68:	4643      	mov	r3, r8
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	e7e3      	b.n	8005d38 <__ieee754_pow+0x1a0>
 8005d70:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <__ieee754_pow+0x238>)
 8005d72:	429d      	cmp	r5, r3
 8005d74:	f340 80fe 	ble.w	8005f74 <__ieee754_pow+0x3dc>
 8005d78:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	dd0b      	ble.n	8005d98 <__ieee754_pow+0x200>
 8005d80:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <__ieee754_pow+0x22c>)
 8005d82:	429c      	cmp	r4, r3
 8005d84:	dc0e      	bgt.n	8005da4 <__ieee754_pow+0x20c>
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	f6bf af63 	bge.w	8005c52 <__ieee754_pow+0xba>
 8005d8c:	a308      	add	r3, pc, #32	; (adr r3, 8005db0 <__ieee754_pow+0x218>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	e794      	b.n	8005cc2 <__ieee754_pow+0x12a>
 8005d98:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <__ieee754_pow+0x23c>)
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	ddf3      	ble.n	8005d86 <__ieee754_pow+0x1ee>
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <__ieee754_pow+0x230>)
 8005da0:	429c      	cmp	r4, r3
 8005da2:	dd19      	ble.n	8005dd8 <__ieee754_pow+0x240>
 8005da4:	2e00      	cmp	r6, #0
 8005da6:	dcf1      	bgt.n	8005d8c <__ieee754_pow+0x1f4>
 8005da8:	e753      	b.n	8005c52 <__ieee754_pow+0xba>
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w
 8005db0:	8800759c 	.word	0x8800759c
 8005db4:	7e37e43c 	.word	0x7e37e43c
 8005db8:	7ff00000 	.word	0x7ff00000
 8005dbc:	08007d30 	.word	0x08007d30
 8005dc0:	433fffff 	.word	0x433fffff
 8005dc4:	3fefffff 	.word	0x3fefffff
 8005dc8:	3ff00000 	.word	0x3ff00000
 8005dcc:	3fe00000 	.word	0x3fe00000
 8005dd0:	41e00000 	.word	0x41e00000
 8005dd4:	3feffffe 	.word	0x3feffffe
 8005dd8:	4661      	mov	r1, ip
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4b60      	ldr	r3, [pc, #384]	; (8005f60 <__ieee754_pow+0x3c8>)
 8005dde:	4658      	mov	r0, fp
 8005de0:	f7fa f9ba 	bl	8000158 <__aeabi_dsub>
 8005de4:	a354      	add	r3, pc, #336	; (adr r3, 8005f38 <__ieee754_pow+0x3a0>)
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	4604      	mov	r4, r0
 8005dec:	460d      	mov	r5, r1
 8005dee:	f7fa fb6b 	bl	80004c8 <__aeabi_dmul>
 8005df2:	a353      	add	r3, pc, #332	; (adr r3, 8005f40 <__ieee754_pow+0x3a8>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fb62 	bl	80004c8 <__aeabi_dmul>
 8005e04:	2200      	movs	r2, #0
 8005e06:	4682      	mov	sl, r0
 8005e08:	468b      	mov	fp, r1
 8005e0a:	4b56      	ldr	r3, [pc, #344]	; (8005f64 <__ieee754_pow+0x3cc>)
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	f7fa fb5a 	bl	80004c8 <__aeabi_dmul>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	a14b      	add	r1, pc, #300	; (adr r1, 8005f48 <__ieee754_pow+0x3b0>)
 8005e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e1e:	f7fa f99b 	bl	8000158 <__aeabi_dsub>
 8005e22:	4622      	mov	r2, r4
 8005e24:	462b      	mov	r3, r5
 8005e26:	f7fa fb4f 	bl	80004c8 <__aeabi_dmul>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	2000      	movs	r0, #0
 8005e30:	494d      	ldr	r1, [pc, #308]	; (8005f68 <__ieee754_pow+0x3d0>)
 8005e32:	f7fa f991 	bl	8000158 <__aeabi_dsub>
 8005e36:	4622      	mov	r2, r4
 8005e38:	462b      	mov	r3, r5
 8005e3a:	4680      	mov	r8, r0
 8005e3c:	4689      	mov	r9, r1
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa fb41 	bl	80004c8 <__aeabi_dmul>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa fb3b 	bl	80004c8 <__aeabi_dmul>
 8005e52:	a33f      	add	r3, pc, #252	; (adr r3, 8005f50 <__ieee754_pow+0x3b8>)
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f7fa fb36 	bl	80004c8 <__aeabi_dmul>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4650      	mov	r0, sl
 8005e62:	4659      	mov	r1, fp
 8005e64:	f7fa f978 	bl	8000158 <__aeabi_dsub>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	460d      	mov	r5, r1
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa f972 	bl	800015c <__adddf3>
 8005e78:	2000      	movs	r0, #0
 8005e7a:	468b      	mov	fp, r1
 8005e7c:	4682      	mov	sl, r0
 8005e7e:	4632      	mov	r2, r6
 8005e80:	463b      	mov	r3, r7
 8005e82:	f7fa f969 	bl	8000158 <__aeabi_dsub>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7fa f963 	bl	8000158 <__aeabi_dsub>
 8005e92:	9b00      	ldr	r3, [sp, #0]
 8005e94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e96:	3b01      	subs	r3, #1
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	bf0c      	ite	eq
 8005ea0:	4c32      	ldreq	r4, [pc, #200]	; (8005f6c <__ieee754_pow+0x3d4>)
 8005ea2:	4c2f      	ldrne	r4, [pc, #188]	; (8005f60 <__ieee754_pow+0x3c8>)
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	e9cd 3400 	strd	r3, r4, [sp]
 8005eaa:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005eae:	2400      	movs	r4, #0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	462b      	mov	r3, r5
 8005eba:	f7fa f94d 	bl	8000158 <__aeabi_dsub>
 8005ebe:	4652      	mov	r2, sl
 8005ec0:	465b      	mov	r3, fp
 8005ec2:	f7fa fb01 	bl	80004c8 <__aeabi_dmul>
 8005ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eca:	4680      	mov	r8, r0
 8005ecc:	4689      	mov	r9, r1
 8005ece:	4630      	mov	r0, r6
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	f7fa faf9 	bl	80004c8 <__aeabi_dmul>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4640      	mov	r0, r8
 8005edc:	4649      	mov	r1, r9
 8005ede:	f7fa f93d 	bl	800015c <__adddf3>
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	462b      	mov	r3, r5
 8005ee6:	4680      	mov	r8, r0
 8005ee8:	4689      	mov	r9, r1
 8005eea:	4650      	mov	r0, sl
 8005eec:	4659      	mov	r1, fp
 8005eee:	f7fa faeb 	bl	80004c8 <__aeabi_dmul>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	460d      	mov	r5, r1
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4649      	mov	r1, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005f02:	f7fa f92b 	bl	800015c <__adddf3>
 8005f06:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <__ieee754_pow+0x3d8>)
 8005f08:	4682      	mov	sl, r0
 8005f0a:	4299      	cmp	r1, r3
 8005f0c:	460f      	mov	r7, r1
 8005f0e:	460e      	mov	r6, r1
 8005f10:	f340 82e1 	ble.w	80064d6 <__ieee754_pow+0x93e>
 8005f14:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005f18:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005f1c:	4303      	orrs	r3, r0
 8005f1e:	f000 81db 	beq.w	80062d8 <__ieee754_pow+0x740>
 8005f22:	a30d      	add	r3, pc, #52	; (adr r3, 8005f58 <__ieee754_pow+0x3c0>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f2c:	f7fa facc 	bl	80004c8 <__aeabi_dmul>
 8005f30:	a309      	add	r3, pc, #36	; (adr r3, 8005f58 <__ieee754_pow+0x3c0>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	e6c4      	b.n	8005cc2 <__ieee754_pow+0x12a>
 8005f38:	60000000 	.word	0x60000000
 8005f3c:	3ff71547 	.word	0x3ff71547
 8005f40:	f85ddf44 	.word	0xf85ddf44
 8005f44:	3e54ae0b 	.word	0x3e54ae0b
 8005f48:	55555555 	.word	0x55555555
 8005f4c:	3fd55555 	.word	0x3fd55555
 8005f50:	652b82fe 	.word	0x652b82fe
 8005f54:	3ff71547 	.word	0x3ff71547
 8005f58:	8800759c 	.word	0x8800759c
 8005f5c:	7e37e43c 	.word	0x7e37e43c
 8005f60:	3ff00000 	.word	0x3ff00000
 8005f64:	3fd00000 	.word	0x3fd00000
 8005f68:	3fe00000 	.word	0x3fe00000
 8005f6c:	bff00000 	.word	0xbff00000
 8005f70:	408fffff 	.word	0x408fffff
 8005f74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	da08      	bge.n	8005f90 <__ieee754_pow+0x3f8>
 8005f7e:	4658      	mov	r0, fp
 8005f80:	4bcd      	ldr	r3, [pc, #820]	; (80062b8 <__ieee754_pow+0x720>)
 8005f82:	4661      	mov	r1, ip
 8005f84:	f7fa faa0 	bl	80004c8 <__aeabi_dmul>
 8005f88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005f8c:	4683      	mov	fp, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	1523      	asrs	r3, r4, #20
 8005f92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f96:	4413      	add	r3, r2
 8005f98:	930c      	str	r3, [sp, #48]	; 0x30
 8005f9a:	4bc8      	ldr	r3, [pc, #800]	; (80062bc <__ieee754_pow+0x724>)
 8005f9c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005fa0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005faa:	dd08      	ble.n	8005fbe <__ieee754_pow+0x426>
 8005fac:	4bc4      	ldr	r3, [pc, #784]	; (80062c0 <__ieee754_pow+0x728>)
 8005fae:	429c      	cmp	r4, r3
 8005fb0:	f340 815b 	ble.w	800626a <__ieee754_pow+0x6d2>
 8005fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fb6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005fba:	3301      	adds	r3, #1
 8005fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	4658      	mov	r0, fp
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4bbf      	ldr	r3, [pc, #764]	; (80062c4 <__ieee754_pow+0x72c>)
 8005fc8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005fcc:	444b      	add	r3, r9
 8005fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fd2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4623      	mov	r3, r4
 8005fda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fde:	f7fa f8bb 	bl	8000158 <__aeabi_dsub>
 8005fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fee:	f7fa f8b5 	bl	800015c <__adddf3>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	49b3      	ldr	r1, [pc, #716]	; (80062c8 <__ieee754_pow+0x730>)
 8005ffa:	f7fa fb8f 	bl	800071c <__aeabi_ddiv>
 8005ffe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4630      	mov	r0, r6
 8006008:	4639      	mov	r1, r7
 800600a:	f7fa fa5d 	bl	80004c8 <__aeabi_dmul>
 800600e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006012:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006016:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800601a:	2300      	movs	r3, #0
 800601c:	2200      	movs	r2, #0
 800601e:	106d      	asrs	r5, r5, #1
 8006020:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800602a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800602e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8006032:	4650      	mov	r0, sl
 8006034:	4659      	mov	r1, fp
 8006036:	4614      	mov	r4, r2
 8006038:	461d      	mov	r5, r3
 800603a:	f7fa fa45 	bl	80004c8 <__aeabi_dmul>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4630      	mov	r0, r6
 8006044:	4639      	mov	r1, r7
 8006046:	f7fa f887 	bl	8000158 <__aeabi_dsub>
 800604a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	4620      	mov	r0, r4
 8006054:	4629      	mov	r1, r5
 8006056:	f7fa f87f 	bl	8000158 <__aeabi_dsub>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006062:	f7fa f879 	bl	8000158 <__aeabi_dsub>
 8006066:	4652      	mov	r2, sl
 8006068:	465b      	mov	r3, fp
 800606a:	f7fa fa2d 	bl	80004c8 <__aeabi_dmul>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4630      	mov	r0, r6
 8006074:	4639      	mov	r1, r7
 8006076:	f7fa f86f 	bl	8000158 <__aeabi_dsub>
 800607a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800607e:	f7fa fa23 	bl	80004c8 <__aeabi_dmul>
 8006082:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006086:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800608a:	4610      	mov	r0, r2
 800608c:	4619      	mov	r1, r3
 800608e:	f7fa fa1b 	bl	80004c8 <__aeabi_dmul>
 8006092:	a377      	add	r3, pc, #476	; (adr r3, 8006270 <__ieee754_pow+0x6d8>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	4604      	mov	r4, r0
 800609a:	460d      	mov	r5, r1
 800609c:	f7fa fa14 	bl	80004c8 <__aeabi_dmul>
 80060a0:	a375      	add	r3, pc, #468	; (adr r3, 8006278 <__ieee754_pow+0x6e0>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa f859 	bl	800015c <__adddf3>
 80060aa:	4622      	mov	r2, r4
 80060ac:	462b      	mov	r3, r5
 80060ae:	f7fa fa0b 	bl	80004c8 <__aeabi_dmul>
 80060b2:	a373      	add	r3, pc, #460	; (adr r3, 8006280 <__ieee754_pow+0x6e8>)
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	f7fa f850 	bl	800015c <__adddf3>
 80060bc:	4622      	mov	r2, r4
 80060be:	462b      	mov	r3, r5
 80060c0:	f7fa fa02 	bl	80004c8 <__aeabi_dmul>
 80060c4:	a370      	add	r3, pc, #448	; (adr r3, 8006288 <__ieee754_pow+0x6f0>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa f847 	bl	800015c <__adddf3>
 80060ce:	4622      	mov	r2, r4
 80060d0:	462b      	mov	r3, r5
 80060d2:	f7fa f9f9 	bl	80004c8 <__aeabi_dmul>
 80060d6:	a36e      	add	r3, pc, #440	; (adr r3, 8006290 <__ieee754_pow+0x6f8>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f7fa f83e 	bl	800015c <__adddf3>
 80060e0:	4622      	mov	r2, r4
 80060e2:	462b      	mov	r3, r5
 80060e4:	f7fa f9f0 	bl	80004c8 <__aeabi_dmul>
 80060e8:	a36b      	add	r3, pc, #428	; (adr r3, 8006298 <__ieee754_pow+0x700>)
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f7fa f835 	bl	800015c <__adddf3>
 80060f2:	4622      	mov	r2, r4
 80060f4:	4606      	mov	r6, r0
 80060f6:	460f      	mov	r7, r1
 80060f8:	462b      	mov	r3, r5
 80060fa:	4620      	mov	r0, r4
 80060fc:	4629      	mov	r1, r5
 80060fe:	f7fa f9e3 	bl	80004c8 <__aeabi_dmul>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4630      	mov	r0, r6
 8006108:	4639      	mov	r1, r7
 800610a:	f7fa f9dd 	bl	80004c8 <__aeabi_dmul>
 800610e:	4604      	mov	r4, r0
 8006110:	460d      	mov	r5, r1
 8006112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006116:	4652      	mov	r2, sl
 8006118:	465b      	mov	r3, fp
 800611a:	f7fa f81f 	bl	800015c <__adddf3>
 800611e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006122:	f7fa f9d1 	bl	80004c8 <__aeabi_dmul>
 8006126:	4622      	mov	r2, r4
 8006128:	462b      	mov	r3, r5
 800612a:	f7fa f817 	bl	800015c <__adddf3>
 800612e:	4652      	mov	r2, sl
 8006130:	4606      	mov	r6, r0
 8006132:	460f      	mov	r7, r1
 8006134:	465b      	mov	r3, fp
 8006136:	4650      	mov	r0, sl
 8006138:	4659      	mov	r1, fp
 800613a:	f7fa f9c5 	bl	80004c8 <__aeabi_dmul>
 800613e:	2200      	movs	r2, #0
 8006140:	4b62      	ldr	r3, [pc, #392]	; (80062cc <__ieee754_pow+0x734>)
 8006142:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006146:	f7fa f809 	bl	800015c <__adddf3>
 800614a:	4632      	mov	r2, r6
 800614c:	463b      	mov	r3, r7
 800614e:	f7fa f805 	bl	800015c <__adddf3>
 8006152:	9804      	ldr	r0, [sp, #16]
 8006154:	460d      	mov	r5, r1
 8006156:	4604      	mov	r4, r0
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4650      	mov	r0, sl
 800615e:	4659      	mov	r1, fp
 8006160:	f7fa f9b2 	bl	80004c8 <__aeabi_dmul>
 8006164:	2200      	movs	r2, #0
 8006166:	4682      	mov	sl, r0
 8006168:	468b      	mov	fp, r1
 800616a:	4b58      	ldr	r3, [pc, #352]	; (80062cc <__ieee754_pow+0x734>)
 800616c:	4620      	mov	r0, r4
 800616e:	4629      	mov	r1, r5
 8006170:	f7f9 fff2 	bl	8000158 <__aeabi_dsub>
 8006174:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006178:	f7f9 ffee 	bl	8000158 <__aeabi_dsub>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	f7f9 ffe8 	bl	8000158 <__aeabi_dsub>
 8006188:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800618c:	f7fa f99c 	bl	80004c8 <__aeabi_dmul>
 8006190:	4622      	mov	r2, r4
 8006192:	4606      	mov	r6, r0
 8006194:	460f      	mov	r7, r1
 8006196:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800619a:	462b      	mov	r3, r5
 800619c:	f7fa f994 	bl	80004c8 <__aeabi_dmul>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4630      	mov	r0, r6
 80061a6:	4639      	mov	r1, r7
 80061a8:	f7f9 ffd8 	bl	800015c <__adddf3>
 80061ac:	4606      	mov	r6, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4650      	mov	r0, sl
 80061b6:	4659      	mov	r1, fp
 80061b8:	f7f9 ffd0 	bl	800015c <__adddf3>
 80061bc:	a338      	add	r3, pc, #224	; (adr r3, 80062a0 <__ieee754_pow+0x708>)
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	9804      	ldr	r0, [sp, #16]
 80061c4:	460d      	mov	r5, r1
 80061c6:	4604      	mov	r4, r0
 80061c8:	f7fa f97e 	bl	80004c8 <__aeabi_dmul>
 80061cc:	4652      	mov	r2, sl
 80061ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061d2:	465b      	mov	r3, fp
 80061d4:	4620      	mov	r0, r4
 80061d6:	4629      	mov	r1, r5
 80061d8:	f7f9 ffbe 	bl	8000158 <__aeabi_dsub>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7f9 ffb8 	bl	8000158 <__aeabi_dsub>
 80061e8:	a32f      	add	r3, pc, #188	; (adr r3, 80062a8 <__ieee754_pow+0x710>)
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	f7fa f96b 	bl	80004c8 <__aeabi_dmul>
 80061f2:	a32f      	add	r3, pc, #188	; (adr r3, 80062b0 <__ieee754_pow+0x718>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	4606      	mov	r6, r0
 80061fa:	460f      	mov	r7, r1
 80061fc:	4620      	mov	r0, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	f7fa f962 	bl	80004c8 <__aeabi_dmul>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	f7f9 ffa6 	bl	800015c <__adddf3>
 8006210:	4b2f      	ldr	r3, [pc, #188]	; (80062d0 <__ieee754_pow+0x738>)
 8006212:	444b      	add	r3, r9
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f7f9 ffa0 	bl	800015c <__adddf3>
 800621c:	4604      	mov	r4, r0
 800621e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006220:	460d      	mov	r5, r1
 8006222:	f7fa f8e7 	bl	80003f4 <__aeabi_i2d>
 8006226:	4606      	mov	r6, r0
 8006228:	460f      	mov	r7, r1
 800622a:	4b2a      	ldr	r3, [pc, #168]	; (80062d4 <__ieee754_pow+0x73c>)
 800622c:	4622      	mov	r2, r4
 800622e:	444b      	add	r3, r9
 8006230:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006234:	462b      	mov	r3, r5
 8006236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800623a:	f7f9 ff8f 	bl	800015c <__adddf3>
 800623e:	4642      	mov	r2, r8
 8006240:	464b      	mov	r3, r9
 8006242:	f7f9 ff8b 	bl	800015c <__adddf3>
 8006246:	4632      	mov	r2, r6
 8006248:	463b      	mov	r3, r7
 800624a:	f7f9 ff87 	bl	800015c <__adddf3>
 800624e:	9804      	ldr	r0, [sp, #16]
 8006250:	4632      	mov	r2, r6
 8006252:	463b      	mov	r3, r7
 8006254:	4682      	mov	sl, r0
 8006256:	468b      	mov	fp, r1
 8006258:	f7f9 ff7e 	bl	8000158 <__aeabi_dsub>
 800625c:	4642      	mov	r2, r8
 800625e:	464b      	mov	r3, r9
 8006260:	f7f9 ff7a 	bl	8000158 <__aeabi_dsub>
 8006264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006268:	e60b      	b.n	8005e82 <__ieee754_pow+0x2ea>
 800626a:	f04f 0801 	mov.w	r8, #1
 800626e:	e6a8      	b.n	8005fc2 <__ieee754_pow+0x42a>
 8006270:	4a454eef 	.word	0x4a454eef
 8006274:	3fca7e28 	.word	0x3fca7e28
 8006278:	93c9db65 	.word	0x93c9db65
 800627c:	3fcd864a 	.word	0x3fcd864a
 8006280:	a91d4101 	.word	0xa91d4101
 8006284:	3fd17460 	.word	0x3fd17460
 8006288:	518f264d 	.word	0x518f264d
 800628c:	3fd55555 	.word	0x3fd55555
 8006290:	db6fabff 	.word	0xdb6fabff
 8006294:	3fdb6db6 	.word	0x3fdb6db6
 8006298:	33333303 	.word	0x33333303
 800629c:	3fe33333 	.word	0x3fe33333
 80062a0:	e0000000 	.word	0xe0000000
 80062a4:	3feec709 	.word	0x3feec709
 80062a8:	dc3a03fd 	.word	0xdc3a03fd
 80062ac:	3feec709 	.word	0x3feec709
 80062b0:	145b01f5 	.word	0x145b01f5
 80062b4:	be3e2fe0 	.word	0xbe3e2fe0
 80062b8:	43400000 	.word	0x43400000
 80062bc:	0003988e 	.word	0x0003988e
 80062c0:	000bb679 	.word	0x000bb679
 80062c4:	08007d38 	.word	0x08007d38
 80062c8:	3ff00000 	.word	0x3ff00000
 80062cc:	40080000 	.word	0x40080000
 80062d0:	08007d58 	.word	0x08007d58
 80062d4:	08007d48 	.word	0x08007d48
 80062d8:	a39b      	add	r3, pc, #620	; (adr r3, 8006548 <__ieee754_pow+0x9b0>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	4640      	mov	r0, r8
 80062e0:	4649      	mov	r1, r9
 80062e2:	f7f9 ff3b 	bl	800015c <__adddf3>
 80062e6:	4622      	mov	r2, r4
 80062e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062ec:	462b      	mov	r3, r5
 80062ee:	4650      	mov	r0, sl
 80062f0:	4639      	mov	r1, r7
 80062f2:	f7f9 ff31 	bl	8000158 <__aeabi_dsub>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062fe:	f7fa fb73 	bl	80009e8 <__aeabi_dcmpgt>
 8006302:	2800      	cmp	r0, #0
 8006304:	f47f ae0d 	bne.w	8005f22 <__ieee754_pow+0x38a>
 8006308:	4aa3      	ldr	r2, [pc, #652]	; (8006598 <__ieee754_pow+0xa00>)
 800630a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800630e:	4293      	cmp	r3, r2
 8006310:	f340 8103 	ble.w	800651a <__ieee754_pow+0x982>
 8006314:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006318:	2000      	movs	r0, #0
 800631a:	151b      	asrs	r3, r3, #20
 800631c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006320:	fa4a f303 	asr.w	r3, sl, r3
 8006324:	4433      	add	r3, r6
 8006326:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800632a:	4f9c      	ldr	r7, [pc, #624]	; (800659c <__ieee754_pow+0xa04>)
 800632c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006330:	4117      	asrs	r7, r2
 8006332:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006336:	ea23 0107 	bic.w	r1, r3, r7
 800633a:	f1c2 0214 	rsb	r2, r2, #20
 800633e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006342:	fa4a fa02 	asr.w	sl, sl, r2
 8006346:	2e00      	cmp	r6, #0
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4620      	mov	r0, r4
 800634e:	4629      	mov	r1, r5
 8006350:	bfb8      	it	lt
 8006352:	f1ca 0a00 	rsblt	sl, sl, #0
 8006356:	f7f9 feff 	bl	8000158 <__aeabi_dsub>
 800635a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800635e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006362:	4642      	mov	r2, r8
 8006364:	464b      	mov	r3, r9
 8006366:	f7f9 fef9 	bl	800015c <__adddf3>
 800636a:	a379      	add	r3, pc, #484	; (adr r3, 8006550 <__ieee754_pow+0x9b8>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	2000      	movs	r0, #0
 8006372:	460d      	mov	r5, r1
 8006374:	4604      	mov	r4, r0
 8006376:	f7fa f8a7 	bl	80004c8 <__aeabi_dmul>
 800637a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800637e:	4606      	mov	r6, r0
 8006380:	460f      	mov	r7, r1
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7f9 fee7 	bl	8000158 <__aeabi_dsub>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4640      	mov	r0, r8
 8006390:	4649      	mov	r1, r9
 8006392:	f7f9 fee1 	bl	8000158 <__aeabi_dsub>
 8006396:	a370      	add	r3, pc, #448	; (adr r3, 8006558 <__ieee754_pow+0x9c0>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7fa f894 	bl	80004c8 <__aeabi_dmul>
 80063a0:	a36f      	add	r3, pc, #444	; (adr r3, 8006560 <__ieee754_pow+0x9c8>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	4680      	mov	r8, r0
 80063a8:	4689      	mov	r9, r1
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fa f88b 	bl	80004c8 <__aeabi_dmul>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4640      	mov	r0, r8
 80063b8:	4649      	mov	r1, r9
 80063ba:	f7f9 fecf 	bl	800015c <__adddf3>
 80063be:	4604      	mov	r4, r0
 80063c0:	460d      	mov	r5, r1
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4630      	mov	r0, r6
 80063c8:	4639      	mov	r1, r7
 80063ca:	f7f9 fec7 	bl	800015c <__adddf3>
 80063ce:	4632      	mov	r2, r6
 80063d0:	463b      	mov	r3, r7
 80063d2:	4680      	mov	r8, r0
 80063d4:	4689      	mov	r9, r1
 80063d6:	f7f9 febf 	bl	8000158 <__aeabi_dsub>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7f9 feb9 	bl	8000158 <__aeabi_dsub>
 80063e6:	4642      	mov	r2, r8
 80063e8:	4606      	mov	r6, r0
 80063ea:	460f      	mov	r7, r1
 80063ec:	464b      	mov	r3, r9
 80063ee:	4640      	mov	r0, r8
 80063f0:	4649      	mov	r1, r9
 80063f2:	f7fa f869 	bl	80004c8 <__aeabi_dmul>
 80063f6:	a35c      	add	r3, pc, #368	; (adr r3, 8006568 <__ieee754_pow+0x9d0>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	4604      	mov	r4, r0
 80063fe:	460d      	mov	r5, r1
 8006400:	f7fa f862 	bl	80004c8 <__aeabi_dmul>
 8006404:	a35a      	add	r3, pc, #360	; (adr r3, 8006570 <__ieee754_pow+0x9d8>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7f9 fea5 	bl	8000158 <__aeabi_dsub>
 800640e:	4622      	mov	r2, r4
 8006410:	462b      	mov	r3, r5
 8006412:	f7fa f859 	bl	80004c8 <__aeabi_dmul>
 8006416:	a358      	add	r3, pc, #352	; (adr r3, 8006578 <__ieee754_pow+0x9e0>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7f9 fe9e 	bl	800015c <__adddf3>
 8006420:	4622      	mov	r2, r4
 8006422:	462b      	mov	r3, r5
 8006424:	f7fa f850 	bl	80004c8 <__aeabi_dmul>
 8006428:	a355      	add	r3, pc, #340	; (adr r3, 8006580 <__ieee754_pow+0x9e8>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f7f9 fe93 	bl	8000158 <__aeabi_dsub>
 8006432:	4622      	mov	r2, r4
 8006434:	462b      	mov	r3, r5
 8006436:	f7fa f847 	bl	80004c8 <__aeabi_dmul>
 800643a:	a353      	add	r3, pc, #332	; (adr r3, 8006588 <__ieee754_pow+0x9f0>)
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f7f9 fe8c 	bl	800015c <__adddf3>
 8006444:	4622      	mov	r2, r4
 8006446:	462b      	mov	r3, r5
 8006448:	f7fa f83e 	bl	80004c8 <__aeabi_dmul>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7f9 fe80 	bl	8000158 <__aeabi_dsub>
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fa f830 	bl	80004c8 <__aeabi_dmul>
 8006468:	2200      	movs	r2, #0
 800646a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800646e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006472:	4620      	mov	r0, r4
 8006474:	4629      	mov	r1, r5
 8006476:	f7f9 fe6f 	bl	8000158 <__aeabi_dsub>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006482:	f7fa f94b 	bl	800071c <__aeabi_ddiv>
 8006486:	4632      	mov	r2, r6
 8006488:	4604      	mov	r4, r0
 800648a:	460d      	mov	r5, r1
 800648c:	463b      	mov	r3, r7
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	f7fa f819 	bl	80004c8 <__aeabi_dmul>
 8006496:	4632      	mov	r2, r6
 8006498:	463b      	mov	r3, r7
 800649a:	f7f9 fe5f 	bl	800015c <__adddf3>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4620      	mov	r0, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	f7f9 fe57 	bl	8000158 <__aeabi_dsub>
 80064aa:	4642      	mov	r2, r8
 80064ac:	464b      	mov	r3, r9
 80064ae:	f7f9 fe53 	bl	8000158 <__aeabi_dsub>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	2000      	movs	r0, #0
 80064b8:	4939      	ldr	r1, [pc, #228]	; (80065a0 <__ieee754_pow+0xa08>)
 80064ba:	f7f9 fe4d 	bl	8000158 <__aeabi_dsub>
 80064be:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80064c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80064c6:	da2b      	bge.n	8006520 <__ieee754_pow+0x988>
 80064c8:	4652      	mov	r2, sl
 80064ca:	f000 f9b5 	bl	8006838 <scalbn>
 80064ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064d2:	f7ff bbf6 	b.w	8005cc2 <__ieee754_pow+0x12a>
 80064d6:	4b33      	ldr	r3, [pc, #204]	; (80065a4 <__ieee754_pow+0xa0c>)
 80064d8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80064dc:	429f      	cmp	r7, r3
 80064de:	f77f af13 	ble.w	8006308 <__ieee754_pow+0x770>
 80064e2:	4b31      	ldr	r3, [pc, #196]	; (80065a8 <__ieee754_pow+0xa10>)
 80064e4:	440b      	add	r3, r1
 80064e6:	4303      	orrs	r3, r0
 80064e8:	d00b      	beq.n	8006502 <__ieee754_pow+0x96a>
 80064ea:	a329      	add	r3, pc, #164	; (adr r3, 8006590 <__ieee754_pow+0x9f8>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064f4:	f7f9 ffe8 	bl	80004c8 <__aeabi_dmul>
 80064f8:	a325      	add	r3, pc, #148	; (adr r3, 8006590 <__ieee754_pow+0x9f8>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7ff bbe0 	b.w	8005cc2 <__ieee754_pow+0x12a>
 8006502:	4622      	mov	r2, r4
 8006504:	462b      	mov	r3, r5
 8006506:	f7f9 fe27 	bl	8000158 <__aeabi_dsub>
 800650a:	4642      	mov	r2, r8
 800650c:	464b      	mov	r3, r9
 800650e:	f7fa fa61 	bl	80009d4 <__aeabi_dcmpge>
 8006512:	2800      	cmp	r0, #0
 8006514:	f43f aef8 	beq.w	8006308 <__ieee754_pow+0x770>
 8006518:	e7e7      	b.n	80064ea <__ieee754_pow+0x952>
 800651a:	f04f 0a00 	mov.w	sl, #0
 800651e:	e71e      	b.n	800635e <__ieee754_pow+0x7c6>
 8006520:	4621      	mov	r1, r4
 8006522:	e7d4      	b.n	80064ce <__ieee754_pow+0x936>
 8006524:	f04f 0b00 	mov.w	fp, #0
 8006528:	f8df c074 	ldr.w	ip, [pc, #116]	; 80065a0 <__ieee754_pow+0xa08>
 800652c:	f7ff bb95 	b.w	8005c5a <__ieee754_pow+0xc2>
 8006530:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006534:	f7ff bb91 	b.w	8005c5a <__ieee754_pow+0xc2>
 8006538:	4638      	mov	r0, r7
 800653a:	4641      	mov	r1, r8
 800653c:	f7ff bbc3 	b.w	8005cc6 <__ieee754_pow+0x12e>
 8006540:	9200      	str	r2, [sp, #0]
 8006542:	f7ff bb9f 	b.w	8005c84 <__ieee754_pow+0xec>
 8006546:	bf00      	nop
 8006548:	652b82fe 	.word	0x652b82fe
 800654c:	3c971547 	.word	0x3c971547
 8006550:	00000000 	.word	0x00000000
 8006554:	3fe62e43 	.word	0x3fe62e43
 8006558:	fefa39ef 	.word	0xfefa39ef
 800655c:	3fe62e42 	.word	0x3fe62e42
 8006560:	0ca86c39 	.word	0x0ca86c39
 8006564:	be205c61 	.word	0xbe205c61
 8006568:	72bea4d0 	.word	0x72bea4d0
 800656c:	3e663769 	.word	0x3e663769
 8006570:	c5d26bf1 	.word	0xc5d26bf1
 8006574:	3ebbbd41 	.word	0x3ebbbd41
 8006578:	af25de2c 	.word	0xaf25de2c
 800657c:	3f11566a 	.word	0x3f11566a
 8006580:	16bebd93 	.word	0x16bebd93
 8006584:	3f66c16c 	.word	0x3f66c16c
 8006588:	5555553e 	.word	0x5555553e
 800658c:	3fc55555 	.word	0x3fc55555
 8006590:	c2f8f359 	.word	0xc2f8f359
 8006594:	01a56e1f 	.word	0x01a56e1f
 8006598:	3fe00000 	.word	0x3fe00000
 800659c:	000fffff 	.word	0x000fffff
 80065a0:	3ff00000 	.word	0x3ff00000
 80065a4:	4090cbff 	.word	0x4090cbff
 80065a8:	3f6f3400 	.word	0x3f6f3400

080065ac <__ieee754_sqrt>:
 80065ac:	4b54      	ldr	r3, [pc, #336]	; (8006700 <__ieee754_sqrt+0x154>)
 80065ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	438b      	bics	r3, r1
 80065b4:	4606      	mov	r6, r0
 80065b6:	460d      	mov	r5, r1
 80065b8:	460a      	mov	r2, r1
 80065ba:	460c      	mov	r4, r1
 80065bc:	d10f      	bne.n	80065de <__ieee754_sqrt+0x32>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	f7f9 ff81 	bl	80004c8 <__aeabi_dmul>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4630      	mov	r0, r6
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7f9 fdc5 	bl	800015c <__adddf3>
 80065d2:	4606      	mov	r6, r0
 80065d4:	460d      	mov	r5, r1
 80065d6:	4630      	mov	r0, r6
 80065d8:	4629      	mov	r1, r5
 80065da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065de:	2900      	cmp	r1, #0
 80065e0:	4607      	mov	r7, r0
 80065e2:	4603      	mov	r3, r0
 80065e4:	dc0e      	bgt.n	8006604 <__ieee754_sqrt+0x58>
 80065e6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80065ea:	ea5c 0707 	orrs.w	r7, ip, r7
 80065ee:	d0f2      	beq.n	80065d6 <__ieee754_sqrt+0x2a>
 80065f0:	b141      	cbz	r1, 8006604 <__ieee754_sqrt+0x58>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	f7f9 fdaf 	bl	8000158 <__aeabi_dsub>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	f7fa f88d 	bl	800071c <__aeabi_ddiv>
 8006602:	e7e6      	b.n	80065d2 <__ieee754_sqrt+0x26>
 8006604:	1512      	asrs	r2, r2, #20
 8006606:	d074      	beq.n	80066f2 <__ieee754_sqrt+0x146>
 8006608:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800660c:	07d5      	lsls	r5, r2, #31
 800660e:	f04f 0500 	mov.w	r5, #0
 8006612:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006616:	bf48      	it	mi
 8006618:	0fd9      	lsrmi	r1, r3, #31
 800661a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800661e:	bf44      	itt	mi
 8006620:	005b      	lslmi	r3, r3, #1
 8006622:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006626:	1051      	asrs	r1, r2, #1
 8006628:	0fda      	lsrs	r2, r3, #31
 800662a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800662e:	4628      	mov	r0, r5
 8006630:	2216      	movs	r2, #22
 8006632:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	1987      	adds	r7, r0, r6
 800663a:	42a7      	cmp	r7, r4
 800663c:	bfde      	ittt	le
 800663e:	19b8      	addle	r0, r7, r6
 8006640:	1be4      	suble	r4, r4, r7
 8006642:	19ad      	addle	r5, r5, r6
 8006644:	0fdf      	lsrs	r7, r3, #31
 8006646:	3a01      	subs	r2, #1
 8006648:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800664c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006650:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006654:	d1f0      	bne.n	8006638 <__ieee754_sqrt+0x8c>
 8006656:	f04f 0c20 	mov.w	ip, #32
 800665a:	4696      	mov	lr, r2
 800665c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006660:	4284      	cmp	r4, r0
 8006662:	eb06 070e 	add.w	r7, r6, lr
 8006666:	dc02      	bgt.n	800666e <__ieee754_sqrt+0xc2>
 8006668:	d112      	bne.n	8006690 <__ieee754_sqrt+0xe4>
 800666a:	429f      	cmp	r7, r3
 800666c:	d810      	bhi.n	8006690 <__ieee754_sqrt+0xe4>
 800666e:	2f00      	cmp	r7, #0
 8006670:	eb07 0e06 	add.w	lr, r7, r6
 8006674:	da42      	bge.n	80066fc <__ieee754_sqrt+0x150>
 8006676:	f1be 0f00 	cmp.w	lr, #0
 800667a:	db3f      	blt.n	80066fc <__ieee754_sqrt+0x150>
 800667c:	f100 0801 	add.w	r8, r0, #1
 8006680:	1a24      	subs	r4, r4, r0
 8006682:	4640      	mov	r0, r8
 8006684:	429f      	cmp	r7, r3
 8006686:	bf88      	it	hi
 8006688:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800668c:	1bdb      	subs	r3, r3, r7
 800668e:	4432      	add	r2, r6
 8006690:	0064      	lsls	r4, r4, #1
 8006692:	f1bc 0c01 	subs.w	ip, ip, #1
 8006696:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800669a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800669e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80066a2:	d1dd      	bne.n	8006660 <__ieee754_sqrt+0xb4>
 80066a4:	4323      	orrs	r3, r4
 80066a6:	d006      	beq.n	80066b6 <__ieee754_sqrt+0x10a>
 80066a8:	1c54      	adds	r4, r2, #1
 80066aa:	bf0b      	itete	eq
 80066ac:	4662      	moveq	r2, ip
 80066ae:	3201      	addne	r2, #1
 80066b0:	3501      	addeq	r5, #1
 80066b2:	f022 0201 	bicne.w	r2, r2, #1
 80066b6:	106b      	asrs	r3, r5, #1
 80066b8:	0852      	lsrs	r2, r2, #1
 80066ba:	07e8      	lsls	r0, r5, #31
 80066bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80066c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80066c4:	bf48      	it	mi
 80066c6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80066ca:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80066ce:	4616      	mov	r6, r2
 80066d0:	e781      	b.n	80065d6 <__ieee754_sqrt+0x2a>
 80066d2:	0adc      	lsrs	r4, r3, #11
 80066d4:	3915      	subs	r1, #21
 80066d6:	055b      	lsls	r3, r3, #21
 80066d8:	2c00      	cmp	r4, #0
 80066da:	d0fa      	beq.n	80066d2 <__ieee754_sqrt+0x126>
 80066dc:	02e6      	lsls	r6, r4, #11
 80066de:	d50a      	bpl.n	80066f6 <__ieee754_sqrt+0x14a>
 80066e0:	f1c2 0020 	rsb	r0, r2, #32
 80066e4:	fa23 f000 	lsr.w	r0, r3, r0
 80066e8:	1e55      	subs	r5, r2, #1
 80066ea:	4093      	lsls	r3, r2
 80066ec:	4304      	orrs	r4, r0
 80066ee:	1b4a      	subs	r2, r1, r5
 80066f0:	e78a      	b.n	8006608 <__ieee754_sqrt+0x5c>
 80066f2:	4611      	mov	r1, r2
 80066f4:	e7f0      	b.n	80066d8 <__ieee754_sqrt+0x12c>
 80066f6:	0064      	lsls	r4, r4, #1
 80066f8:	3201      	adds	r2, #1
 80066fa:	e7ef      	b.n	80066dc <__ieee754_sqrt+0x130>
 80066fc:	4680      	mov	r8, r0
 80066fe:	e7bf      	b.n	8006680 <__ieee754_sqrt+0xd4>
 8006700:	7ff00000 	.word	0x7ff00000

08006704 <finite>:
 8006704:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006708:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800670c:	0fc0      	lsrs	r0, r0, #31
 800670e:	4770      	bx	lr

08006710 <matherr>:
 8006710:	2000      	movs	r0, #0
 8006712:	4770      	bx	lr

08006714 <nan>:
 8006714:	2000      	movs	r0, #0
 8006716:	4901      	ldr	r1, [pc, #4]	; (800671c <nan+0x8>)
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	7ff80000 	.word	0x7ff80000

08006720 <rint>:
 8006720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006722:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006726:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800672a:	f1bc 0f13 	cmp.w	ip, #19
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
 8006732:	460b      	mov	r3, r1
 8006734:	4606      	mov	r6, r0
 8006736:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800673a:	dc5a      	bgt.n	80067f2 <rint+0xd2>
 800673c:	f1bc 0f00 	cmp.w	ip, #0
 8006740:	da2b      	bge.n	800679a <rint+0x7a>
 8006742:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006746:	4302      	orrs	r2, r0
 8006748:	d023      	beq.n	8006792 <rint+0x72>
 800674a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800674e:	4302      	orrs	r2, r0
 8006750:	4256      	negs	r6, r2
 8006752:	4316      	orrs	r6, r2
 8006754:	0c4b      	lsrs	r3, r1, #17
 8006756:	0b36      	lsrs	r6, r6, #12
 8006758:	4934      	ldr	r1, [pc, #208]	; (800682c <rint+0x10c>)
 800675a:	045b      	lsls	r3, r3, #17
 800675c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8006760:	ea46 0503 	orr.w	r5, r6, r3
 8006764:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8006768:	4602      	mov	r2, r0
 800676a:	462b      	mov	r3, r5
 800676c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006770:	4620      	mov	r0, r4
 8006772:	4629      	mov	r1, r5
 8006774:	f7f9 fcf2 	bl	800015c <__adddf3>
 8006778:	e9cd 0100 	strd	r0, r1, [sp]
 800677c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006780:	462b      	mov	r3, r5
 8006782:	4622      	mov	r2, r4
 8006784:	f7f9 fce8 	bl	8000158 <__aeabi_dsub>
 8006788:	4604      	mov	r4, r0
 800678a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800678e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8006792:	4620      	mov	r0, r4
 8006794:	4629      	mov	r1, r5
 8006796:	b003      	add	sp, #12
 8006798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800679a:	4a25      	ldr	r2, [pc, #148]	; (8006830 <rint+0x110>)
 800679c:	fa42 f20c 	asr.w	r2, r2, ip
 80067a0:	4011      	ands	r1, r2
 80067a2:	4301      	orrs	r1, r0
 80067a4:	d0f5      	beq.n	8006792 <rint+0x72>
 80067a6:	0852      	lsrs	r2, r2, #1
 80067a8:	ea05 0102 	and.w	r1, r5, r2
 80067ac:	ea50 0601 	orrs.w	r6, r0, r1
 80067b0:	d00c      	beq.n	80067cc <rint+0xac>
 80067b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067b6:	f1bc 0f13 	cmp.w	ip, #19
 80067ba:	bf0c      	ite	eq
 80067bc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80067c0:	2600      	movne	r6, #0
 80067c2:	ea25 0202 	bic.w	r2, r5, r2
 80067c6:	fa43 f30c 	asr.w	r3, r3, ip
 80067ca:	4313      	orrs	r3, r2
 80067cc:	4917      	ldr	r1, [pc, #92]	; (800682c <rint+0x10c>)
 80067ce:	4632      	mov	r2, r6
 80067d0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80067d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067d8:	4620      	mov	r0, r4
 80067da:	4629      	mov	r1, r5
 80067dc:	f7f9 fcbe 	bl	800015c <__adddf3>
 80067e0:	e9cd 0100 	strd	r0, r1, [sp]
 80067e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067e8:	4622      	mov	r2, r4
 80067ea:	462b      	mov	r3, r5
 80067ec:	f7f9 fcb4 	bl	8000158 <__aeabi_dsub>
 80067f0:	e008      	b.n	8006804 <rint+0xe4>
 80067f2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80067f6:	dd08      	ble.n	800680a <rint+0xea>
 80067f8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80067fc:	d1c9      	bne.n	8006792 <rint+0x72>
 80067fe:	4602      	mov	r2, r0
 8006800:	f7f9 fcac 	bl	800015c <__adddf3>
 8006804:	4604      	mov	r4, r0
 8006806:	460d      	mov	r5, r1
 8006808:	e7c3      	b.n	8006792 <rint+0x72>
 800680a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800680e:	f04f 32ff 	mov.w	r2, #4294967295
 8006812:	40ca      	lsrs	r2, r1
 8006814:	4210      	tst	r0, r2
 8006816:	d0bc      	beq.n	8006792 <rint+0x72>
 8006818:	0852      	lsrs	r2, r2, #1
 800681a:	4210      	tst	r0, r2
 800681c:	bf1f      	itttt	ne
 800681e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8006822:	ea20 0202 	bicne.w	r2, r0, r2
 8006826:	410e      	asrne	r6, r1
 8006828:	4316      	orrne	r6, r2
 800682a:	e7cf      	b.n	80067cc <rint+0xac>
 800682c:	08007d68 	.word	0x08007d68
 8006830:	000fffff 	.word	0x000fffff
 8006834:	00000000 	.word	0x00000000

08006838 <scalbn>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	4616      	mov	r6, r2
 800683c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006840:	4604      	mov	r4, r0
 8006842:	460d      	mov	r5, r1
 8006844:	460b      	mov	r3, r1
 8006846:	b982      	cbnz	r2, 800686a <scalbn+0x32>
 8006848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800684c:	4303      	orrs	r3, r0
 800684e:	d034      	beq.n	80068ba <scalbn+0x82>
 8006850:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <scalbn+0xd0>)
 8006852:	2200      	movs	r2, #0
 8006854:	f7f9 fe38 	bl	80004c8 <__aeabi_dmul>
 8006858:	4b2c      	ldr	r3, [pc, #176]	; (800690c <scalbn+0xd4>)
 800685a:	4604      	mov	r4, r0
 800685c:	429e      	cmp	r6, r3
 800685e:	460d      	mov	r5, r1
 8006860:	da0d      	bge.n	800687e <scalbn+0x46>
 8006862:	a325      	add	r3, pc, #148	; (adr r3, 80068f8 <scalbn+0xc0>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	e01c      	b.n	80068a4 <scalbn+0x6c>
 800686a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800686e:	42ba      	cmp	r2, r7
 8006870:	d109      	bne.n	8006886 <scalbn+0x4e>
 8006872:	4602      	mov	r2, r0
 8006874:	f7f9 fc72 	bl	800015c <__adddf3>
 8006878:	4604      	mov	r4, r0
 800687a:	460d      	mov	r5, r1
 800687c:	e01d      	b.n	80068ba <scalbn+0x82>
 800687e:	460b      	mov	r3, r1
 8006880:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006884:	3a36      	subs	r2, #54	; 0x36
 8006886:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800688a:	4432      	add	r2, r6
 800688c:	428a      	cmp	r2, r1
 800688e:	dd0c      	ble.n	80068aa <scalbn+0x72>
 8006890:	4622      	mov	r2, r4
 8006892:	462b      	mov	r3, r5
 8006894:	a11a      	add	r1, pc, #104	; (adr r1, 8006900 <scalbn+0xc8>)
 8006896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800689a:	f000 f83b 	bl	8006914 <copysign>
 800689e:	a318      	add	r3, pc, #96	; (adr r3, 8006900 <scalbn+0xc8>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fe10 	bl	80004c8 <__aeabi_dmul>
 80068a8:	e7e6      	b.n	8006878 <scalbn+0x40>
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	dd08      	ble.n	80068c0 <scalbn+0x88>
 80068ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068b6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80068ba:	4620      	mov	r0, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80068c4:	da0b      	bge.n	80068de <scalbn+0xa6>
 80068c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80068ca:	429e      	cmp	r6, r3
 80068cc:	4622      	mov	r2, r4
 80068ce:	462b      	mov	r3, r5
 80068d0:	dce0      	bgt.n	8006894 <scalbn+0x5c>
 80068d2:	a109      	add	r1, pc, #36	; (adr r1, 80068f8 <scalbn+0xc0>)
 80068d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068d8:	f000 f81c 	bl	8006914 <copysign>
 80068dc:	e7c1      	b.n	8006862 <scalbn+0x2a>
 80068de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068e2:	3236      	adds	r2, #54	; 0x36
 80068e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	2200      	movs	r2, #0
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <scalbn+0xd8>)
 80068f4:	e7d6      	b.n	80068a4 <scalbn+0x6c>
 80068f6:	bf00      	nop
 80068f8:	c2f8f359 	.word	0xc2f8f359
 80068fc:	01a56e1f 	.word	0x01a56e1f
 8006900:	8800759c 	.word	0x8800759c
 8006904:	7e37e43c 	.word	0x7e37e43c
 8006908:	43500000 	.word	0x43500000
 800690c:	ffff3cb0 	.word	0xffff3cb0
 8006910:	3c900000 	.word	0x3c900000

08006914 <copysign>:
 8006914:	b530      	push	{r4, r5, lr}
 8006916:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800691a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691e:	ea42 0503 	orr.w	r5, r2, r3
 8006922:	4629      	mov	r1, r5
 8006924:	bd30      	pop	{r4, r5, pc}
	...

08006928 <_init>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	bf00      	nop
 800692c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692e:	bc08      	pop	{r3}
 8006930:	469e      	mov	lr, r3
 8006932:	4770      	bx	lr

08006934 <_fini>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	bf00      	nop
 8006938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693a:	bc08      	pop	{r3}
 800693c:	469e      	mov	lr, r3
 800693e:	4770      	bx	lr
