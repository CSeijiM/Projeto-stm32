
Acelerometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d40  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005e50  08005e50  00015e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f10  08005f10  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005f10  08005f10  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f10  08005f10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f14  08005f14  00015f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20000078  08005f8c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08005f8c  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eea7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d64  00000000  00000000  0002ef44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  00030ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  00031ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000149a9  00000000  00000000  000329e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a39b  00000000  00000000  00047389  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073c78  00000000  00000000  00051724  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c539c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004468  00000000  00000000  000c5418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e38 	.word	0x08005e38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005e38 	.word	0x08005e38

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000a70:	2254      	movs	r2, #84	; 0x54
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MPU6050_Init+0x1c>)
 8000a76:	f003 ffc3 	bl	8004a00 <memcpy>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000094 	.word	0x20000094

08000a88 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000a98:	23d0      	movs	r3, #208	; 0xd0
 8000a9a:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	b299      	uxth	r1, r3
 8000aa4:	f107 020c 	add.w	r2, r7, #12
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2301      	movs	r3, #1
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <I2C_Read+0x4c>)
 8000ab0:	f001 fe74 	bl	800279c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <I2C_Read+0x4c>)
 8000ac6:	f001 ff67 	bl	8002998 <HAL_I2C_Master_Receive>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000094 	.word	0x20000094

08000ad8 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000af0:	23d0      	movs	r3, #208	; 0xd0
 8000af2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	b299      	uxth	r1, r3
 8000af8:	f107 020c 	add.w	r2, r7, #12
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2302      	movs	r3, #2
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <I2C_Write8+0x38>)
 8000b04:	f001 fe4a 	bl	800279c <HAL_I2C_Master_Transmit>
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000094 	.word	0x20000094

08000b14 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	206b      	movs	r0, #107	; 0x6b
 8000b24:	f7ff ffd8 	bl	8000ad8 <I2C_Write8>
	HAL_Delay(100);
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f001 fa7f 	bl	800202c <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b44:	b25a      	sxtb	r2, r3
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	4619      	mov	r1, r3
 8000b54:	206b      	movs	r0, #107	; 0x6b
 8000b56:	f7ff ffbf 	bl	8000ad8 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f001 fa66 	bl	800202c <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	78db      	ldrb	r3, [r3, #3]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	4619      	mov	r1, r3
 8000b72:	201a      	movs	r0, #26
 8000b74:	f7ff ffb0 	bl	8000ad8 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 0318 	and.w	r3, r3, #24
 8000b88:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	201b      	movs	r0, #27
 8000b90:	f7ff ffa2 	bl	8000ad8 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	789b      	ldrb	r3, [r3, #2]
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	f003 0318 	and.w	r3, r3, #24
 8000ba4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	201c      	movs	r0, #28
 8000bac:	f7ff ff94 	bl	8000ad8 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000bb0:	2004      	movs	r0, #4
 8000bb2:	f000 f857 	bl	8000c64 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d81a      	bhi.n	8000bf4 <MPU6050_Config+0xe0>
 8000bbe:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <MPU6050_Config+0xb0>)
 8000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc4:	08000bd5 	.word	0x08000bd5
 8000bc8:	08000bdd 	.word	0x08000bdd
 8000bcc:	08000be5 	.word	0x08000be5
 8000bd0:	08000bed 	.word	0x08000bed
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MPU6050_Config+0x12c>)
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <MPU6050_Config+0x130>)
 8000bd8:	601a      	str	r2, [r3, #0]
			break;
 8000bda:	e00c      	b.n	8000bf6 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MPU6050_Config+0x12c>)
 8000bde:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <MPU6050_Config+0x134>)
 8000be0:	601a      	str	r2, [r3, #0]
				break;
 8000be2:	e008      	b.n	8000bf6 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MPU6050_Config+0x12c>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <MPU6050_Config+0x138>)
 8000be8:	601a      	str	r2, [r3, #0]
			break;
 8000bea:	e004      	b.n	8000bf6 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MPU6050_Config+0x12c>)
 8000bee:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <MPU6050_Config+0x13c>)
 8000bf0:	601a      	str	r2, [r3, #0]
			break;
 8000bf2:	e000      	b.n	8000bf6 <MPU6050_Config+0xe2>
		
		default:
			break;
 8000bf4:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d81a      	bhi.n	8000c34 <MPU6050_Config+0x120>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <MPU6050_Config+0xf0>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c15 	.word	0x08000c15
 8000c08:	08000c1d 	.word	0x08000c1d
 8000c0c:	08000c25 	.word	0x08000c25
 8000c10:	08000c2d 	.word	0x08000c2d
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MPU6050_Config+0x140>)
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <MPU6050_Config+0x144>)
 8000c18:	601a      	str	r2, [r3, #0]
			break;
 8000c1a:	e00c      	b.n	8000c36 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MPU6050_Config+0x140>)
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <MPU6050_Config+0x148>)
 8000c20:	601a      	str	r2, [r3, #0]
				break;
 8000c22:	e008      	b.n	8000c36 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MPU6050_Config+0x140>)
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <MPU6050_Config+0x14c>)
 8000c28:	601a      	str	r2, [r3, #0]
			break;
 8000c2a:	e004      	b.n	8000c36 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MPU6050_Config+0x140>)
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <MPU6050_Config+0x130>)
 8000c30:	601a      	str	r2, [r3, #0]
			break;
 8000c32:	e000      	b.n	8000c36 <MPU6050_Config+0x122>
		
		default:
			break;
 8000c34:	bf00      	nop
	}
	
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000e8 	.word	0x200000e8
 8000c44:	3d7a0000 	.word	0x3d7a0000
 8000c48:	3dfa0000 	.word	0x3dfa0000
 8000c4c:	3e7a0000 	.word	0x3e7a0000
 8000c50:	3efa0000 	.word	0x3efa0000
 8000c54:	200000ec 	.word	0x200000ec
 8000c58:	3bfa0000 	.word	0x3bfa0000
 8000c5c:	3c7a0000 	.word	0x3c7a0000
 8000c60:	3cfa0000 	.word	0x3cfa0000

08000c64 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4619      	mov	r1, r3
 8000c72:	2019      	movs	r0, #25
 8000c74:	f7ff ff30 	bl	8000ad8 <I2C_Write8>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	203a      	movs	r0, #58	; 0x3a
 8000c94:	f7ff fef8 	bl	8000a88 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8000c98:	7f7b      	ldrb	r3, [r7, #29]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d04f      	beq.n	8000d3e <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2206      	movs	r2, #6
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	203b      	movs	r0, #59	; 0x3b
 8000ca8:	f7ff feee 	bl	8000a88 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8000cac:	7d3b      	ldrb	r3, [r7, #20]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	7d7b      	ldrb	r3, [r7, #21]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8000cd8:	7e3b      	ldrb	r3, [r7, #24]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	7e7b      	ldrb	r3, [r7, #25]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	2043      	movs	r0, #67	; 0x43
 8000cf8:	f7ff fec6 	bl	8000a88 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8000cfc:	7b3b      	ldrb	r3, [r7, #12]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	7b7b      	ldrb	r3, [r7, #13]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MPU6050_Get_Accel_RawData+0xc8>)
 8000d10:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4413      	add	r3, r2
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MPU6050_Get_Accel_RawData+0xc8>)
 8000d26:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8000d28:	7c3b      	ldrb	r3, [r7, #16]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	7c7b      	ldrb	r3, [r7, #17]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <MPU6050_Get_Accel_RawData+0xc8>)
 8000d3c:	809a      	strh	r2, [r3, #4]
	}
}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000f0 	.word	0x200000f0

08000d4c <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MPU6050_Get_Gyro_RawData+0x30>)
 8000d56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MPU6050_Get_Gyro_RawData+0x30>)
 8000d60:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <MPU6050_Get_Gyro_RawData+0x30>)
 8000d6a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	809a      	strh	r2, [r3, #4]
	
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	200000f0 	.word	0x200000f0

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f001 f8ee 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 fbaa 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f000 fd2c 	bl	80017ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d94:	f000 fbec 	bl	8001570 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d98:	f000 fc18 	bl	80015cc <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d9c:	f000 fc7a 	bl	8001694 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000da0:	f000 fc42 	bl	8001628 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //printRadioSettings();

  SSD1306_Init();
 8000da4:	f000 fd8e 	bl	80018c4 <SSD1306_Init>

  MPU6050_Init(&hi2c2);
 8000da8:	48c5      	ldr	r0, [pc, #788]	; (80010c0 <main+0x340>)
 8000daa:	f7ff fe5d 	bl	8000a68 <MPU6050_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dae:	2100      	movs	r1, #0
 8000db0:	48c4      	ldr	r0, [pc, #784]	; (80010c4 <main+0x344>)
 8000db2:	f003 f911 	bl	8003fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000db6:	2104      	movs	r1, #4
 8000db8:	48c2      	ldr	r0, [pc, #776]	; (80010c4 <main+0x344>)
 8000dba:	f003 f90d 	bl	8003fd8 <HAL_TIM_PWM_Start>

  myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	70bb      	strb	r3, [r7, #2]
  myMpuConfig.ClockSource = Internal_8MHz;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	703b      	strb	r3, [r7, #0]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	70fb      	strb	r3, [r7, #3]
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	707b      	strb	r3, [r7, #1]
  myMpuConfig.Sleep_Mode_Bit = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	713b      	strb	r3, [r7, #4]
  MPU6050_Config(&myMpuConfig);
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fe9d 	bl	8000b14 <MPU6050_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de0:	48b9      	ldr	r0, [pc, #740]	; (80010c8 <main+0x348>)
 8000de2:	f001 fb83 	bl	80024ec <HAL_GPIO_WritePin>
	  if(HAL_GetTick()-time_velocity_initial>1){
 8000de6:	f001 f917 	bl	8002018 <HAL_GetTick>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff faf1 	bl	80003d4 <__aeabi_ui2d>
 8000df2:	4bb6      	ldr	r3, [pc, #728]	; (80010cc <main+0x34c>)
 8000df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df8:	f7ff f9ae 	bl	8000158 <__aeabi_dsub>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	4bb1      	ldr	r3, [pc, #708]	; (80010d0 <main+0x350>)
 8000e0a:	f7ff fded 	bl	80009e8 <__aeabi_dcmpgt>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80e6 	beq.w	8000fe2 <main+0x262>
		  time_velocity_initial=HAL_GetTick();
 8000e16:	f001 f8ff 	bl	8002018 <HAL_GetTick>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fad9 	bl	80003d4 <__aeabi_ui2d>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	49a9      	ldr	r1, [pc, #676]	; (80010cc <main+0x34c>)
 8000e28:	e9c1 2300 	strd	r2, r3, [r1]

		  timePrev = time;
 8000e2c:	4ba9      	ldr	r3, [pc, #676]	; (80010d4 <main+0x354>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	49a9      	ldr	r1, [pc, #676]	; (80010d8 <main+0x358>)
 8000e34:	e9c1 2300 	strd	r2, r3, [r1]
		  time = HAL_GetTick();
 8000e38:	f001 f8ee 	bl	8002018 <HAL_GetTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fac8 	bl	80003d4 <__aeabi_ui2d>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	49a2      	ldr	r1, [pc, #648]	; (80010d4 <main+0x354>)
 8000e4a:	e9c1 2300 	strd	r2, r3, [r1]
		  elapsed = (time - timePrev) / 1000.0;
 8000e4e:	4ba1      	ldr	r3, [pc, #644]	; (80010d4 <main+0x354>)
 8000e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e54:	4ba0      	ldr	r3, [pc, #640]	; (80010d8 <main+0x358>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	f7ff f97d 	bl	8000158 <__aeabi_dsub>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	4b9c      	ldr	r3, [pc, #624]	; (80010dc <main+0x35c>)
 8000e6c:	f7ff fc56 	bl	800071c <__aeabi_ddiv>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	499a      	ldr	r1, [pc, #616]	; (80010e0 <main+0x360>)
 8000e76:	e9c1 2300 	strd	r2, r3, [r1]

		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8000e7a:	489a      	ldr	r0, [pc, #616]	; (80010e4 <main+0x364>)
 8000e7c:	f7ff ff66 	bl	8000d4c <MPU6050_Get_Gyro_RawData>

		  //gyro_angle_x =  ((myGyroRaw.x/65.5) - gyro_error_x)*elapsed;
		  gyro_angle_y =  ((myGyroRaw.y/65.5) - gyro_error_y)*elapsed;
 8000e80:	4b98      	ldr	r3, [pc, #608]	; (80010e4 <main+0x364>)
 8000e82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fab4 	bl	80003f4 <__aeabi_i2d>
 8000e8c:	a384      	add	r3, pc, #528	; (adr r3, 80010a0 <main+0x320>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	f7ff fc43 	bl	800071c <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4b92      	ldr	r3, [pc, #584]	; (80010e8 <main+0x368>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	f7ff f958 	bl	8000158 <__aeabi_dsub>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4b8b      	ldr	r3, [pc, #556]	; (80010e0 <main+0x360>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fb07 	bl	80004c8 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	498b      	ldr	r1, [pc, #556]	; (80010ec <main+0x36c>)
 8000ec0:	e9c1 2300 	strd	r2, r3, [r1]

		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8000ec4:	488a      	ldr	r0, [pc, #552]	; (80010f0 <main+0x370>)
 8000ec6:	f7ff fedb 	bl	8000c80 <MPU6050_Get_Accel_RawData>

		 // acc_angle_x = atan(myAccelRaw.y/sqrt(pow(myAccelRaw.x,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_x; //RELATIVO
		 // acc_angle_y = atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_y; //RELATIVO
		  acc_angle_y = atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654); //ABSOLUTA
 8000eca:	4b89      	ldr	r3, [pc, #548]	; (80010f0 <main+0x370>)
 8000ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fa8e 	bl	80003f4 <__aeabi_i2d>
 8000ed8:	4680      	mov	r8, r0
 8000eda:	4689      	mov	r9, r1
 8000edc:	4b84      	ldr	r3, [pc, #528]	; (80010f0 <main+0x370>)
 8000ede:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fa86 	bl	80003f4 <__aeabi_i2d>
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef0:	f003 ff28 	bl	8004d44 <pow>
 8000ef4:	4682      	mov	sl, r0
 8000ef6:	468b      	mov	fp, r1
 8000ef8:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <main+0x370>)
 8000efa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa78 	bl	80003f4 <__aeabi_i2d>
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0c:	f003 ff1a 	bl	8004d44 <pow>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4650      	mov	r0, sl
 8000f16:	4659      	mov	r1, fp
 8000f18:	f7ff f920 	bl	800015c <__adddf3>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f004 f86a 	bl	8004ffc <sqrt>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff fbf4 	bl	800071c <__aeabi_ddiv>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4610      	mov	r0, r2
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f003 fd74 	bl	8004a28 <atan>
 8000f40:	a359      	add	r3, pc, #356	; (adr r3, 80010a8 <main+0x328>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fabf 	bl	80004c8 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4969      	ldr	r1, [pc, #420]	; (80010f4 <main+0x374>)
 8000f50:	e9c1 2300 	strd	r2, r3, [r1]

		  //final_angle_x = 0.98*(final_angle_x + gyro_angle_x) + 0.02*acc_angle_x;
		  final_angle_y_init = 0.98*(final_angle_y_init + gyro_angle_y) + 0.02*acc_angle_y; // calcula angulo inicial (graus)
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <main+0x378>)
 8000f56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f5a:	4b64      	ldr	r3, [pc, #400]	; (80010ec <main+0x36c>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff f8fc 	bl	800015c <__adddf3>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	a350      	add	r3, pc, #320	; (adr r3, 80010b0 <main+0x330>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff faa9 	bl	80004c8 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4690      	mov	r8, r2
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <main+0x374>)
 8000f80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f84:	a34c      	add	r3, pc, #304	; (adr r3, 80010b8 <main+0x338>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fa9d 	bl	80004c8 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4640      	mov	r0, r8
 8000f94:	4649      	mov	r1, r9
 8000f96:	f7ff f8e1 	bl	800015c <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4956      	ldr	r1, [pc, #344]	; (80010f8 <main+0x378>)
 8000fa0:	e9c1 2300 	strd	r2, r3, [r1]

		  erro_init = final_angle_y_init - setpoint;
 8000fa4:	4b54      	ldr	r3, [pc, #336]	; (80010f8 <main+0x378>)
 8000fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <main+0x37c>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fa33 	bl	8000418 <__aeabi_f2d>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4640      	mov	r0, r8
 8000fb8:	4649      	mov	r1, r9
 8000fba:	f7ff f8cd 	bl	8000158 <__aeabi_dsub>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	494f      	ldr	r1, [pc, #316]	; (8001100 <main+0x380>)
 8000fc4:	e9c1 2300 	strd	r2, r3, [r1]
		  erro_integrado+=erro_init;
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <main+0x384>)
 8000fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <main+0x380>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff f8c2 	bl	800015c <__adddf3>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4949      	ldr	r1, [pc, #292]	; (8001104 <main+0x384>)
 8000fde:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  if(HAL_GetTick()-time_velocity_final>2){
 8000fe2:	f001 f819 	bl	8002018 <HAL_GetTick>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f9f3 	bl	80003d4 <__aeabi_ui2d>
 8000fee:	4b46      	ldr	r3, [pc, #280]	; (8001108 <main+0x388>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff f8b0 	bl	8000158 <__aeabi_dsub>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001008:	f7ff fcee 	bl	80009e8 <__aeabi_dcmpgt>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8130 	beq.w	8001274 <main+0x4f4>
		  time_velocity_final=HAL_GetTick();
 8001014:	f001 f800 	bl	8002018 <HAL_GetTick>
 8001018:	4603      	mov	r3, r0
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f9da 	bl	80003d4 <__aeabi_ui2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4938      	ldr	r1, [pc, #224]	; (8001108 <main+0x388>)
 8001026:	e9c1 2300 	strd	r2, r3, [r1]

		  timePrev = time;
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <main+0x354>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	4929      	ldr	r1, [pc, #164]	; (80010d8 <main+0x358>)
 8001032:	e9c1 2300 	strd	r2, r3, [r1]
		  time = HAL_GetTick();
 8001036:	f000 ffef 	bl	8002018 <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f9c9 	bl	80003d4 <__aeabi_ui2d>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4923      	ldr	r1, [pc, #140]	; (80010d4 <main+0x354>)
 8001048:	e9c1 2300 	strd	r2, r3, [r1]
		  elapsed = (time - timePrev) / 1000;
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <main+0x354>)
 800104e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <main+0x358>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff f87e 	bl	8000158 <__aeabi_dsub>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <main+0x35c>)
 800106a:	f7ff fb57 	bl	800071c <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	491b      	ldr	r1, [pc, #108]	; (80010e0 <main+0x360>)
 8001074:	e9c1 2300 	strd	r2, r3, [r1]

		  MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <main+0x364>)
 800107a:	f7ff fe67 	bl	8000d4c <MPU6050_Get_Gyro_RawData>

		  gyro_angle_y =  ((myGyroRaw.y/65.5) - gyro_error_y)*elapsed;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <main+0x364>)
 8001080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f9b5 	bl	80003f4 <__aeabi_i2d>
 800108a:	a305      	add	r3, pc, #20	; (adr r3, 80010a0 <main+0x320>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fb44 	bl	800071c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	e036      	b.n	800110c <main+0x38c>
 800109e:	bf00      	nop
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40506000 	.word	0x40506000
 80010a8:	1a53b118 	.word	0x1a53b118
 80010ac:	404ca5dc 	.word	0x404ca5dc
 80010b0:	f5c28f5c 	.word	0xf5c28f5c
 80010b4:	3fef5c28 	.word	0x3fef5c28
 80010b8:	47ae147b 	.word	0x47ae147b
 80010bc:	3f947ae1 	.word	0x3f947ae1
 80010c0:	200005ec 	.word	0x200005ec
 80010c4:	20000660 	.word	0x20000660
 80010c8:	40011000 	.word	0x40011000
 80010cc:	20000170 	.word	0x20000170
 80010d0:	3ff00000 	.word	0x3ff00000
 80010d4:	20000110 	.word	0x20000110
 80010d8:	20000108 	.word	0x20000108
 80010dc:	408f4000 	.word	0x408f4000
 80010e0:	20000118 	.word	0x20000118
 80010e4:	20000640 	.word	0x20000640
 80010e8:	20000100 	.word	0x20000100
 80010ec:	20000120 	.word	0x20000120
 80010f0:	20000704 	.word	0x20000704
 80010f4:	20000128 	.word	0x20000128
 80010f8:	20000130 	.word	0x20000130
 80010fc:	40400000 	.word	0x40400000
 8001100:	20000148 	.word	0x20000148
 8001104:	20000160 	.word	0x20000160
 8001108:	20000178 	.word	0x20000178
 800110c:	4bc0      	ldr	r3, [pc, #768]	; (8001410 <main+0x690>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff f821 	bl	8000158 <__aeabi_dsub>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	4bbd      	ldr	r3, [pc, #756]	; (8001414 <main+0x694>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff f9d0 	bl	80004c8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	49ba      	ldr	r1, [pc, #744]	; (8001418 <main+0x698>)
 800112e:	e9c1 2300 	strd	r2, r3, [r1]

		  MPU6050_Get_Accel_RawData(&myAccelRaw);
 8001132:	48ba      	ldr	r0, [pc, #744]	; (800141c <main+0x69c>)
 8001134:	f7ff fda4 	bl	8000c80 <MPU6050_Get_Accel_RawData>

		  acc_angle_y = atan(myAccelRaw.x*-1/sqrt(pow(myAccelRaw.y,2)+pow(myAccelRaw.z,2)))*(180/3.141592654) - acc_error_y;
 8001138:	4bb8      	ldr	r3, [pc, #736]	; (800141c <main+0x69c>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	425b      	negs	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f957 	bl	80003f4 <__aeabi_i2d>
 8001146:	4680      	mov	r8, r0
 8001148:	4689      	mov	r9, r1
 800114a:	4bb4      	ldr	r3, [pc, #720]	; (800141c <main+0x69c>)
 800114c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f94f 	bl	80003f4 <__aeabi_i2d>
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800115e:	f003 fdf1 	bl	8004d44 <pow>
 8001162:	4682      	mov	sl, r0
 8001164:	468b      	mov	fp, r1
 8001166:	4bad      	ldr	r3, [pc, #692]	; (800141c <main+0x69c>)
 8001168:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f941 	bl	80003f4 <__aeabi_i2d>
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800117a:	f003 fde3 	bl	8004d44 <pow>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4650      	mov	r0, sl
 8001184:	4659      	mov	r1, fp
 8001186:	f7fe ffe9 	bl	800015c <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f003 ff33 	bl	8004ffc <sqrt>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4640      	mov	r0, r8
 800119c:	4649      	mov	r1, r9
 800119e:	f7ff fabd 	bl	800071c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f003 fc3d 	bl	8004a28 <atan>
 80011ae:	a390      	add	r3, pc, #576	; (adr r3, 80013f0 <main+0x670>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff f988 	bl	80004c8 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	4b97      	ldr	r3, [pc, #604]	; (8001420 <main+0x6a0>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7fe ffc7 	bl	8000158 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4995      	ldr	r1, [pc, #596]	; (8001424 <main+0x6a4>)
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]

		  final_angle_y_final = 0.98*(final_angle_y_final + gyro_angle_y) + 0.02*acc_angle_y; // calcula angulo final (graus)
 80011d4:	4b94      	ldr	r3, [pc, #592]	; (8001428 <main+0x6a8>)
 80011d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011da:	4b8f      	ldr	r3, [pc, #572]	; (8001418 <main+0x698>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7fe ffbc 	bl	800015c <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	a382      	add	r3, pc, #520	; (adr r3, 80013f8 <main+0x678>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff f969 	bl	80004c8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4690      	mov	r8, r2
 80011fc:	4699      	mov	r9, r3
 80011fe:	4b89      	ldr	r3, [pc, #548]	; (8001424 <main+0x6a4>)
 8001200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001204:	a37e      	add	r3, pc, #504	; (adr r3, 8001400 <main+0x680>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff f95d 	bl	80004c8 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4640      	mov	r0, r8
 8001214:	4649      	mov	r1, r9
 8001216:	f7fe ffa1 	bl	800015c <__adddf3>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4982      	ldr	r1, [pc, #520]	; (8001428 <main+0x6a8>)
 8001220:	e9c1 2300 	strd	r2, r3, [r1]

		  erro_final = final_angle_y_final - setpoint;
 8001224:	4b80      	ldr	r3, [pc, #512]	; (8001428 <main+0x6a8>)
 8001226:	e9d3 8900 	ldrd	r8, r9, [r3]
 800122a:	4b80      	ldr	r3, [pc, #512]	; (800142c <main+0x6ac>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f8f3 	bl	8000418 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4640      	mov	r0, r8
 8001238:	4649      	mov	r1, r9
 800123a:	f7fe ff8d 	bl	8000158 <__aeabi_dsub>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	497b      	ldr	r1, [pc, #492]	; (8001430 <main+0x6b0>)
 8001244:	e9c1 2300 	strd	r2, r3, [r1]
		  erro_derivado = (erro_final-erro_init)/0.001;
 8001248:	4b79      	ldr	r3, [pc, #484]	; (8001430 <main+0x6b0>)
 800124a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124e:	4b79      	ldr	r3, [pc, #484]	; (8001434 <main+0x6b4>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7fe ff80 	bl	8000158 <__aeabi_dsub>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	a369      	add	r3, pc, #420	; (adr r3, 8001408 <main+0x688>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff fa59 	bl	800071c <__aeabi_ddiv>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4972      	ldr	r1, [pc, #456]	; (8001438 <main+0x6b8>)
 8001270:	e9c1 2300 	strd	r2, r3, [r1]

	  }

	  if(HAL_GetTick()-time_PID>5){
 8001274:	f000 fed0 	bl	8002018 <HAL_GetTick>
 8001278:	4603      	mov	r3, r0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8aa 	bl	80003d4 <__aeabi_ui2d>
 8001280:	4b6e      	ldr	r3, [pc, #440]	; (800143c <main+0x6bc>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7fe ff67 	bl	8000158 <__aeabi_dsub>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <main+0x6c0>)
 8001298:	f7ff fba6 	bl	80009e8 <__aeabi_dcmpgt>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d04d      	beq.n	800133e <main+0x5be>
		  time_PID=HAL_GetTick();
 80012a2:	f000 feb9 	bl	8002018 <HAL_GetTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f893 	bl	80003d4 <__aeabi_ui2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4962      	ldr	r1, [pc, #392]	; (800143c <main+0x6bc>)
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]

		  saida = kp*erro_init + ki*erro_integrado + kd*erro_derivado; // devo atualizar o calculo.
 80012b8:	4b62      	ldr	r3, [pc, #392]	; (8001444 <main+0x6c4>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f8ac 	bl	8000418 <__aeabi_f2d>
 80012c0:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <main+0x6b4>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f8ff 	bl	80004c8 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4690      	mov	r8, r2
 80012d0:	4699      	mov	r9, r3
 80012d2:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f89e 	bl	8000418 <__aeabi_f2d>
 80012dc:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <main+0x6c8>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f8f1 	bl	80004c8 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4640      	mov	r0, r8
 80012ec:	4649      	mov	r1, r9
 80012ee:	f7fe ff35 	bl	800015c <__adddf3>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4690      	mov	r8, r2
 80012f8:	4699      	mov	r9, r3
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f88a 	bl	8000418 <__aeabi_f2d>
 8001304:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <main+0x6b8>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff f8dd 	bl	80004c8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4640      	mov	r0, r8
 8001314:	4649      	mov	r1, r9
 8001316:	f7fe ff21 	bl	800015c <__adddf3>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	494b      	ldr	r1, [pc, #300]	; (800144c <main+0x6cc>)
 8001320:	e9c1 2300 	strd	r2, r3, [r1]
		  saida *=(1024/90);
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <main+0x6cc>)
 8001326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b48      	ldr	r3, [pc, #288]	; (8001450 <main+0x6d0>)
 8001330:	f7ff f8ca 	bl	80004c8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4944      	ldr	r1, [pc, #272]	; (800144c <main+0x6cc>)
 800133a:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  if(HAL_GetTick()-time_pwm>1){
 800133e:	f000 fe6b 	bl	8002018 <HAL_GetTick>
 8001342:	4603      	mov	r3, r0
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f845 	bl	80003d4 <__aeabi_ui2d>
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <main+0x6d4>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7fe ff02 	bl	8000158 <__aeabi_dsub>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <main+0x6d8>)
 8001362:	f7ff fb41 	bl	80009e8 <__aeabi_dcmpgt>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80b2 	beq.w	80014d2 <main+0x752>
		  time_pwm=HAL_GetTick();
 800136e:	f000 fe53 	bl	8002018 <HAL_GetTick>
 8001372:	4603      	mov	r3, r0
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f82d 	bl	80003d4 <__aeabi_ui2d>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4935      	ldr	r1, [pc, #212]	; (8001454 <main+0x6d4>)
 8001380:	e9c1 2300 	strd	r2, r3, [r1]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // pisca o led
 8001384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001388:	4834      	ldr	r0, [pc, #208]	; (800145c <main+0x6dc>)
 800138a:	f001 f8c7 	bl	800251c <HAL_GPIO_TogglePin>
		  if(final_angle_y_init<40 && final_angle_y_init>-40){
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <main+0x6e0>)
 8001390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <main+0x6e4>)
 800139a:	f7ff fb07 	bl	80009ac <__aeabi_dcmplt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8089 	beq.w	80014b8 <main+0x738>
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <main+0x6e0>)
 80013a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <main+0x6e8>)
 80013b2:	f7ff fb19 	bl	80009e8 <__aeabi_dcmpgt>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d07d      	beq.n	80014b8 <main+0x738>
			  if(saida>=0){
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <main+0x6cc>)
 80013be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	f7ff fb03 	bl	80009d4 <__aeabi_dcmpge>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d04d      	beq.n	8001470 <main+0x6f0>
				  TIM1->CCR1 = saida;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <main+0x6cc>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	4e24      	ldr	r6, [pc, #144]	; (800146c <main+0x6ec>)
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fb22 	bl	8000a28 <__aeabi_d2uiz>
 80013e4:	4603      	mov	r3, r0
 80013e6:	6373      	str	r3, [r6, #52]	; 0x34
				  TIM1->CCR2 = 0;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <main+0x6ec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38
			  if(saida>=0){
 80013ee:	e070      	b.n	80014d2 <main+0x752>
 80013f0:	1a53b118 	.word	0x1a53b118
 80013f4:	404ca5dc 	.word	0x404ca5dc
 80013f8:	f5c28f5c 	.word	0xf5c28f5c
 80013fc:	3fef5c28 	.word	0x3fef5c28
 8001400:	47ae147b 	.word	0x47ae147b
 8001404:	3f947ae1 	.word	0x3f947ae1
 8001408:	d2f1a9fc 	.word	0xd2f1a9fc
 800140c:	3f50624d 	.word	0x3f50624d
 8001410:	20000100 	.word	0x20000100
 8001414:	20000118 	.word	0x20000118
 8001418:	20000120 	.word	0x20000120
 800141c:	20000704 	.word	0x20000704
 8001420:	200000f8 	.word	0x200000f8
 8001424:	20000128 	.word	0x20000128
 8001428:	20000138 	.word	0x20000138
 800142c:	40400000 	.word	0x40400000
 8001430:	20000150 	.word	0x20000150
 8001434:	20000148 	.word	0x20000148
 8001438:	20000168 	.word	0x20000168
 800143c:	20000140 	.word	0x20000140
 8001440:	40140000 	.word	0x40140000
 8001444:	41500000 	.word	0x41500000
 8001448:	20000160 	.word	0x20000160
 800144c:	20000158 	.word	0x20000158
 8001450:	40260000 	.word	0x40260000
 8001454:	20000180 	.word	0x20000180
 8001458:	3ff00000 	.word	0x3ff00000
 800145c:	40011000 	.word	0x40011000
 8001460:	20000130 	.word	0x20000130
 8001464:	40440000 	.word	0x40440000
 8001468:	c0440000 	.word	0xc0440000
 800146c:	40012c00 	.word	0x40012c00
			  }
			  else if(saida<0){
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <main+0x754>)
 8001472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	f7ff fa95 	bl	80009ac <__aeabi_dcmplt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d100      	bne.n	800148a <main+0x70a>
			  if(saida>=0){
 8001488:	e023      	b.n	80014d2 <main+0x752>
				  aux_saida=saida*-1;
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <main+0x754>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	4614      	mov	r4, r2
 8001492:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <main+0x758>)
 8001498:	e9c3 4500 	strd	r4, r5, [r3]
				  TIM1->CCR1 = 0;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <main+0x75c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM1->CCR2 = aux_saida;
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <main+0x758>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	4e0c      	ldr	r6, [pc, #48]	; (80014dc <main+0x75c>)
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fabb 	bl	8000a28 <__aeabi_d2uiz>
 80014b2:	4603      	mov	r3, r0
 80014b4:	63b3      	str	r3, [r6, #56]	; 0x38
			  if(saida>=0){
 80014b6:	e00c      	b.n	80014d2 <main+0x752>
			  }
		  }
		  else{
			  TIM1->CCR1 = 0;
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <main+0x75c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR2 = 0;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <main+0x75c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	639a      	str	r2, [r3, #56]	; 0x38
			  erro_integrado = 0;
 80014c4:	4906      	ldr	r1, [pc, #24]	; (80014e0 <main+0x760>)
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,GPIO_PIN_SET);
 80014d2:	e482      	b.n	8000dda <main+0x5a>
 80014d4:	20000158 	.word	0x20000158
 80014d8:	20000590 	.word	0x20000590
 80014dc:	40012c00 	.word	0x40012c00
 80014e0:	20000160 	.word	0x20000160

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b090      	sub	sp, #64	; 0x40
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	2228      	movs	r2, #40	; 0x28
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fa8f 	bl	8004a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001522:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	4618      	mov	r0, r3
 800152e:	f002 f88b 	bl	8003648 <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001538:	f000 f9be 	bl	80018b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	2302      	movs	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2102      	movs	r1, #2
 8001556:	4618      	mov	r0, r3
 8001558:	f002 faf6 	bl	8003b48 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001562:	f000 f9a9 	bl	80018b8 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3740      	adds	r7, #64	; 0x40
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <MX_I2C1_Init+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_I2C1_Init+0x50>)
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x58>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_I2C1_Init+0x50>)
 800158e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015ae:	f000 ffcd 	bl	800254c <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f000 f97e 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000598 	.word	0x20000598
 80015c4:	40005400 	.word	0x40005400
 80015c8:	00061a80 	.word	0x00061a80

080015cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_I2C2_Init+0x50>)
 80015d2:	4a13      	ldr	r2, [pc, #76]	; (8001620 <MX_I2C2_Init+0x54>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_I2C2_Init+0x50>)
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_I2C2_Init+0x58>)
 80015da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_I2C2_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_I2C2_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_I2C2_Init+0x50>)
 80015ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_I2C2_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_I2C2_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MX_I2C2_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_I2C2_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_I2C2_Init+0x50>)
 800160a:	f000 ff9f 	bl	800254c <HAL_I2C_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001614:	f000 f950 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200005ec 	.word	0x200005ec
 8001620:	40005800 	.word	0x40005800
 8001624:	00061a80 	.word	0x00061a80

08001628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <MX_SPI1_Init+0x64>)
 800162e:	4a18      	ldr	r2, [pc, #96]	; (8001690 <MX_SPI1_Init+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <MX_SPI1_Init+0x64>)
 8001634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_SPI1_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <MX_SPI1_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_SPI1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_SPI1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_SPI1_Init+0x64>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_SPI1_Init+0x64>)
 800165c:	2220      	movs	r2, #32
 800165e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <MX_SPI1_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_SPI1_Init+0x64>)
 8001674:	220a      	movs	r2, #10
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_SPI1_Init+0x64>)
 800167a:	f002 fbed 	bl	8003e58 <HAL_SPI_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001684:	f000 f918 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200006a0 	.word	0x200006a0
 8001690:	40013000 	.word	0x40013000

08001694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b096      	sub	sp, #88	; 0x58
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2220      	movs	r2, #32
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f9a2 	bl	8004a16 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <MX_TIM1_Init+0x150>)
 80016d4:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <MX_TIM1_Init+0x154>)
 80016d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128;
 80016d8:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <MX_TIM1_Init+0x150>)
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <MX_TIM1_Init+0x150>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <MX_TIM1_Init+0x150>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ec:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <MX_TIM1_Init+0x150>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <MX_TIM1_Init+0x150>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <MX_TIM1_Init+0x150>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016fe:	4839      	ldr	r0, [pc, #228]	; (80017e4 <MX_TIM1_Init+0x150>)
 8001700:	f002 fc0b 	bl	8003f1a <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800170a:	f000 f8d5 	bl	80018b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001718:	4619      	mov	r1, r3
 800171a:	4832      	ldr	r0, [pc, #200]	; (80017e4 <MX_TIM1_Init+0x150>)
 800171c:	f002 fd54 	bl	80041c8 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001726:	f000 f8c7 	bl	80018b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800172a:	482e      	ldr	r0, [pc, #184]	; (80017e4 <MX_TIM1_Init+0x150>)
 800172c:	f002 fc20 	bl	8003f70 <HAL_TIM_PWM_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001736:	f000 f8bf 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001746:	4619      	mov	r1, r3
 8001748:	4826      	ldr	r0, [pc, #152]	; (80017e4 <MX_TIM1_Init+0x150>)
 800174a:	f003 f899 	bl	8004880 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001754:	f000 f8b0 	bl	80018b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001758:	2360      	movs	r3, #96	; 0x60
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	4819      	ldr	r0, [pc, #100]	; (80017e4 <MX_TIM1_Init+0x150>)
 800177e:	f002 fc5d 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001788:	f000 f896 	bl	80018b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	2204      	movs	r2, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4813      	ldr	r0, [pc, #76]	; (80017e4 <MX_TIM1_Init+0x150>)
 8001796:	f002 fc51 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017a0:	f000 f88a 	bl	80018b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM1_Init+0x150>)
 80017c8:	f003 f89e 	bl	8004908 <HAL_TIMEx_ConfigBreakDeadTime>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80017d2:	f000 f871 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM1_Init+0x150>)
 80017d8:	f000 fb0e 	bl	8001df8 <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3758      	adds	r7, #88	; 0x58
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000660 	.word	0x20000660
 80017e8:	40012c00 	.word	0x40012c00

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <MX_GPIO_Init+0xc0>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a29      	ldr	r2, [pc, #164]	; (80018ac <MX_GPIO_Init+0xc0>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <MX_GPIO_Init+0xc0>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <MX_GPIO_Init+0xc0>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a23      	ldr	r2, [pc, #140]	; (80018ac <MX_GPIO_Init+0xc0>)
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <MX_GPIO_Init+0xc0>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <MX_GPIO_Init+0xc0>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <MX_GPIO_Init+0xc0>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_GPIO_Init+0xc0>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_GPIO_Init+0xc0>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a17      	ldr	r2, [pc, #92]	; (80018ac <MX_GPIO_Init+0xc0>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_GPIO_Init+0xc0>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <MX_GPIO_Init+0xc4>)
 8001868:	f000 fe40 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800186c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2302      	movs	r3, #2
 800187c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 0310 	add.w	r3, r7, #16
 8001882:	4619      	mov	r1, r3
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <MX_GPIO_Init+0xc4>)
 8001886:	f000 fcd7 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_PIN_Pin CE_PIN_Pin */
  GPIO_InitStruct.Pin = CSN_PIN_Pin|CE_PIN_Pin;
 800188a:	23c0      	movs	r3, #192	; 0xc0
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_GPIO_Init+0xc8>)
 800189e:	f000 fccb 	bl	8002238 <HAL_GPIO_Init>

}
 80018a2:	bf00      	nop
 80018a4:	3720      	adds	r7, #32
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40010c00 	.word	0x40010c00

080018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80018ca:	f000 f905 	bl	8001ad8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80018ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80018d2:	2201      	movs	r2, #1
 80018d4:	2178      	movs	r1, #120	; 0x78
 80018d6:	485b      	ldr	r0, [pc, #364]	; (8001a44 <SSD1306_Init+0x180>)
 80018d8:	f001 fa8c 	bl	8002df4 <HAL_I2C_IsDeviceReady>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e0a9      	b.n	8001a3a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80018e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80018ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ec:	e002      	b.n	80018f4 <SSD1306_Init+0x30>
		p--;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80018fa:	22ae      	movs	r2, #174	; 0xae
 80018fc:	2100      	movs	r1, #0
 80018fe:	2078      	movs	r0, #120	; 0x78
 8001900:	f000 f946 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001904:	2220      	movs	r2, #32
 8001906:	2100      	movs	r1, #0
 8001908:	2078      	movs	r0, #120	; 0x78
 800190a:	f000 f941 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800190e:	2210      	movs	r2, #16
 8001910:	2100      	movs	r1, #0
 8001912:	2078      	movs	r0, #120	; 0x78
 8001914:	f000 f93c 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001918:	22b0      	movs	r2, #176	; 0xb0
 800191a:	2100      	movs	r1, #0
 800191c:	2078      	movs	r0, #120	; 0x78
 800191e:	f000 f937 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001922:	22c8      	movs	r2, #200	; 0xc8
 8001924:	2100      	movs	r1, #0
 8001926:	2078      	movs	r0, #120	; 0x78
 8001928:	f000 f932 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2078      	movs	r0, #120	; 0x78
 8001932:	f000 f92d 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001936:	2210      	movs	r2, #16
 8001938:	2100      	movs	r1, #0
 800193a:	2078      	movs	r0, #120	; 0x78
 800193c:	f000 f928 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001940:	2240      	movs	r2, #64	; 0x40
 8001942:	2100      	movs	r1, #0
 8001944:	2078      	movs	r0, #120	; 0x78
 8001946:	f000 f923 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800194a:	2281      	movs	r2, #129	; 0x81
 800194c:	2100      	movs	r1, #0
 800194e:	2078      	movs	r0, #120	; 0x78
 8001950:	f000 f91e 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001954:	22ff      	movs	r2, #255	; 0xff
 8001956:	2100      	movs	r1, #0
 8001958:	2078      	movs	r0, #120	; 0x78
 800195a:	f000 f919 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800195e:	22a1      	movs	r2, #161	; 0xa1
 8001960:	2100      	movs	r1, #0
 8001962:	2078      	movs	r0, #120	; 0x78
 8001964:	f000 f914 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001968:	22a6      	movs	r2, #166	; 0xa6
 800196a:	2100      	movs	r1, #0
 800196c:	2078      	movs	r0, #120	; 0x78
 800196e:	f000 f90f 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001972:	22a8      	movs	r2, #168	; 0xa8
 8001974:	2100      	movs	r1, #0
 8001976:	2078      	movs	r0, #120	; 0x78
 8001978:	f000 f90a 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800197c:	223f      	movs	r2, #63	; 0x3f
 800197e:	2100      	movs	r1, #0
 8001980:	2078      	movs	r0, #120	; 0x78
 8001982:	f000 f905 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001986:	22a4      	movs	r2, #164	; 0xa4
 8001988:	2100      	movs	r1, #0
 800198a:	2078      	movs	r0, #120	; 0x78
 800198c:	f000 f900 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001990:	22d3      	movs	r2, #211	; 0xd3
 8001992:	2100      	movs	r1, #0
 8001994:	2078      	movs	r0, #120	; 0x78
 8001996:	f000 f8fb 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2078      	movs	r0, #120	; 0x78
 80019a0:	f000 f8f6 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80019a4:	22d5      	movs	r2, #213	; 0xd5
 80019a6:	2100      	movs	r1, #0
 80019a8:	2078      	movs	r0, #120	; 0x78
 80019aa:	f000 f8f1 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80019ae:	22f0      	movs	r2, #240	; 0xf0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2078      	movs	r0, #120	; 0x78
 80019b4:	f000 f8ec 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80019b8:	22d9      	movs	r2, #217	; 0xd9
 80019ba:	2100      	movs	r1, #0
 80019bc:	2078      	movs	r0, #120	; 0x78
 80019be:	f000 f8e7 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80019c2:	2222      	movs	r2, #34	; 0x22
 80019c4:	2100      	movs	r1, #0
 80019c6:	2078      	movs	r0, #120	; 0x78
 80019c8:	f000 f8e2 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80019cc:	22da      	movs	r2, #218	; 0xda
 80019ce:	2100      	movs	r1, #0
 80019d0:	2078      	movs	r0, #120	; 0x78
 80019d2:	f000 f8dd 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80019d6:	2212      	movs	r2, #18
 80019d8:	2100      	movs	r1, #0
 80019da:	2078      	movs	r0, #120	; 0x78
 80019dc:	f000 f8d8 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80019e0:	22db      	movs	r2, #219	; 0xdb
 80019e2:	2100      	movs	r1, #0
 80019e4:	2078      	movs	r0, #120	; 0x78
 80019e6:	f000 f8d3 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80019ea:	2220      	movs	r2, #32
 80019ec:	2100      	movs	r1, #0
 80019ee:	2078      	movs	r0, #120	; 0x78
 80019f0:	f000 f8ce 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80019f4:	228d      	movs	r2, #141	; 0x8d
 80019f6:	2100      	movs	r1, #0
 80019f8:	2078      	movs	r0, #120	; 0x78
 80019fa:	f000 f8c9 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80019fe:	2214      	movs	r2, #20
 8001a00:	2100      	movs	r1, #0
 8001a02:	2078      	movs	r0, #120	; 0x78
 8001a04:	f000 f8c4 	bl	8001b90 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a08:	22af      	movs	r2, #175	; 0xaf
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2078      	movs	r0, #120	; 0x78
 8001a0e:	f000 f8bf 	bl	8001b90 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a12:	222e      	movs	r2, #46	; 0x2e
 8001a14:	2100      	movs	r1, #0
 8001a16:	2078      	movs	r0, #120	; 0x78
 8001a18:	f000 f8ba 	bl	8001b90 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f000 f843 	bl	8001aa8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001a22:	f000 f813 	bl	8001a4c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <SSD1306_Init+0x184>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SSD1306_Init+0x184>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SSD1306_Init+0x184>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000598 	.word	0x20000598
 8001a48:	20000588 	.word	0x20000588

08001a4c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	e01d      	b.n	8001a94 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	3b50      	subs	r3, #80	; 0x50
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2100      	movs	r1, #0
 8001a62:	2078      	movs	r0, #120	; 0x78
 8001a64:	f000 f894 	bl	8001b90 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2078      	movs	r0, #120	; 0x78
 8001a6e:	f000 f88f 	bl	8001b90 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a72:	2210      	movs	r2, #16
 8001a74:	2100      	movs	r1, #0
 8001a76:	2078      	movs	r0, #120	; 0x78
 8001a78:	f000 f88a 	bl	8001b90 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	01db      	lsls	r3, r3, #7
 8001a80:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <SSD1306_UpdateScreen+0x58>)
 8001a82:	441a      	add	r2, r3
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	2140      	movs	r1, #64	; 0x40
 8001a88:	2078      	movs	r0, #120	; 0x78
 8001a8a:	f000 f839 	bl	8001b00 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	3301      	adds	r3, #1
 8001a92:	71fb      	strb	r3, [r7, #7]
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2b07      	cmp	r3, #7
 8001a98:	d9de      	bls.n	8001a58 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000188 	.word	0x20000188

08001aa8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <SSD1306_Fill+0x14>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e000      	b.n	8001abe <SSD1306_Fill+0x16>
 8001abc:	23ff      	movs	r3, #255	; 0xff
 8001abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <SSD1306_Fill+0x2c>)
 8001ac6:	f002 ffa6 	bl	8004a16 <memset>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000188 	.word	0x20000188

08001ad8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <ssd1306_I2C_Init+0x24>)
 8001ae0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ae2:	e002      	b.n	8001aea <ssd1306_I2C_Init+0x12>
		p--;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	0003d090 	.word	0x0003d090

08001b00 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b0c7      	sub	sp, #284	; 0x11c
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	4604      	mov	r4, r0
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4639      	mov	r1, r7
 8001b0c:	600a      	str	r2, [r1, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	1dfb      	adds	r3, r7, #7
 8001b12:	4622      	mov	r2, r4
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	4602      	mov	r2, r0
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	460a      	mov	r2, r1
 8001b20:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	1dba      	adds	r2, r7, #6
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b32:	e010      	b.n	8001b56 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001b34:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b38:	463a      	mov	r2, r7
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b42:	3301      	adds	r3, #1
 8001b44:	7811      	ldrb	r1, [r2, #0]
 8001b46:	f107 020c 	add.w	r2, r7, #12
 8001b4a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b4c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b50:	3301      	adds	r3, #1
 8001b52:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	1d3a      	adds	r2, r7, #4
 8001b5e:	8812      	ldrh	r2, [r2, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8e7      	bhi.n	8001b34 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b299      	uxth	r1, r3
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b298      	uxth	r0, r3
 8001b72:	f107 020c 	add.w	r2, r7, #12
 8001b76:	230a      	movs	r3, #10
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <ssd1306_I2C_WriteMulti+0x8c>)
 8001b7e:	f000 fe0d 	bl	800279c <HAL_I2C_Master_Transmit>
}
 8001b82:	bf00      	nop
 8001b84:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	20000598 	.word	0x20000598

08001b90 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	71bb      	strb	r3, [r7, #6]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	b299      	uxth	r1, r3
 8001bae:	f107 020c 	add.w	r2, r7, #12
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <ssd1306_I2C_Write+0x38>)
 8001bba:	f000 fdef 	bl	800279c <HAL_I2C_Master_Transmit>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000598 	.word	0x20000598

08001bcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6193      	str	r3, [r2, #24]
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_MspInit+0x5c>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_MspInit+0x5c>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_MspInit+0x60>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_MspInit+0x60>)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000

08001c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	; 0x30
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_I2C_MspInit+0xe4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d133      	bne.n	8001cb8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6e:	2312      	movs	r3, #18
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4827      	ldr	r0, [pc, #156]	; (8001d1c <HAL_I2C_MspInit+0xec>)
 8001c7e:	f000 fadb 	bl	8002238 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_I2C_MspInit+0xf0>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <HAL_I2C_MspInit+0xf0>)
 8001c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cb6:	e029      	b.n	8001d0c <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_I2C_MspInit+0xf4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d124      	bne.n	8001d0c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6193      	str	r3, [r2, #24]
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce0:	2312      	movs	r3, #18
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	4619      	mov	r1, r3
 8001cee:	480b      	ldr	r0, [pc, #44]	; (8001d1c <HAL_I2C_MspInit+0xec>)
 8001cf0:	f000 faa2 	bl	8002238 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001cfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cfe:	61d3      	str	r3, [r2, #28]
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_I2C_MspInit+0xe8>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40005400 	.word	0x40005400
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010c00 	.word	0x40010c00
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40005800 	.word	0x40005800

08001d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_SPI_MspInit+0x88>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d12f      	bne.n	8001da8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d48:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_SPI_MspInit+0x8c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_SPI_MspInit+0x8c>)
 8001d4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_SPI_MspInit+0x8c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_SPI_MspInit+0x8c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <HAL_SPI_MspInit+0x8c>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_SPI_MspInit+0x8c>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d78:	23a0      	movs	r3, #160	; 0xa0
 8001d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480b      	ldr	r0, [pc, #44]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001d8c:	f000 fa54 	bl	8002238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d90:	2340      	movs	r3, #64	; 0x40
 8001d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <HAL_SPI_MspInit+0x90>)
 8001da4:	f000 fa48 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40013000 	.word	0x40013000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010800 	.word	0x40010800

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_TIM_Base_MspInit+0x34>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10b      	bne.n	8001de6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_TIM_Base_MspInit+0x38>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_TIM_Base_MspInit+0x38>)
 8001dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd8:	6193      	str	r3, [r2, #24]
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_TIM_Base_MspInit+0x38>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	40021000 	.word	0x40021000

08001df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_TIM_MspPostInit+0x5c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d118      	bne.n	8001e4a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_TIM_MspPostInit+0x60>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_TIM_MspPostInit+0x60>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_TIM_MspPostInit+0x60>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0310 	add.w	r3, r7, #16
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <HAL_TIM_MspPostInit+0x64>)
 8001e46:	f000 f9f7 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010800 	.word	0x40010800

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <HardFault_Handler+0x4>

08001e72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <MemManage_Handler+0x4>

08001e78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <BusFault_Handler+0x4>

08001e7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <UsageFault_Handler+0x4>

08001e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 f8a2 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <SystemInit+0x5c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <SystemInit+0x5c>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <SystemInit+0x5c>)
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4911      	ldr	r1, [pc, #68]	; (8001f10 <SystemInit+0x5c>)
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <SystemInit+0x60>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <SystemInit+0x5c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <SystemInit+0x5c>)
 8001ed6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <SystemInit+0x5c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <SystemInit+0x5c>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <SystemInit+0x5c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <SystemInit+0x5c>)
 8001ef2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ef6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SystemInit+0x5c>)
 8001efa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001efe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SystemInit+0x64>)
 8001f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f06:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40021000 	.word	0x40021000
 8001f14:	f8ff0000 	.word	0xf8ff0000
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f1e:	e003      	b.n	8001f28 <LoopCopyDataInit>

08001f20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f26:	3104      	adds	r1, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f28:	480a      	ldr	r0, [pc, #40]	; (8001f54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f30:	d3f6      	bcc.n	8001f20 <CopyDataInit>
  ldr r2, =_sbss
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f34:	e002      	b.n	8001f3c <LoopFillZerobss>

08001f36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f38:	f842 3b04 	str.w	r3, [r2], #4

08001f3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f40:	d3f9      	bcc.n	8001f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f42:	f7ff ffb7 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f46:	f002 fd37 	bl	80049b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f4a:	f7fe ff19 	bl	8000d80 <main>
  bx lr
 8001f4e:	4770      	bx	lr
  ldr r3, =_sidata
 8001f50:	08005f18 	.word	0x08005f18
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f58:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001f5c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001f60:	20000710 	.word	0x20000710

08001f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC1_2_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_Init+0x28>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_Init+0x28>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f929 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fe22 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f933 	bl	800221e <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 f909 	bl	80021e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_IncTick+0x1c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_IncTick+0x20>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_IncTick+0x20>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000008 	.word	0x20000008
 8002014:	2000070c 	.word	0x2000070c

08002018 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b02      	ldr	r3, [pc, #8]	; (8002028 <HAL_GetTick+0x10>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	2000070c 	.word	0x2000070c

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff fff0 	bl	8002018 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d005      	beq.n	8002052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_Delay+0x40>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002052:	bf00      	nop
 8002054:	f7ff ffe0 	bl	8002018 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d8f7      	bhi.n	8002054 <HAL_Delay+0x28>
  {
  }
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000008 	.word	0x20000008

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	; (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f7ff ff90 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ba:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff49 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f8:	f7ff ff5e 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 80021fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f7ff ff90 	bl	8002128 <NVIC_EncodePriority>
 8002208:	4602      	mov	r2, r0
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff5f 	bl	80020d4 <__NVIC_SetPriority>
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffb0 	bl	800218c <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b08b      	sub	sp, #44	; 0x2c
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	e127      	b.n	800249c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800224c:	2201      	movs	r2, #1
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8116 	bne.w	8002496 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b12      	cmp	r3, #18
 8002270:	d034      	beq.n	80022dc <HAL_GPIO_Init+0xa4>
 8002272:	2b12      	cmp	r3, #18
 8002274:	d80d      	bhi.n	8002292 <HAL_GPIO_Init+0x5a>
 8002276:	2b02      	cmp	r3, #2
 8002278:	d02b      	beq.n	80022d2 <HAL_GPIO_Init+0x9a>
 800227a:	2b02      	cmp	r3, #2
 800227c:	d804      	bhi.n	8002288 <HAL_GPIO_Init+0x50>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d031      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 8002282:	2b01      	cmp	r3, #1
 8002284:	d01c      	beq.n	80022c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002286:	e048      	b.n	800231a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002288:	2b03      	cmp	r3, #3
 800228a:	d043      	beq.n	8002314 <HAL_GPIO_Init+0xdc>
 800228c:	2b11      	cmp	r3, #17
 800228e:	d01b      	beq.n	80022c8 <HAL_GPIO_Init+0x90>
          break;
 8002290:	e043      	b.n	800231a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002292:	4a89      	ldr	r2, [pc, #548]	; (80024b8 <HAL_GPIO_Init+0x280>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d026      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 8002298:	4a87      	ldr	r2, [pc, #540]	; (80024b8 <HAL_GPIO_Init+0x280>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d806      	bhi.n	80022ac <HAL_GPIO_Init+0x74>
 800229e:	4a87      	ldr	r2, [pc, #540]	; (80024bc <HAL_GPIO_Init+0x284>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d020      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 80022a4:	4a86      	ldr	r2, [pc, #536]	; (80024c0 <HAL_GPIO_Init+0x288>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01d      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
          break;
 80022aa:	e036      	b.n	800231a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80022ac:	4a85      	ldr	r2, [pc, #532]	; (80024c4 <HAL_GPIO_Init+0x28c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 80022b2:	4a85      	ldr	r2, [pc, #532]	; (80024c8 <HAL_GPIO_Init+0x290>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d016      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 80022b8:	4a84      	ldr	r2, [pc, #528]	; (80024cc <HAL_GPIO_Init+0x294>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
          break;
 80022be:	e02c      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e028      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	3304      	adds	r3, #4
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e023      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	3308      	adds	r3, #8
 80022d8:	623b      	str	r3, [r7, #32]
          break;
 80022da:	e01e      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	330c      	adds	r3, #12
 80022e2:	623b      	str	r3, [r7, #32]
          break;
 80022e4:	e019      	b.n	800231a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ee:	2304      	movs	r3, #4
 80022f0:	623b      	str	r3, [r7, #32]
          break;
 80022f2:	e012      	b.n	800231a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022fc:	2308      	movs	r3, #8
 80022fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	611a      	str	r2, [r3, #16]
          break;
 8002306:	e008      	b.n	800231a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002308:	2308      	movs	r3, #8
 800230a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	615a      	str	r2, [r3, #20]
          break;
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
          break;
 8002318:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2bff      	cmp	r3, #255	; 0xff
 800231e:	d801      	bhi.n	8002324 <HAL_GPIO_Init+0xec>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	e001      	b.n	8002328 <HAL_GPIO_Init+0xf0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2bff      	cmp	r3, #255	; 0xff
 800232e:	d802      	bhi.n	8002336 <HAL_GPIO_Init+0xfe>
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x104>
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3b08      	subs	r3, #8
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	210f      	movs	r1, #15
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	401a      	ands	r2, r3
 800234e:	6a39      	ldr	r1, [r7, #32]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	431a      	orrs	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8096 	beq.w	8002496 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_GPIO_Init+0x298>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <HAL_GPIO_Init+0x298>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6193      	str	r3, [r2, #24]
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_GPIO_Init+0x298>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002382:	4a54      	ldr	r2, [pc, #336]	; (80024d4 <HAL_GPIO_Init+0x29c>)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4b      	ldr	r2, [pc, #300]	; (80024d8 <HAL_GPIO_Init+0x2a0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x19e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4a      	ldr	r2, [pc, #296]	; (80024dc <HAL_GPIO_Init+0x2a4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x19a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a49      	ldr	r2, [pc, #292]	; (80024e0 <HAL_GPIO_Init+0x2a8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x196>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a48      	ldr	r2, [pc, #288]	; (80024e4 <HAL_GPIO_Init+0x2ac>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x192>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x1a0>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x1a0>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x1a0>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x1a0>
 80023d6:	2300      	movs	r3, #0
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023e8:	493a      	ldr	r1, [pc, #232]	; (80024d4 <HAL_GPIO_Init+0x29c>)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d006      	beq.n	8002410 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4938      	ldr	r1, [pc, #224]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
 800240e:	e006      	b.n	800241e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002410:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	43db      	mvns	r3, r3
 8002418:	4933      	ldr	r1, [pc, #204]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800241a:	4013      	ands	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800242a:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	492e      	ldr	r1, [pc, #184]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
 8002436:	e006      	b.n	8002446 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	43db      	mvns	r3, r3
 8002440:	4929      	ldr	r1, [pc, #164]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002442:	4013      	ands	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	4924      	ldr	r1, [pc, #144]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
 800245e:	e006      	b.n	800246e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	43db      	mvns	r3, r3
 8002468:	491f      	ldr	r1, [pc, #124]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800246a:	4013      	ands	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	491a      	ldr	r1, [pc, #104]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	60cb      	str	r3, [r1, #12]
 8002486:	e006      	b.n	8002496 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	43db      	mvns	r3, r3
 8002490:	4915      	ldr	r1, [pc, #84]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002492:	4013      	ands	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f47f aed0 	bne.w	800224c <HAL_GPIO_Init+0x14>
  }
}
 80024ac:	bf00      	nop
 80024ae:	372c      	adds	r7, #44	; 0x2c
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	10210000 	.word	0x10210000
 80024bc:	10110000 	.word	0x10110000
 80024c0:	10120000 	.word	0x10120000
 80024c4:	10310000 	.word	0x10310000
 80024c8:	10320000 	.word	0x10320000
 80024cc:	10220000 	.word	0x10220000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40010800 	.word	0x40010800
 80024dc:	40010c00 	.word	0x40010c00
 80024e0:	40011000 	.word	0x40011000
 80024e4:	40011400 	.word	0x40011400
 80024e8:	40010400 	.word	0x40010400

080024ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024fc:	787b      	ldrb	r3, [r7, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002508:	e003      	b.n	8002512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	041a      	lsls	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	611a      	str	r2, [r3, #16]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002534:	887a      	ldrh	r2, [r7, #2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800253a:	e002      	b.n	8002542 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800253c:	887a      	ldrh	r2, [r7, #2]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e10f      	b.n	800277e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fb5c 	bl	8001c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002590:	f001 fc30 	bl	8003df4 <HAL_RCC_GetPCLK1Freq>
 8002594:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a7b      	ldr	r2, [pc, #492]	; (8002788 <HAL_I2C_Init+0x23c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d807      	bhi.n	80025b0 <HAL_I2C_Init+0x64>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a7a      	ldr	r2, [pc, #488]	; (800278c <HAL_I2C_Init+0x240>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	bf94      	ite	ls
 80025a8:	2301      	movls	r3, #1
 80025aa:	2300      	movhi	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	e006      	b.n	80025be <HAL_I2C_Init+0x72>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a77      	ldr	r2, [pc, #476]	; (8002790 <HAL_I2C_Init+0x244>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0db      	b.n	800277e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4a72      	ldr	r2, [pc, #456]	; (8002794 <HAL_I2C_Init+0x248>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0c9b      	lsrs	r3, r3, #18
 80025d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a64      	ldr	r2, [pc, #400]	; (8002788 <HAL_I2C_Init+0x23c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d802      	bhi.n	8002600 <HAL_I2C_Init+0xb4>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3301      	adds	r3, #1
 80025fe:	e009      	b.n	8002614 <HAL_I2C_Init+0xc8>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	4a63      	ldr	r2, [pc, #396]	; (8002798 <HAL_I2C_Init+0x24c>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	3301      	adds	r3, #1
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	430b      	orrs	r3, r1
 800261a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002626:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4956      	ldr	r1, [pc, #344]	; (8002788 <HAL_I2C_Init+0x23c>)
 8002630:	428b      	cmp	r3, r1
 8002632:	d80d      	bhi.n	8002650 <HAL_I2C_Init+0x104>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e59      	subs	r1, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	2b04      	cmp	r3, #4
 800264a:	bf38      	it	cc
 800264c:	2304      	movcc	r3, #4
 800264e:	e04f      	b.n	80026f0 <HAL_I2C_Init+0x1a4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_I2C_Init+0x130>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e012      	b.n	80026a2 <HAL_I2C_Init+0x156>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e58      	subs	r0, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	0099      	lsls	r1, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Init+0x15e>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e022      	b.n	80026f0 <HAL_I2C_Init+0x1a4>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10e      	bne.n	80026d0 <HAL_I2C_Init+0x184>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1e58      	subs	r0, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	440b      	add	r3, r1
 80026c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ce:	e00f      	b.n	80026f0 <HAL_I2C_Init+0x1a4>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	0099      	lsls	r1, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6809      	ldr	r1, [r1, #0]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800271e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6911      	ldr	r1, [r2, #16]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68d2      	ldr	r2, [r2, #12]
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	430b      	orrs	r3, r1
 8002732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	000186a0 	.word	0x000186a0
 800278c:	001e847f 	.word	0x001e847f
 8002790:	003d08ff 	.word	0x003d08ff
 8002794:	431bde83 	.word	0x431bde83
 8002798:	10624dd3 	.word	0x10624dd3

0800279c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	461a      	mov	r2, r3
 80027a8:	460b      	mov	r3, r1
 80027aa:	817b      	strh	r3, [r7, #10]
 80027ac:	4613      	mov	r3, r2
 80027ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff fc32 	bl	8002018 <HAL_GetTick>
 80027b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	f040 80e0 	bne.w	8002984 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2319      	movs	r3, #25
 80027ca:	2201      	movs	r2, #1
 80027cc:	4970      	ldr	r1, [pc, #448]	; (8002990 <HAL_I2C_Master_Transmit+0x1f4>)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fd5e 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027da:	2302      	movs	r3, #2
 80027dc:	e0d3      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_I2C_Master_Transmit+0x50>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0cc      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d007      	beq.n	8002812 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002820:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2210      	movs	r2, #16
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	893a      	ldrh	r2, [r7, #8]
 8002842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a50      	ldr	r2, [pc, #320]	; (8002994 <HAL_I2C_Master_Transmit+0x1f8>)
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002854:	8979      	ldrh	r1, [r7, #10]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fbec 	bl	8003038 <I2C_MasterRequestWrite>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e08d      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002880:	e066      	b.n	8002950 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	6a39      	ldr	r1, [r7, #32]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fdd8 	bl	800343c <I2C_WaitOnTXEFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b04      	cmp	r3, #4
 8002898:	d107      	bne.n	80028aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06b      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d11b      	bne.n	8002924 <HAL_I2C_Master_Transmit+0x188>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d017      	beq.n	8002924 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	6a39      	ldr	r1, [r7, #32]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fdc8 	bl	80034be <I2C_WaitOnBTFFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	2b04      	cmp	r3, #4
 800293a:	d107      	bne.n	800294c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e01a      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d194      	bne.n	8002882 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	00100002 	.word	0x00100002
 8002994:	ffff0000 	.word	0xffff0000

08002998 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	; 0x30
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	461a      	mov	r2, r3
 80029a4:	460b      	mov	r3, r1
 80029a6:	817b      	strh	r3, [r7, #10]
 80029a8:	4613      	mov	r3, r2
 80029aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff fb34 	bl	8002018 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	f040 8213 	bne.w	8002de6 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2319      	movs	r3, #25
 80029c6:	2201      	movs	r2, #1
 80029c8:	497e      	ldr	r1, [pc, #504]	; (8002bc4 <HAL_I2C_Master_Receive+0x22c>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fc60 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
 80029d8:	e206      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2C_Master_Receive+0x50>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e1ff      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d007      	beq.n	8002a0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2222      	movs	r2, #34	; 0x22
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	893a      	ldrh	r2, [r7, #8]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_I2C_Master_Receive+0x230>)
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a50:	8979      	ldrh	r1, [r7, #10]
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fb64 	bl	8003124 <I2C_MasterRequestRead>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1c0      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d113      	bne.n	8002a96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	623b      	str	r3, [r7, #32]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e194      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d11d      	bne.n	8002ada <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aae:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad6:	b662      	cpsie	i
 8002ad8:	e172      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d11d      	bne.n	8002b1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b1a:	b662      	cpsie	i
 8002b1c:	e150      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b44:	e13c      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	f200 80f5 	bhi.w	8002d3a <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d123      	bne.n	8002ba0 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fcef 	bl	8003540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e13d      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b9e:	e10f      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d150      	bne.n	8002c4a <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4906      	ldr	r1, [pc, #24]	; (8002bcc <HAL_I2C_Master_Receive+0x234>)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fb6c 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e112      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
 8002bc2:	bf00      	nop
 8002bc4:	00100002 	.word	0x00100002
 8002bc8:	ffff0000 	.word	0xffff0000
 8002bcc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c14:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c48:	e0ba      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	2200      	movs	r2, #0
 8002c52:	4967      	ldr	r1, [pc, #412]	; (8002df0 <HAL_I2C_Master_Receive+0x458>)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fb1b 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0c1      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	2200      	movs	r2, #0
 8002cb0:	494f      	ldr	r1, [pc, #316]	; (8002df0 <HAL_I2C_Master_Receive+0x458>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 faec 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e092      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d04:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d38:	e042      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fbfe 	bl	8003540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e04c      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d118      	bne.n	8002dc0 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f47f aebe 	bne.w	8002b46 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
  }
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	00010004 	.word	0x00010004

08002df4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	460b      	mov	r3, r1
 8002e02:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff f908 	bl	8002018 <HAL_GetTick>
 8002e08:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	f040 8105 	bne.w	8003026 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2319      	movs	r3, #25
 8002e22:	2201      	movs	r2, #1
 8002e24:	4982      	ldr	r1, [pc, #520]	; (8003030 <HAL_I2C_IsDeviceReady+0x23c>)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fa32 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0f8      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_I2C_IsDeviceReady+0x50>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0f1      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x234>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d007      	beq.n	8002e6a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2224      	movs	r2, #36	; 0x24
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a6a      	ldr	r2, [pc, #424]	; (8003034 <HAL_I2C_IsDeviceReady+0x240>)
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f9f0 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0b6      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002eca:	f7ff f8a5 	bl	8002018 <HAL_GetTick>
 8002ece:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002efe:	e025      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7ff f88a 	bl	8002018 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <HAL_I2C_IsDeviceReady+0x122>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	22a0      	movs	r2, #160	; 0xa0
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2ba0      	cmp	r3, #160	; 0xa0
 8002f56:	d005      	beq.n	8002f64 <HAL_I2C_IsDeviceReady+0x170>
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <HAL_I2C_IsDeviceReady+0x170>
 8002f5e:	7dbb      	ldrb	r3, [r7, #22]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0cd      	beq.n	8002f00 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d129      	bne.n	8002fce <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f88:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4921      	ldr	r1, [pc, #132]	; (8003030 <HAL_I2C_IsDeviceReady+0x23c>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f970 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e036      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e02c      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2319      	movs	r3, #25
 8002fee:	2201      	movs	r2, #1
 8002ff0:	490f      	ldr	r1, [pc, #60]	; (8003030 <HAL_I2C_IsDeviceReady+0x23c>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f94c 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e012      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	3301      	adds	r3, #1
 8003006:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	f4ff af3e 	bcc.w	8002e8e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	00100002 	.word	0x00100002
 8003034:	ffff0000 	.word	0xffff0000

08003038 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d006      	beq.n	8003062 <I2C_MasterRequestWrite+0x2a>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d003      	beq.n	8003062 <I2C_MasterRequestWrite+0x2a>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003060:	d108      	bne.n	8003074 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e00b      	b.n	800308c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b12      	cmp	r3, #18
 800307a:	d107      	bne.n	800308c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f8f9 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e035      	b.n	8003114 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b0:	d108      	bne.n	80030c4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030b2:	897b      	ldrh	r3, [r7, #10]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030c0:	611a      	str	r2, [r3, #16]
 80030c2:	e01b      	b.n	80030fc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030c4:	897b      	ldrh	r3, [r7, #10]
 80030c6:	11db      	asrs	r3, r3, #7
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 0306 	and.w	r3, r3, #6
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f063 030f 	orn	r3, r3, #15
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	490e      	ldr	r1, [pc, #56]	; (800311c <I2C_MasterRequestWrite+0xe4>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f92b 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e010      	b.n	8003114 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4907      	ldr	r1, [pc, #28]	; (8003120 <I2C_MasterRequestWrite+0xe8>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f91b 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	00010008 	.word	0x00010008
 8003120:	00010002 	.word	0x00010002

08003124 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	460b      	mov	r3, r1
 8003132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003148:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d006      	beq.n	800315e <I2C_MasterRequestRead+0x3a>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d003      	beq.n	800315e <I2C_MasterRequestRead+0x3a>
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800315c:	d108      	bne.n	8003170 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e00b      	b.n	8003188 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	2b11      	cmp	r3, #17
 8003176:	d107      	bne.n	8003188 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f87b 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e06d      	b.n	8003280 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ac:	d108      	bne.n	80031c0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	611a      	str	r2, [r3, #16]
 80031be:	e053      	b.n	8003268 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031c0:	897b      	ldrh	r3, [r7, #10]
 80031c2:	11db      	asrs	r3, r3, #7
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 0306 	and.w	r3, r3, #6
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f063 030f 	orn	r3, r3, #15
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	492a      	ldr	r1, [pc, #168]	; (8003288 <I2C_MasterRequestRead+0x164>)
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f8ad 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e048      	b.n	8003280 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031ee:	897b      	ldrh	r3, [r7, #10]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4923      	ldr	r1, [pc, #140]	; (800328c <I2C_MasterRequestRead+0x168>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f89d 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e038      	b.n	8003280 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003232:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f825 	bl	8003290 <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e017      	b.n	8003280 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003250:	897b      	ldrh	r3, [r7, #10]
 8003252:	11db      	asrs	r3, r3, #7
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0306 	and.w	r3, r3, #6
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f063 030e 	orn	r3, r3, #14
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4907      	ldr	r1, [pc, #28]	; (800328c <I2C_MasterRequestRead+0x168>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f865 	bl	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	00010008 	.word	0x00010008
 800328c:	00010002 	.word	0x00010002

08003290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a0:	e025      	b.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d021      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fe feb5 	bl	8002018 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d116      	bne.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e023      	b.n	8003336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10d      	bne.n	8003314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	e00c      	b.n	800332e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4013      	ands	r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf0c      	ite	eq
 8003326:	2301      	moveq	r3, #1
 8003328:	2300      	movne	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	429a      	cmp	r2, r3
 8003332:	d0b6      	beq.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	e051      	b.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	d123      	bne.n	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f043 0204 	orr.w	r2, r3, #4
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e046      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d021      	beq.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe fe33 	bl	8002018 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d116      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e020      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d10c      	bne.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	e00b      	b.n	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d18d      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003448:	e02d      	b.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8ce 	bl	80035ec <I2C_IsAcknowledgeFailed>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e02d      	b.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d021      	beq.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe fdd9 	bl	8002018 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d116      	bne.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e007      	b.n	80034b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b0:	2b80      	cmp	r3, #128	; 0x80
 80034b2:	d1ca      	bne.n	800344a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ca:	e02d      	b.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f88d 	bl	80035ec <I2C_IsAcknowledgeFailed>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e02d      	b.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d021      	beq.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fe fd98 	bl	8002018 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d1ca      	bne.n	80034cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800354c:	e042      	b.n	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d119      	bne.n	8003590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0210 	mvn.w	r2, #16
 8003564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e029      	b.n	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003590:	f7fe fd42 	bl	8002018 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e007      	b.n	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d1b5      	bne.n	800354e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d11b      	bne.n	800363c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800360c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e26c      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8087 	beq.w	8003776 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003668:	4b92      	ldr	r3, [pc, #584]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b04      	cmp	r3, #4
 8003672:	d00c      	beq.n	800368e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003674:	4b8f      	ldr	r3, [pc, #572]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	d112      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5e>
 8003680:	4b8c      	ldr	r3, [pc, #560]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d10b      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368e:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06c      	beq.n	8003774 <HAL_RCC_OscConfig+0x12c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d168      	bne.n	8003774 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e246      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x76>
 80036b0:	4b80      	ldr	r3, [pc, #512]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7f      	ldr	r2, [pc, #508]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e02e      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x98>
 80036c6:	4b7b      	ldr	r3, [pc, #492]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a7a      	ldr	r2, [pc, #488]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b78      	ldr	r3, [pc, #480]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a77      	ldr	r2, [pc, #476]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e01d      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0xbc>
 80036ea:	4b72      	ldr	r3, [pc, #456]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a71      	ldr	r2, [pc, #452]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b6f      	ldr	r3, [pc, #444]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6e      	ldr	r2, [pc, #440]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 8003704:	4b6b      	ldr	r3, [pc, #428]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a6a      	ldr	r2, [pc, #424]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 800370a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b68      	ldr	r3, [pc, #416]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a67      	ldr	r2, [pc, #412]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe fc78 	bl	8002018 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800372c:	f7fe fc74 	bl	8002018 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1fa      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0xe4>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe fc64 	bl	8002018 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003754:	f7fe fc60 	bl	8002018 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1e6      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x10c>
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d063      	beq.n	800384a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003782:	4b4c      	ldr	r3, [pc, #304]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b08      	cmp	r3, #8
 8003798:	d11c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x18c>
 800379a:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d116      	bne.n	80037d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_RCC_OscConfig+0x176>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e1ba      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b3d      	ldr	r3, [pc, #244]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4939      	ldr	r1, [pc, #228]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	e03a      	b.n	800384a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCC_OscConfig+0x270>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fc19 	bl	8002018 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ea:	f7fe fc15 	bl	8002018 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e19b      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4927      	ldr	r1, [pc, #156]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e015      	b.n	800384a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <HAL_RCC_OscConfig+0x270>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe fbf8 	bl	8002018 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382c:	f7fe fbf4 	bl	8002018 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e17a      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d03a      	beq.n	80038cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d019      	beq.n	8003892 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <HAL_RCC_OscConfig+0x274>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe fbd8 	bl	8002018 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386c:	f7fe fbd4 	bl	8002018 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e15a      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800388a:	2001      	movs	r0, #1
 800388c:	f000 fac6 	bl	8003e1c <RCC_Delay>
 8003890:	e01c      	b.n	80038cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_OscConfig+0x274>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7fe fbbe 	bl	8002018 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389e:	e00f      	b.n	80038c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a0:	f7fe fbba 	bl	8002018 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d908      	bls.n	80038c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e140      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	42420000 	.word	0x42420000
 80038bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	4b9e      	ldr	r3, [pc, #632]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e9      	bne.n	80038a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80a6 	beq.w	8003a26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038de:	4b97      	ldr	r3, [pc, #604]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ea:	4b94      	ldr	r3, [pc, #592]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	4a93      	ldr	r2, [pc, #588]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	61d3      	str	r3, [r2, #28]
 80038f6:	4b91      	ldr	r3, [pc, #580]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b8e      	ldr	r3, [pc, #568]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d118      	bne.n	8003944 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a8a      	ldr	r2, [pc, #552]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fe fb7b 	bl	8002018 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003926:	f7fe fb77 	bl	8002018 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b64      	cmp	r3, #100	; 0x64
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0fd      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	4b81      	ldr	r3, [pc, #516]	; (8003b40 <HAL_RCC_OscConfig+0x4f8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x312>
 800394c:	4b7b      	ldr	r3, [pc, #492]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4a7a      	ldr	r2, [pc, #488]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6213      	str	r3, [r2, #32]
 8003958:	e02d      	b.n	80039b6 <HAL_RCC_OscConfig+0x36e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x334>
 8003962:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a75      	ldr	r2, [pc, #468]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6213      	str	r3, [r2, #32]
 800396e:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4a72      	ldr	r2, [pc, #456]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003974:	f023 0304 	bic.w	r3, r3, #4
 8003978:	6213      	str	r3, [r2, #32]
 800397a:	e01c      	b.n	80039b6 <HAL_RCC_OscConfig+0x36e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b05      	cmp	r3, #5
 8003982:	d10c      	bne.n	800399e <HAL_RCC_OscConfig+0x356>
 8003984:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4a6c      	ldr	r2, [pc, #432]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 800398a:	f043 0304 	orr.w	r3, r3, #4
 800398e:	6213      	str	r3, [r2, #32]
 8003990:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	e00b      	b.n	80039b6 <HAL_RCC_OscConfig+0x36e>
 800399e:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a66      	ldr	r2, [pc, #408]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	6213      	str	r3, [r2, #32]
 80039aa:	4b64      	ldr	r3, [pc, #400]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a63      	ldr	r2, [pc, #396]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d015      	beq.n	80039ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fe fb2b 	bl	8002018 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fe fb27 	bl	8002018 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0ab      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	4b57      	ldr	r3, [pc, #348]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ee      	beq.n	80039c6 <HAL_RCC_OscConfig+0x37e>
 80039e8:	e014      	b.n	8003a14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fb15 	bl	8002018 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe fb11 	bl	8002018 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e095      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1ee      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b48      	ldr	r3, [pc, #288]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	4a47      	ldr	r2, [pc, #284]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8081 	beq.w	8003b32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a30:	4b42      	ldr	r3, [pc, #264]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 030c 	and.w	r3, r3, #12
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d061      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d146      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a44:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0x4fc>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fe fae5 	bl	8002018 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fe fae1 	bl	8002018 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e067      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a64:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a78:	d108      	bne.n	8003a8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a7a:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	492d      	ldr	r1, [pc, #180]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8c:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a19      	ldr	r1, [r3, #32]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	4927      	ldr	r1, [pc, #156]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_RCC_OscConfig+0x4fc>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fab5 	bl	8002018 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fe fab1 	bl	8002018 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e037      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x46a>
 8003ad0:	e02f      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <HAL_RCC_OscConfig+0x4fc>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fa9e 	bl	8002018 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe fa9a 	bl	8002018 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e020      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x498>
 8003afe:	e018      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e013      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_OscConfig+0x4f4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
 8003b44:	42420060 	.word	0x42420060

08003b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0d0      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b67      	ldr	r3, [pc, #412]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4965      	ldr	r1, [pc, #404]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b63      	ldr	r3, [pc, #396]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0b8      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba4:	4b59      	ldr	r3, [pc, #356]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bbc:	4b53      	ldr	r3, [pc, #332]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a52      	ldr	r2, [pc, #328]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b50      	ldr	r3, [pc, #320]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	494d      	ldr	r1, [pc, #308]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d040      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b47      	ldr	r3, [pc, #284]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d115      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e07f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b41      	ldr	r3, [pc, #260]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e073      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b3d      	ldr	r3, [pc, #244]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e06b      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4936      	ldr	r1, [pc, #216]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fe f9ee 	bl	8002018 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fe f9ea 	bl	8002018 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e053      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d210      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 0207 	bic.w	r2, r3, #7
 8003c7e:	4922      	ldr	r1, [pc, #136]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e032      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4916      	ldr	r1, [pc, #88]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	490e      	ldr	r1, [pc, #56]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cd6:	f000 f821 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cda:	4601      	mov	r1, r0
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	5cd3      	ldrb	r3, [r2, r3]
 8003cea:	fa21 f303 	lsr.w	r3, r1, r3
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1cc>)
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1d0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe f94c 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08005e64 	.word	0x08005e64
 8003d14:	20000000 	.word	0x20000000
 8003d18:	20000004 	.word	0x20000004

08003d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	b490      	push	{r4, r7}
 8003d1e:	b08a      	sub	sp, #40	; 0x28
 8003d20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d22:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d24:	1d3c      	adds	r4, r7, #4
 8003d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d46:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x40>
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x46>
 8003d5a:	e02d      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d5e:	623b      	str	r3, [r7, #32]
      break;
 8003d60:	e02d      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	0c9b      	lsrs	r3, r3, #18
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d6e:	4413      	add	r3, r2
 8003d70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0c5b      	lsrs	r3, r3, #17
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d8e:	4413      	add	r3, r2
 8003d90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d9a:	fb02 f203 	mul.w	r2, r2, r3
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
 8003da6:	e004      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4a0c      	ldr	r2, [pc, #48]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	623b      	str	r3, [r7, #32]
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dba:	623b      	str	r3, [r7, #32]
      break;
 8003dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3728      	adds	r7, #40	; 0x28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc90      	pop	{r4, r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	08005e50 	.word	0x08005e50
 8003dd0:	08005e60 	.word	0x08005e60
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	007a1200 	.word	0x007a1200
 8003ddc:	003d0900 	.word	0x003d0900

08003de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de4:	4b02      	ldr	r3, [pc, #8]	; (8003df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	20000000 	.word	0x20000000

08003df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df8:	f7ff fff2 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4601      	mov	r1, r0
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4a03      	ldr	r2, [pc, #12]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0a:	5cd3      	ldrb	r3, [r2, r3]
 8003e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	08005e74 	.word	0x08005e74

08003e1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <RCC_Delay+0x34>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <RCC_Delay+0x38>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	0a5b      	lsrs	r3, r3, #9
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e38:	bf00      	nop
  }
  while (Delay --);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1e5a      	subs	r2, r3, #1
 8003e3e:	60fa      	str	r2, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f9      	bne.n	8003e38 <RCC_Delay+0x1c>
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000000 	.word	0x20000000
 8003e54:	10624dd3 	.word	0x10624dd3

08003e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e053      	b.n	8003f12 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fd ff4f 	bl	8001d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	ea42 0103 	orr.w	r1, r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	0c1a      	lsrs	r2, r3, #16
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 0204 	and.w	r2, r2, #4
 8003ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e01d      	b.n	8003f68 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d106      	bne.n	8003f46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fd ff3b 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f000 f9ed 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e01d      	b.n	8003fbe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f815 	bl	8003fc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 f9c2 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fc24 	bl	8004838 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a10      	ldr	r2, [pc, #64]	; (8004038 <HAL_TIM_PWM_Start+0x60>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d107      	bne.n	800400a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b06      	cmp	r3, #6
 800401a:	d007      	beq.n	800402c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40012c00 	.word	0x40012c00

0800403c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004052:	2302      	movs	r3, #2
 8004054:	e0b4      	b.n	80041c0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b0c      	cmp	r3, #12
 800406a:	f200 809f 	bhi.w	80041ac <HAL_TIM_PWM_ConfigChannel+0x170>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080041ad 	.word	0x080041ad
 800407c:	080041ad 	.word	0x080041ad
 8004080:	080041ad 	.word	0x080041ad
 8004084:	080040e9 	.word	0x080040e9
 8004088:	080041ad 	.word	0x080041ad
 800408c:	080041ad 	.word	0x080041ad
 8004090:	080041ad 	.word	0x080041ad
 8004094:	0800412b 	.word	0x0800412b
 8004098:	080041ad 	.word	0x080041ad
 800409c:	080041ad 	.word	0x080041ad
 80040a0:	080041ad 	.word	0x080041ad
 80040a4:	0800416b 	.word	0x0800416b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f9a4 	bl	80043fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0204 	bic.w	r2, r2, #4
 80040d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	619a      	str	r2, [r3, #24]
      break;
 80040e6:	e062      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f9ea 	bl	80044c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6999      	ldr	r1, [r3, #24]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	021a      	lsls	r2, r3, #8
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	619a      	str	r2, [r3, #24]
      break;
 8004128:	e041      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fa33 	bl	800459c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0208 	orr.w	r2, r2, #8
 8004144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0204 	bic.w	r2, r2, #4
 8004154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69d9      	ldr	r1, [r3, #28]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	61da      	str	r2, [r3, #28]
      break;
 8004168:	e021      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fa7d 	bl	8004670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69d9      	ldr	r1, [r3, #28]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	61da      	str	r2, [r3, #28]
      break;
 80041aa:	e000      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80041ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_TIM_ConfigClockSource+0x18>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0a6      	b.n	800432e <HAL_TIM_ConfigClockSource+0x166>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d067      	beq.n	80042e8 <HAL_TIM_ConfigClockSource+0x120>
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d80b      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x6c>
 800421c:	2b10      	cmp	r3, #16
 800421e:	d073      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x140>
 8004220:	2b10      	cmp	r3, #16
 8004222:	d802      	bhi.n	800422a <HAL_TIM_ConfigClockSource+0x62>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d06f      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004228:	e078      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800422a:	2b20      	cmp	r3, #32
 800422c:	d06c      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x140>
 800422e:	2b30      	cmp	r3, #48	; 0x30
 8004230:	d06a      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004232:	e073      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004234:	2b70      	cmp	r3, #112	; 0x70
 8004236:	d00d      	beq.n	8004254 <HAL_TIM_ConfigClockSource+0x8c>
 8004238:	2b70      	cmp	r3, #112	; 0x70
 800423a:	d804      	bhi.n	8004246 <HAL_TIM_ConfigClockSource+0x7e>
 800423c:	2b50      	cmp	r3, #80	; 0x50
 800423e:	d033      	beq.n	80042a8 <HAL_TIM_ConfigClockSource+0xe0>
 8004240:	2b60      	cmp	r3, #96	; 0x60
 8004242:	d041      	beq.n	80042c8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004244:	e06a      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	d066      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x152>
 800424c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004250:	d017      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004252:	e063      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6899      	ldr	r1, [r3, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f000 fac9 	bl	80047fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004276:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e04c      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6899      	ldr	r1, [r3, #8]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f000 fab2 	bl	80047fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a4:	609a      	str	r2, [r3, #8]
      break;
 80042a6:	e039      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	6859      	ldr	r1, [r3, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	461a      	mov	r2, r3
 80042b6:	f000 fa29 	bl	800470c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2150      	movs	r1, #80	; 0x50
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fa80 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 80042c6:	e029      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	461a      	mov	r2, r3
 80042d6:	f000 fa47 	bl	8004768 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2160      	movs	r1, #96	; 0x60
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa70 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 80042e6:	e019      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	461a      	mov	r2, r3
 80042f6:	f000 fa09 	bl	800470c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa60 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 8004306:	e009      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 fa57 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 8004318:	e000      	b.n	800431c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800431a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d007      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <TIM_Base_SetConfig+0xc0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d108      	bne.n	800437a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1c      	ldr	r2, [pc, #112]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00b      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d007      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <TIM_Base_SetConfig+0xc0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d108      	bne.n	80043ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	615a      	str	r2, [r3, #20]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800

080043fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f023 0201 	bic.w	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f023 0302 	bic.w	r3, r3, #2
 8004444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <TIM_OC1_SetConfig+0xc8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10c      	bne.n	8004472 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0308 	bic.w	r3, r3, #8
 800445e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <TIM_OC1_SetConfig+0xc8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d111      	bne.n	800449e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40012c00 	.word	0x40012c00

080044c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0210 	bic.w	r2, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0320 	bic.w	r3, r3, #32
 8004512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <TIM_OC2_SetConfig+0xd0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10d      	bne.n	8004544 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a14      	ldr	r2, [pc, #80]	; (8004598 <TIM_OC2_SetConfig+0xd0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d113      	bne.n	8004574 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800455a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	40012c00 	.word	0x40012c00

0800459c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <TIM_OC3_SetConfig+0xd0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10d      	bne.n	8004616 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a14      	ldr	r2, [pc, #80]	; (800466c <TIM_OC3_SetConfig+0xd0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d113      	bne.n	8004646 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	621a      	str	r2, [r3, #32]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00

08004670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	031b      	lsls	r3, r3, #12
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a0f      	ldr	r2, [pc, #60]	; (8004708 <TIM_OC4_SetConfig+0x98>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d109      	bne.n	80046e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	019b      	lsls	r3, r3, #6
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00

0800470c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 030a 	bic.w	r3, r3, #10
 8004748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f023 0210 	bic.w	r2, r3, #16
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004792:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	031b      	lsls	r3, r3, #12
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f043 0307 	orr.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b087      	sub	sp, #28
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004814:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	021a      	lsls	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	431a      	orrs	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4313      	orrs	r3, r2
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2201      	movs	r2, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1a      	ldr	r2, [r3, #32]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	43db      	mvns	r3, r3
 800485a:	401a      	ands	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1a      	ldr	r2, [r3, #32]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004894:	2302      	movs	r3, #2
 8004896:	e032      	b.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004920:	2302      	movs	r3, #2
 8004922:	e03d      	b.n	80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
	...

080049ac <__errno>:
 80049ac:	4b01      	ldr	r3, [pc, #4]	; (80049b4 <__errno+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000000c 	.word	0x2000000c

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	2500      	movs	r5, #0
 80049bc:	4e0c      	ldr	r6, [pc, #48]	; (80049f0 <__libc_init_array+0x38>)
 80049be:	4c0d      	ldr	r4, [pc, #52]	; (80049f4 <__libc_init_array+0x3c>)
 80049c0:	1ba4      	subs	r4, r4, r6
 80049c2:	10a4      	asrs	r4, r4, #2
 80049c4:	42a5      	cmp	r5, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	f001 fa36 	bl	8005e38 <_init>
 80049cc:	2500      	movs	r5, #0
 80049ce:	4e0a      	ldr	r6, [pc, #40]	; (80049f8 <__libc_init_array+0x40>)
 80049d0:	4c0a      	ldr	r4, [pc, #40]	; (80049fc <__libc_init_array+0x44>)
 80049d2:	1ba4      	subs	r4, r4, r6
 80049d4:	10a4      	asrs	r4, r4, #2
 80049d6:	42a5      	cmp	r5, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049e0:	4798      	blx	r3
 80049e2:	3501      	adds	r5, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049ea:	4798      	blx	r3
 80049ec:	3501      	adds	r5, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	08005f10 	.word	0x08005f10
 80049f4:	08005f10 	.word	0x08005f10
 80049f8:	08005f10 	.word	0x08005f10
 80049fc:	08005f14 	.word	0x08005f14

08004a00 <memcpy>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	1e43      	subs	r3, r0, #1
 8004a04:	440a      	add	r2, r1
 8004a06:	4291      	cmp	r1, r2
 8004a08:	d100      	bne.n	8004a0c <memcpy+0xc>
 8004a0a:	bd10      	pop	{r4, pc}
 8004a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a14:	e7f7      	b.n	8004a06 <memcpy+0x6>

08004a16 <memset>:
 8004a16:	4603      	mov	r3, r0
 8004a18:	4402      	add	r2, r0
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d100      	bne.n	8004a20 <memset+0xa>
 8004a1e:	4770      	bx	lr
 8004a20:	f803 1b01 	strb.w	r1, [r3], #1
 8004a24:	e7f9      	b.n	8004a1a <memset+0x4>
	...

08004a28 <atan>:
 8004a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	4bb6      	ldr	r3, [pc, #728]	; (8004d08 <atan+0x2e0>)
 8004a2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004a32:	429e      	cmp	r6, r3
 8004a34:	4604      	mov	r4, r0
 8004a36:	460d      	mov	r5, r1
 8004a38:	468b      	mov	fp, r1
 8004a3a:	dd17      	ble.n	8004a6c <atan+0x44>
 8004a3c:	4bb3      	ldr	r3, [pc, #716]	; (8004d0c <atan+0x2e4>)
 8004a3e:	429e      	cmp	r6, r3
 8004a40:	dc01      	bgt.n	8004a46 <atan+0x1e>
 8004a42:	d109      	bne.n	8004a58 <atan+0x30>
 8004a44:	b140      	cbz	r0, 8004a58 <atan+0x30>
 8004a46:	4622      	mov	r2, r4
 8004a48:	462b      	mov	r3, r5
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	f7fb fb85 	bl	800015c <__adddf3>
 8004a52:	4604      	mov	r4, r0
 8004a54:	460d      	mov	r5, r1
 8004a56:	e005      	b.n	8004a64 <atan+0x3c>
 8004a58:	f1bb 0f00 	cmp.w	fp, #0
 8004a5c:	4cac      	ldr	r4, [pc, #688]	; (8004d10 <atan+0x2e8>)
 8004a5e:	f340 8121 	ble.w	8004ca4 <atan+0x27c>
 8004a62:	4dac      	ldr	r5, [pc, #688]	; (8004d14 <atan+0x2ec>)
 8004a64:	4620      	mov	r0, r4
 8004a66:	4629      	mov	r1, r5
 8004a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6c:	4baa      	ldr	r3, [pc, #680]	; (8004d18 <atan+0x2f0>)
 8004a6e:	429e      	cmp	r6, r3
 8004a70:	dc11      	bgt.n	8004a96 <atan+0x6e>
 8004a72:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004a76:	429e      	cmp	r6, r3
 8004a78:	dc0a      	bgt.n	8004a90 <atan+0x68>
 8004a7a:	a38b      	add	r3, pc, #556	; (adr r3, 8004ca8 <atan+0x280>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f7fb fb6c 	bl	800015c <__adddf3>
 8004a84:	2200      	movs	r2, #0
 8004a86:	4ba5      	ldr	r3, [pc, #660]	; (8004d1c <atan+0x2f4>)
 8004a88:	f7fb ffae 	bl	80009e8 <__aeabi_dcmpgt>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d1e9      	bne.n	8004a64 <atan+0x3c>
 8004a90:	f04f 3aff 	mov.w	sl, #4294967295
 8004a94:	e027      	b.n	8004ae6 <atan+0xbe>
 8004a96:	f000 f951 	bl	8004d3c <fabs>
 8004a9a:	4ba1      	ldr	r3, [pc, #644]	; (8004d20 <atan+0x2f8>)
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	429e      	cmp	r6, r3
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	f300 80b8 	bgt.w	8004c16 <atan+0x1ee>
 8004aa6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004aaa:	429e      	cmp	r6, r3
 8004aac:	f300 809c 	bgt.w	8004be8 <atan+0x1c0>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	f7fb fb52 	bl	800015c <__adddf3>
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4b98      	ldr	r3, [pc, #608]	; (8004d1c <atan+0x2f4>)
 8004abc:	f7fb fb4c 	bl	8000158 <__aeabi_dsub>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460f      	mov	r7, r1
 8004ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004aca:	4620      	mov	r0, r4
 8004acc:	4629      	mov	r1, r5
 8004ace:	f7fb fb45 	bl	800015c <__adddf3>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	4639      	mov	r1, r7
 8004ada:	f7fb fe1f 	bl	800071c <__aeabi_ddiv>
 8004ade:	f04f 0a00 	mov.w	sl, #0
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	460d      	mov	r5, r1
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	462b      	mov	r3, r5
 8004aea:	4620      	mov	r0, r4
 8004aec:	4629      	mov	r1, r5
 8004aee:	f7fb fceb 	bl	80004c8 <__aeabi_dmul>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4680      	mov	r8, r0
 8004af8:	4689      	mov	r9, r1
 8004afa:	f7fb fce5 	bl	80004c8 <__aeabi_dmul>
 8004afe:	a36c      	add	r3, pc, #432	; (adr r3, 8004cb0 <atan+0x288>)
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	4606      	mov	r6, r0
 8004b06:	460f      	mov	r7, r1
 8004b08:	f7fb fcde 	bl	80004c8 <__aeabi_dmul>
 8004b0c:	a36a      	add	r3, pc, #424	; (adr r3, 8004cb8 <atan+0x290>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fb23 	bl	800015c <__adddf3>
 8004b16:	4632      	mov	r2, r6
 8004b18:	463b      	mov	r3, r7
 8004b1a:	f7fb fcd5 	bl	80004c8 <__aeabi_dmul>
 8004b1e:	a368      	add	r3, pc, #416	; (adr r3, 8004cc0 <atan+0x298>)
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f7fb fb1a 	bl	800015c <__adddf3>
 8004b28:	4632      	mov	r2, r6
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	f7fb fccc 	bl	80004c8 <__aeabi_dmul>
 8004b30:	a365      	add	r3, pc, #404	; (adr r3, 8004cc8 <atan+0x2a0>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fb11 	bl	800015c <__adddf3>
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	f7fb fcc3 	bl	80004c8 <__aeabi_dmul>
 8004b42:	a363      	add	r3, pc, #396	; (adr r3, 8004cd0 <atan+0x2a8>)
 8004b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b48:	f7fb fb08 	bl	800015c <__adddf3>
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	463b      	mov	r3, r7
 8004b50:	f7fb fcba 	bl	80004c8 <__aeabi_dmul>
 8004b54:	a360      	add	r3, pc, #384	; (adr r3, 8004cd8 <atan+0x2b0>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb faff 	bl	800015c <__adddf3>
 8004b5e:	4642      	mov	r2, r8
 8004b60:	464b      	mov	r3, r9
 8004b62:	f7fb fcb1 	bl	80004c8 <__aeabi_dmul>
 8004b66:	a35e      	add	r3, pc, #376	; (adr r3, 8004ce0 <atan+0x2b8>)
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	4680      	mov	r8, r0
 8004b6e:	4689      	mov	r9, r1
 8004b70:	4630      	mov	r0, r6
 8004b72:	4639      	mov	r1, r7
 8004b74:	f7fb fca8 	bl	80004c8 <__aeabi_dmul>
 8004b78:	a35b      	add	r3, pc, #364	; (adr r3, 8004ce8 <atan+0x2c0>)
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f7fb faeb 	bl	8000158 <__aeabi_dsub>
 8004b82:	4632      	mov	r2, r6
 8004b84:	463b      	mov	r3, r7
 8004b86:	f7fb fc9f 	bl	80004c8 <__aeabi_dmul>
 8004b8a:	a359      	add	r3, pc, #356	; (adr r3, 8004cf0 <atan+0x2c8>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fae2 	bl	8000158 <__aeabi_dsub>
 8004b94:	4632      	mov	r2, r6
 8004b96:	463b      	mov	r3, r7
 8004b98:	f7fb fc96 	bl	80004c8 <__aeabi_dmul>
 8004b9c:	a356      	add	r3, pc, #344	; (adr r3, 8004cf8 <atan+0x2d0>)
 8004b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba2:	f7fb fad9 	bl	8000158 <__aeabi_dsub>
 8004ba6:	4632      	mov	r2, r6
 8004ba8:	463b      	mov	r3, r7
 8004baa:	f7fb fc8d 	bl	80004c8 <__aeabi_dmul>
 8004bae:	a354      	add	r3, pc, #336	; (adr r3, 8004d00 <atan+0x2d8>)
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f7fb fad0 	bl	8000158 <__aeabi_dsub>
 8004bb8:	4632      	mov	r2, r6
 8004bba:	463b      	mov	r3, r7
 8004bbc:	f7fb fc84 	bl	80004c8 <__aeabi_dmul>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	f7fb fac8 	bl	800015c <__adddf3>
 8004bcc:	4622      	mov	r2, r4
 8004bce:	462b      	mov	r3, r5
 8004bd0:	f7fb fc7a 	bl	80004c8 <__aeabi_dmul>
 8004bd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	d144      	bne.n	8004c68 <atan+0x240>
 8004bde:	4620      	mov	r0, r4
 8004be0:	4629      	mov	r1, r5
 8004be2:	f7fb fab9 	bl	8000158 <__aeabi_dsub>
 8004be6:	e734      	b.n	8004a52 <atan+0x2a>
 8004be8:	2200      	movs	r2, #0
 8004bea:	4b4c      	ldr	r3, [pc, #304]	; (8004d1c <atan+0x2f4>)
 8004bec:	f7fb fab4 	bl	8000158 <__aeabi_dsub>
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	460f      	mov	r7, r1
 8004bf6:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <atan+0x2f4>)
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f7fb faae 	bl	800015c <__adddf3>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4630      	mov	r0, r6
 8004c06:	4639      	mov	r1, r7
 8004c08:	f7fb fd88 	bl	800071c <__aeabi_ddiv>
 8004c0c:	f04f 0a01 	mov.w	sl, #1
 8004c10:	4604      	mov	r4, r0
 8004c12:	460d      	mov	r5, r1
 8004c14:	e767      	b.n	8004ae6 <atan+0xbe>
 8004c16:	4b43      	ldr	r3, [pc, #268]	; (8004d24 <atan+0x2fc>)
 8004c18:	429e      	cmp	r6, r3
 8004c1a:	dc1a      	bgt.n	8004c52 <atan+0x22a>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	4b42      	ldr	r3, [pc, #264]	; (8004d28 <atan+0x300>)
 8004c20:	f7fb fa9a 	bl	8000158 <__aeabi_dsub>
 8004c24:	2200      	movs	r2, #0
 8004c26:	4606      	mov	r6, r0
 8004c28:	460f      	mov	r7, r1
 8004c2a:	4b3f      	ldr	r3, [pc, #252]	; (8004d28 <atan+0x300>)
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7fb fc4a 	bl	80004c8 <__aeabi_dmul>
 8004c34:	2200      	movs	r2, #0
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <atan+0x2f4>)
 8004c38:	f7fb fa90 	bl	800015c <__adddf3>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4630      	mov	r0, r6
 8004c42:	4639      	mov	r1, r7
 8004c44:	f7fb fd6a 	bl	800071c <__aeabi_ddiv>
 8004c48:	f04f 0a02 	mov.w	sl, #2
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	460d      	mov	r5, r1
 8004c50:	e749      	b.n	8004ae6 <atan+0xbe>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	2000      	movs	r0, #0
 8004c58:	4934      	ldr	r1, [pc, #208]	; (8004d2c <atan+0x304>)
 8004c5a:	f7fb fd5f 	bl	800071c <__aeabi_ddiv>
 8004c5e:	f04f 0a03 	mov.w	sl, #3
 8004c62:	4604      	mov	r4, r0
 8004c64:	460d      	mov	r5, r1
 8004c66:	e73e      	b.n	8004ae6 <atan+0xbe>
 8004c68:	4b31      	ldr	r3, [pc, #196]	; (8004d30 <atan+0x308>)
 8004c6a:	4e32      	ldr	r6, [pc, #200]	; (8004d34 <atan+0x30c>)
 8004c6c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004c70:	4456      	add	r6, sl
 8004c72:	449a      	add	sl, r3
 8004c74:	e9da 2300 	ldrd	r2, r3, [sl]
 8004c78:	f7fb fa6e 	bl	8000158 <__aeabi_dsub>
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	462b      	mov	r3, r5
 8004c80:	f7fb fa6a 	bl	8000158 <__aeabi_dsub>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004c8c:	f7fb fa64 	bl	8000158 <__aeabi_dsub>
 8004c90:	f1bb 0f00 	cmp.w	fp, #0
 8004c94:	4604      	mov	r4, r0
 8004c96:	460d      	mov	r5, r1
 8004c98:	f6bf aee4 	bge.w	8004a64 <atan+0x3c>
 8004c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ca0:	461d      	mov	r5, r3
 8004ca2:	e6df      	b.n	8004a64 <atan+0x3c>
 8004ca4:	4d24      	ldr	r5, [pc, #144]	; (8004d38 <atan+0x310>)
 8004ca6:	e6dd      	b.n	8004a64 <atan+0x3c>
 8004ca8:	8800759c 	.word	0x8800759c
 8004cac:	7e37e43c 	.word	0x7e37e43c
 8004cb0:	e322da11 	.word	0xe322da11
 8004cb4:	3f90ad3a 	.word	0x3f90ad3a
 8004cb8:	24760deb 	.word	0x24760deb
 8004cbc:	3fa97b4b 	.word	0x3fa97b4b
 8004cc0:	a0d03d51 	.word	0xa0d03d51
 8004cc4:	3fb10d66 	.word	0x3fb10d66
 8004cc8:	c54c206e 	.word	0xc54c206e
 8004ccc:	3fb745cd 	.word	0x3fb745cd
 8004cd0:	920083ff 	.word	0x920083ff
 8004cd4:	3fc24924 	.word	0x3fc24924
 8004cd8:	5555550d 	.word	0x5555550d
 8004cdc:	3fd55555 	.word	0x3fd55555
 8004ce0:	2c6a6c2f 	.word	0x2c6a6c2f
 8004ce4:	bfa2b444 	.word	0xbfa2b444
 8004ce8:	52defd9a 	.word	0x52defd9a
 8004cec:	3fadde2d 	.word	0x3fadde2d
 8004cf0:	af749a6d 	.word	0xaf749a6d
 8004cf4:	3fb3b0f2 	.word	0x3fb3b0f2
 8004cf8:	fe231671 	.word	0xfe231671
 8004cfc:	3fbc71c6 	.word	0x3fbc71c6
 8004d00:	9998ebc4 	.word	0x9998ebc4
 8004d04:	3fc99999 	.word	0x3fc99999
 8004d08:	440fffff 	.word	0x440fffff
 8004d0c:	7ff00000 	.word	0x7ff00000
 8004d10:	54442d18 	.word	0x54442d18
 8004d14:	3ff921fb 	.word	0x3ff921fb
 8004d18:	3fdbffff 	.word	0x3fdbffff
 8004d1c:	3ff00000 	.word	0x3ff00000
 8004d20:	3ff2ffff 	.word	0x3ff2ffff
 8004d24:	40037fff 	.word	0x40037fff
 8004d28:	3ff80000 	.word	0x3ff80000
 8004d2c:	bff00000 	.word	0xbff00000
 8004d30:	08005ea0 	.word	0x08005ea0
 8004d34:	08005e80 	.word	0x08005e80
 8004d38:	bff921fb 	.word	0xbff921fb

08004d3c <fabs>:
 8004d3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d40:	4619      	mov	r1, r3
 8004d42:	4770      	bx	lr

08004d44 <pow>:
 8004d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d48:	b08f      	sub	sp, #60	; 0x3c
 8004d4a:	461d      	mov	r5, r3
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	4689      	mov	r9, r1
 8004d50:	4614      	mov	r4, r2
 8004d52:	f000 f9a9 	bl	80050a8 <__ieee754_pow>
 8004d56:	4fa1      	ldr	r7, [pc, #644]	; (8004fdc <pow+0x298>)
 8004d58:	e9cd 0100 	strd	r0, r1, [sp]
 8004d5c:	f997 3000 	ldrsb.w	r3, [r7]
 8004d60:	463e      	mov	r6, r7
 8004d62:	9302      	str	r3, [sp, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	d05f      	beq.n	8004e28 <pow+0xe4>
 8004d68:	4622      	mov	r2, r4
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f7fb fe44 	bl	80009fc <__aeabi_dcmpun>
 8004d74:	4682      	mov	sl, r0
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d156      	bne.n	8004e28 <pow+0xe4>
 8004d7a:	4642      	mov	r2, r8
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	4640      	mov	r0, r8
 8004d80:	4649      	mov	r1, r9
 8004d82:	f7fb fe3b 	bl	80009fc <__aeabi_dcmpun>
 8004d86:	9003      	str	r0, [sp, #12]
 8004d88:	b1e8      	cbz	r0, 8004dc6 <pow+0x82>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	f7fb fe01 	bl	8000998 <__aeabi_dcmpeq>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d046      	beq.n	8004e28 <pow+0xe4>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	4b8f      	ldr	r3, [pc, #572]	; (8004fe0 <pow+0x29c>)
 8004da2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004da6:	9305      	str	r3, [sp, #20]
 8004da8:	4b8e      	ldr	r3, [pc, #568]	; (8004fe4 <pow+0x2a0>)
 8004daa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004dae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004db2:	9b02      	ldr	r3, [sp, #8]
 8004db4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d031      	beq.n	8004e20 <pow+0xdc>
 8004dbc:	a804      	add	r0, sp, #16
 8004dbe:	f000 ff2f 	bl	8005c20 <matherr>
 8004dc2:	bb38      	cbnz	r0, 8004e14 <pow+0xd0>
 8004dc4:	e058      	b.n	8004e78 <pow+0x134>
 8004dc6:	f04f 0a00 	mov.w	sl, #0
 8004dca:	f04f 0b00 	mov.w	fp, #0
 8004dce:	4652      	mov	r2, sl
 8004dd0:	465b      	mov	r3, fp
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb fddf 	bl	8000998 <__aeabi_dcmpeq>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d051      	beq.n	8004e82 <pow+0x13e>
 8004dde:	4652      	mov	r2, sl
 8004de0:	465b      	mov	r3, fp
 8004de2:	4620      	mov	r0, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	f7fb fdd7 	bl	8000998 <__aeabi_dcmpeq>
 8004dea:	4606      	mov	r6, r0
 8004dec:	b308      	cbz	r0, 8004e32 <pow+0xee>
 8004dee:	2301      	movs	r3, #1
 8004df0:	9304      	str	r3, [sp, #16]
 8004df2:	4b7b      	ldr	r3, [pc, #492]	; (8004fe0 <pow+0x29c>)
 8004df4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004df8:	9305      	str	r3, [sp, #20]
 8004dfa:	9b03      	ldr	r3, [sp, #12]
 8004dfc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004e00:	930c      	str	r3, [sp, #48]	; 0x30
 8004e02:	9b02      	ldr	r3, [sp, #8]
 8004e04:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0d7      	beq.n	8004dbc <pow+0x78>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4b75      	ldr	r3, [pc, #468]	; (8004fe4 <pow+0x2a0>)
 8004e10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e16:	b11b      	cbz	r3, 8004e20 <pow+0xdc>
 8004e18:	f7ff fdc8 	bl	80049ac <__errno>
 8004e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e1e:	6003      	str	r3, [r0, #0]
 8004e20:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8004e24:	e9cd 3400 	strd	r3, r4, [sp]
 8004e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e2c:	b00f      	add	sp, #60	; 0x3c
 8004e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f000 feed 	bl	8005c14 <finite>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d0f4      	beq.n	8004e28 <pow+0xe4>
 8004e3e:	4652      	mov	r2, sl
 8004e40:	465b      	mov	r3, fp
 8004e42:	4620      	mov	r0, r4
 8004e44:	4629      	mov	r1, r5
 8004e46:	f7fb fdb1 	bl	80009ac <__aeabi_dcmplt>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0ec      	beq.n	8004e28 <pow+0xe4>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	4b63      	ldr	r3, [pc, #396]	; (8004fe0 <pow+0x29c>)
 8004e54:	960c      	str	r6, [sp, #48]	; 0x30
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	f997 3000 	ldrsb.w	r3, [r7]
 8004e5c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004e60:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004e64:	b913      	cbnz	r3, 8004e6c <pow+0x128>
 8004e66:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004e6a:	e7a7      	b.n	8004dbc <pow+0x78>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	495e      	ldr	r1, [pc, #376]	; (8004fe8 <pow+0x2a4>)
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e76:	d1a1      	bne.n	8004dbc <pow+0x78>
 8004e78:	f7ff fd98 	bl	80049ac <__errno>
 8004e7c:	2321      	movs	r3, #33	; 0x21
 8004e7e:	6003      	str	r3, [r0, #0]
 8004e80:	e7c8      	b.n	8004e14 <pow+0xd0>
 8004e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e86:	f000 fec5 	bl	8005c14 <finite>
 8004e8a:	9002      	str	r0, [sp, #8]
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d177      	bne.n	8004f80 <pow+0x23c>
 8004e90:	4640      	mov	r0, r8
 8004e92:	4649      	mov	r1, r9
 8004e94:	f000 febe 	bl	8005c14 <finite>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d071      	beq.n	8004f80 <pow+0x23c>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	f000 feb8 	bl	8005c14 <finite>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d06b      	beq.n	8004f80 <pow+0x23c>
 8004ea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fb fda4 	bl	80009fc <__aeabi_dcmpun>
 8004eb4:	f997 7000 	ldrsb.w	r7, [r7]
 8004eb8:	4b49      	ldr	r3, [pc, #292]	; (8004fe0 <pow+0x29c>)
 8004eba:	b1a0      	cbz	r0, 8004ee6 <pow+0x1a2>
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ec2:	9b02      	ldr	r3, [sp, #8]
 8004ec4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8004eca:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004ece:	2f00      	cmp	r7, #0
 8004ed0:	d0c9      	beq.n	8004e66 <pow+0x122>
 8004ed2:	4652      	mov	r2, sl
 8004ed4:	465b      	mov	r3, fp
 8004ed6:	4650      	mov	r0, sl
 8004ed8:	4659      	mov	r1, fp
 8004eda:	f7fb fc1f 	bl	800071c <__aeabi_ddiv>
 8004ede:	2f02      	cmp	r7, #2
 8004ee0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ee4:	e7c7      	b.n	8004e76 <pow+0x132>
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	900c      	str	r0, [sp, #48]	; 0x30
 8004eea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004eee:	4620      	mov	r0, r4
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	4b3d      	ldr	r3, [pc, #244]	; (8004fec <pow+0x2a8>)
 8004ef6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004efa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004efe:	f7fb fae3 	bl	80004c8 <__aeabi_dmul>
 8004f02:	4604      	mov	r4, r0
 8004f04:	460d      	mov	r5, r1
 8004f06:	bb17      	cbnz	r7, 8004f4e <pow+0x20a>
 8004f08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f0c:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <pow+0x2ac>)
 8004f0e:	4640      	mov	r0, r8
 8004f10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f14:	4649      	mov	r1, r9
 8004f16:	4652      	mov	r2, sl
 8004f18:	465b      	mov	r3, fp
 8004f1a:	f7fb fd47 	bl	80009ac <__aeabi_dcmplt>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d054      	beq.n	8004fcc <pow+0x288>
 8004f22:	4620      	mov	r0, r4
 8004f24:	4629      	mov	r1, r5
 8004f26:	f000 fe83 	bl	8005c30 <rint>
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	f7fb fd33 	bl	8000998 <__aeabi_dcmpeq>
 8004f32:	b920      	cbnz	r0, 8004f3e <pow+0x1fa>
 8004f34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004f38:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <pow+0x2b0>)
 8004f3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f3e:	f996 3000 	ldrsb.w	r3, [r6]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d142      	bne.n	8004fcc <pow+0x288>
 8004f46:	f7ff fd31 	bl	80049ac <__errno>
 8004f4a:	2322      	movs	r3, #34	; 0x22
 8004f4c:	e797      	b.n	8004e7e <pow+0x13a>
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <pow+0x2b4>)
 8004f52:	4640      	mov	r0, r8
 8004f54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f58:	4649      	mov	r1, r9
 8004f5a:	4652      	mov	r2, sl
 8004f5c:	465b      	mov	r3, fp
 8004f5e:	f7fb fd25 	bl	80009ac <__aeabi_dcmplt>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d0eb      	beq.n	8004f3e <pow+0x1fa>
 8004f66:	4620      	mov	r0, r4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	f000 fe61 	bl	8005c30 <rint>
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	f7fb fd11 	bl	8000998 <__aeabi_dcmpeq>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d1e1      	bne.n	8004f3e <pow+0x1fa>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <pow+0x2a4>)
 8004f7e:	e7dc      	b.n	8004f3a <pow+0x1f6>
 8004f80:	2200      	movs	r2, #0
 8004f82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f86:	2300      	movs	r3, #0
 8004f88:	f7fb fd06 	bl	8000998 <__aeabi_dcmpeq>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f43f af4b 	beq.w	8004e28 <pow+0xe4>
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f000 fe3d 	bl	8005c14 <finite>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f43f af44 	beq.w	8004e28 <pow+0xe4>
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f000 fe36 	bl	8005c14 <finite>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f43f af3d 	beq.w	8004e28 <pow+0xe4>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <pow+0x29c>)
 8004fb4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004fb8:	9305      	str	r3, [sp, #20]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2400      	movs	r4, #0
 8004fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004fc6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8004fca:	e7b8      	b.n	8004f3e <pow+0x1fa>
 8004fcc:	a804      	add	r0, sp, #16
 8004fce:	f000 fe27 	bl	8005c20 <matherr>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	f47f af1e 	bne.w	8004e14 <pow+0xd0>
 8004fd8:	e7b5      	b.n	8004f46 <pow+0x202>
 8004fda:	bf00      	nop
 8004fdc:	20000070 	.word	0x20000070
 8004fe0:	08005ec0 	.word	0x08005ec0
 8004fe4:	3ff00000 	.word	0x3ff00000
 8004fe8:	fff00000 	.word	0xfff00000
 8004fec:	3fe00000 	.word	0x3fe00000
 8004ff0:	47efffff 	.word	0x47efffff
 8004ff4:	c7efffff 	.word	0xc7efffff
 8004ff8:	7ff00000 	.word	0x7ff00000

08004ffc <sqrt>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	b08b      	sub	sp, #44	; 0x2c
 8005002:	4604      	mov	r4, r0
 8005004:	460d      	mov	r5, r1
 8005006:	f000 fd59 	bl	8005abc <__ieee754_sqrt>
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <sqrt+0xa0>)
 800500c:	4680      	mov	r8, r0
 800500e:	f993 a000 	ldrsb.w	sl, [r3]
 8005012:	4689      	mov	r9, r1
 8005014:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005018:	d02b      	beq.n	8005072 <sqrt+0x76>
 800501a:	4622      	mov	r2, r4
 800501c:	462b      	mov	r3, r5
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb fceb 	bl	80009fc <__aeabi_dcmpun>
 8005026:	4683      	mov	fp, r0
 8005028:	bb18      	cbnz	r0, 8005072 <sqrt+0x76>
 800502a:	2600      	movs	r6, #0
 800502c:	2700      	movs	r7, #0
 800502e:	4632      	mov	r2, r6
 8005030:	463b      	mov	r3, r7
 8005032:	4620      	mov	r0, r4
 8005034:	4629      	mov	r1, r5
 8005036:	f7fb fcb9 	bl	80009ac <__aeabi_dcmplt>
 800503a:	b1d0      	cbz	r0, 8005072 <sqrt+0x76>
 800503c:	2301      	movs	r3, #1
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <sqrt+0xa4>)
 8005042:	f8cd b020 	str.w	fp, [sp, #32]
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800504c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005050:	f1ba 0f00 	cmp.w	sl, #0
 8005054:	d112      	bne.n	800507c <sqrt+0x80>
 8005056:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800505a:	4668      	mov	r0, sp
 800505c:	f000 fde0 	bl	8005c20 <matherr>
 8005060:	b1b8      	cbz	r0, 8005092 <sqrt+0x96>
 8005062:	9b08      	ldr	r3, [sp, #32]
 8005064:	b11b      	cbz	r3, 800506e <sqrt+0x72>
 8005066:	f7ff fca1 	bl	80049ac <__errno>
 800506a:	9b08      	ldr	r3, [sp, #32]
 800506c:	6003      	str	r3, [r0, #0]
 800506e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005072:	4640      	mov	r0, r8
 8005074:	4649      	mov	r1, r9
 8005076:	b00b      	add	sp, #44	; 0x2c
 8005078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507c:	4632      	mov	r2, r6
 800507e:	463b      	mov	r3, r7
 8005080:	4630      	mov	r0, r6
 8005082:	4639      	mov	r1, r7
 8005084:	f7fb fb4a 	bl	800071c <__aeabi_ddiv>
 8005088:	f1ba 0f02 	cmp.w	sl, #2
 800508c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005090:	d1e3      	bne.n	800505a <sqrt+0x5e>
 8005092:	f7ff fc8b 	bl	80049ac <__errno>
 8005096:	2321      	movs	r3, #33	; 0x21
 8005098:	6003      	str	r3, [r0, #0]
 800509a:	e7e2      	b.n	8005062 <sqrt+0x66>
 800509c:	20000070 	.word	0x20000070
 80050a0:	08005ec4 	.word	0x08005ec4
 80050a4:	00000000 	.word	0x00000000

080050a8 <__ieee754_pow>:
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	b091      	sub	sp, #68	; 0x44
 80050ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050b2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80050b6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80050ba:	ea55 0302 	orrs.w	r3, r5, r2
 80050be:	4607      	mov	r7, r0
 80050c0:	4688      	mov	r8, r1
 80050c2:	f000 84b7 	beq.w	8005a34 <__ieee754_pow+0x98c>
 80050c6:	4b80      	ldr	r3, [pc, #512]	; (80052c8 <__ieee754_pow+0x220>)
 80050c8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80050cc:	429c      	cmp	r4, r3
 80050ce:	4689      	mov	r9, r1
 80050d0:	4682      	mov	sl, r0
 80050d2:	dc09      	bgt.n	80050e8 <__ieee754_pow+0x40>
 80050d4:	d103      	bne.n	80050de <__ieee754_pow+0x36>
 80050d6:	b938      	cbnz	r0, 80050e8 <__ieee754_pow+0x40>
 80050d8:	42a5      	cmp	r5, r4
 80050da:	dc0d      	bgt.n	80050f8 <__ieee754_pow+0x50>
 80050dc:	e001      	b.n	80050e2 <__ieee754_pow+0x3a>
 80050de:	429d      	cmp	r5, r3
 80050e0:	dc02      	bgt.n	80050e8 <__ieee754_pow+0x40>
 80050e2:	429d      	cmp	r5, r3
 80050e4:	d10e      	bne.n	8005104 <__ieee754_pow+0x5c>
 80050e6:	b16a      	cbz	r2, 8005104 <__ieee754_pow+0x5c>
 80050e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80050f0:	ea54 030a 	orrs.w	r3, r4, sl
 80050f4:	f000 849e 	beq.w	8005a34 <__ieee754_pow+0x98c>
 80050f8:	4874      	ldr	r0, [pc, #464]	; (80052cc <__ieee754_pow+0x224>)
 80050fa:	b011      	add	sp, #68	; 0x44
 80050fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005100:	f000 bd90 	b.w	8005c24 <nan>
 8005104:	f1b9 0f00 	cmp.w	r9, #0
 8005108:	da53      	bge.n	80051b2 <__ieee754_pow+0x10a>
 800510a:	4b71      	ldr	r3, [pc, #452]	; (80052d0 <__ieee754_pow+0x228>)
 800510c:	429d      	cmp	r5, r3
 800510e:	dc4e      	bgt.n	80051ae <__ieee754_pow+0x106>
 8005110:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005114:	429d      	cmp	r5, r3
 8005116:	dd4c      	ble.n	80051b2 <__ieee754_pow+0x10a>
 8005118:	152b      	asrs	r3, r5, #20
 800511a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800511e:	2b14      	cmp	r3, #20
 8005120:	dd28      	ble.n	8005174 <__ieee754_pow+0xcc>
 8005122:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005126:	fa22 f103 	lsr.w	r1, r2, r3
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	4293      	cmp	r3, r2
 8005130:	d13f      	bne.n	80051b2 <__ieee754_pow+0x10a>
 8005132:	f001 0101 	and.w	r1, r1, #1
 8005136:	f1c1 0302 	rsb	r3, r1, #2
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	2a00      	cmp	r2, #0
 800513e:	d15c      	bne.n	80051fa <__ieee754_pow+0x152>
 8005140:	4b61      	ldr	r3, [pc, #388]	; (80052c8 <__ieee754_pow+0x220>)
 8005142:	429d      	cmp	r5, r3
 8005144:	d126      	bne.n	8005194 <__ieee754_pow+0xec>
 8005146:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800514a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800514e:	ea53 030a 	orrs.w	r3, r3, sl
 8005152:	f000 846f 	beq.w	8005a34 <__ieee754_pow+0x98c>
 8005156:	4b5f      	ldr	r3, [pc, #380]	; (80052d4 <__ieee754_pow+0x22c>)
 8005158:	429c      	cmp	r4, r3
 800515a:	dd2c      	ble.n	80051b6 <__ieee754_pow+0x10e>
 800515c:	2e00      	cmp	r6, #0
 800515e:	f280 846f 	bge.w	8005a40 <__ieee754_pow+0x998>
 8005162:	f04f 0b00 	mov.w	fp, #0
 8005166:	f04f 0c00 	mov.w	ip, #0
 800516a:	4658      	mov	r0, fp
 800516c:	4661      	mov	r1, ip
 800516e:	b011      	add	sp, #68	; 0x44
 8005170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005174:	2a00      	cmp	r2, #0
 8005176:	d13e      	bne.n	80051f6 <__ieee754_pow+0x14e>
 8005178:	f1c3 0314 	rsb	r3, r3, #20
 800517c:	fa45 f103 	asr.w	r1, r5, r3
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	42ab      	cmp	r3, r5
 8005186:	f040 8463 	bne.w	8005a50 <__ieee754_pow+0x9a8>
 800518a:	f001 0101 	and.w	r1, r1, #1
 800518e:	f1c1 0302 	rsb	r3, r1, #2
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	4b50      	ldr	r3, [pc, #320]	; (80052d8 <__ieee754_pow+0x230>)
 8005196:	429d      	cmp	r5, r3
 8005198:	d114      	bne.n	80051c4 <__ieee754_pow+0x11c>
 800519a:	2e00      	cmp	r6, #0
 800519c:	f280 8454 	bge.w	8005a48 <__ieee754_pow+0x9a0>
 80051a0:	463a      	mov	r2, r7
 80051a2:	4643      	mov	r3, r8
 80051a4:	2000      	movs	r0, #0
 80051a6:	494c      	ldr	r1, [pc, #304]	; (80052d8 <__ieee754_pow+0x230>)
 80051a8:	f7fb fab8 	bl	800071c <__aeabi_ddiv>
 80051ac:	e013      	b.n	80051d6 <__ieee754_pow+0x12e>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e7c3      	b.n	800513a <__ieee754_pow+0x92>
 80051b2:	2300      	movs	r3, #0
 80051b4:	e7c1      	b.n	800513a <__ieee754_pow+0x92>
 80051b6:	2e00      	cmp	r6, #0
 80051b8:	dad3      	bge.n	8005162 <__ieee754_pow+0xba>
 80051ba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80051be:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80051c2:	e7d2      	b.n	800516a <__ieee754_pow+0xc2>
 80051c4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80051c8:	d108      	bne.n	80051dc <__ieee754_pow+0x134>
 80051ca:	463a      	mov	r2, r7
 80051cc:	4643      	mov	r3, r8
 80051ce:	4638      	mov	r0, r7
 80051d0:	4641      	mov	r1, r8
 80051d2:	f7fb f979 	bl	80004c8 <__aeabi_dmul>
 80051d6:	4683      	mov	fp, r0
 80051d8:	468c      	mov	ip, r1
 80051da:	e7c6      	b.n	800516a <__ieee754_pow+0xc2>
 80051dc:	4b3f      	ldr	r3, [pc, #252]	; (80052dc <__ieee754_pow+0x234>)
 80051de:	429e      	cmp	r6, r3
 80051e0:	d10b      	bne.n	80051fa <__ieee754_pow+0x152>
 80051e2:	f1b9 0f00 	cmp.w	r9, #0
 80051e6:	db08      	blt.n	80051fa <__ieee754_pow+0x152>
 80051e8:	4638      	mov	r0, r7
 80051ea:	4641      	mov	r1, r8
 80051ec:	b011      	add	sp, #68	; 0x44
 80051ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f2:	f000 bc63 	b.w	8005abc <__ieee754_sqrt>
 80051f6:	2300      	movs	r3, #0
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	4638      	mov	r0, r7
 80051fc:	4641      	mov	r1, r8
 80051fe:	f7ff fd9d 	bl	8004d3c <fabs>
 8005202:	4683      	mov	fp, r0
 8005204:	468c      	mov	ip, r1
 8005206:	f1ba 0f00 	cmp.w	sl, #0
 800520a:	d12b      	bne.n	8005264 <__ieee754_pow+0x1bc>
 800520c:	b124      	cbz	r4, 8005218 <__ieee754_pow+0x170>
 800520e:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <__ieee754_pow+0x230>)
 8005210:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005214:	429a      	cmp	r2, r3
 8005216:	d125      	bne.n	8005264 <__ieee754_pow+0x1bc>
 8005218:	2e00      	cmp	r6, #0
 800521a:	da07      	bge.n	800522c <__ieee754_pow+0x184>
 800521c:	465a      	mov	r2, fp
 800521e:	4663      	mov	r3, ip
 8005220:	2000      	movs	r0, #0
 8005222:	492d      	ldr	r1, [pc, #180]	; (80052d8 <__ieee754_pow+0x230>)
 8005224:	f7fb fa7a 	bl	800071c <__aeabi_ddiv>
 8005228:	4683      	mov	fp, r0
 800522a:	468c      	mov	ip, r1
 800522c:	f1b9 0f00 	cmp.w	r9, #0
 8005230:	da9b      	bge.n	800516a <__ieee754_pow+0xc2>
 8005232:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005236:	9b00      	ldr	r3, [sp, #0]
 8005238:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800523c:	4323      	orrs	r3, r4
 800523e:	d108      	bne.n	8005252 <__ieee754_pow+0x1aa>
 8005240:	465a      	mov	r2, fp
 8005242:	4663      	mov	r3, ip
 8005244:	4658      	mov	r0, fp
 8005246:	4661      	mov	r1, ip
 8005248:	f7fa ff86 	bl	8000158 <__aeabi_dsub>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	e7aa      	b.n	80051a8 <__ieee754_pow+0x100>
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d188      	bne.n	800516a <__ieee754_pow+0xc2>
 8005258:	4658      	mov	r0, fp
 800525a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800525e:	4683      	mov	fp, r0
 8005260:	469c      	mov	ip, r3
 8005262:	e782      	b.n	800516a <__ieee754_pow+0xc2>
 8005264:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005268:	f109 33ff 	add.w	r3, r9, #4294967295
 800526c:	930d      	str	r3, [sp, #52]	; 0x34
 800526e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005270:	9b00      	ldr	r3, [sp, #0]
 8005272:	4313      	orrs	r3, r2
 8005274:	d104      	bne.n	8005280 <__ieee754_pow+0x1d8>
 8005276:	463a      	mov	r2, r7
 8005278:	4643      	mov	r3, r8
 800527a:	4638      	mov	r0, r7
 800527c:	4641      	mov	r1, r8
 800527e:	e7e3      	b.n	8005248 <__ieee754_pow+0x1a0>
 8005280:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <__ieee754_pow+0x238>)
 8005282:	429d      	cmp	r5, r3
 8005284:	f340 80fe 	ble.w	8005484 <__ieee754_pow+0x3dc>
 8005288:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800528c:	429d      	cmp	r5, r3
 800528e:	dd0b      	ble.n	80052a8 <__ieee754_pow+0x200>
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <__ieee754_pow+0x22c>)
 8005292:	429c      	cmp	r4, r3
 8005294:	dc0e      	bgt.n	80052b4 <__ieee754_pow+0x20c>
 8005296:	2e00      	cmp	r6, #0
 8005298:	f6bf af63 	bge.w	8005162 <__ieee754_pow+0xba>
 800529c:	a308      	add	r3, pc, #32	; (adr r3, 80052c0 <__ieee754_pow+0x218>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	e794      	b.n	80051d2 <__ieee754_pow+0x12a>
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <__ieee754_pow+0x23c>)
 80052aa:	429c      	cmp	r4, r3
 80052ac:	ddf3      	ble.n	8005296 <__ieee754_pow+0x1ee>
 80052ae:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <__ieee754_pow+0x230>)
 80052b0:	429c      	cmp	r4, r3
 80052b2:	dd19      	ble.n	80052e8 <__ieee754_pow+0x240>
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	dcf1      	bgt.n	800529c <__ieee754_pow+0x1f4>
 80052b8:	e753      	b.n	8005162 <__ieee754_pow+0xba>
 80052ba:	bf00      	nop
 80052bc:	f3af 8000 	nop.w
 80052c0:	8800759c 	.word	0x8800759c
 80052c4:	7e37e43c 	.word	0x7e37e43c
 80052c8:	7ff00000 	.word	0x7ff00000
 80052cc:	08005ec8 	.word	0x08005ec8
 80052d0:	433fffff 	.word	0x433fffff
 80052d4:	3fefffff 	.word	0x3fefffff
 80052d8:	3ff00000 	.word	0x3ff00000
 80052dc:	3fe00000 	.word	0x3fe00000
 80052e0:	41e00000 	.word	0x41e00000
 80052e4:	3feffffe 	.word	0x3feffffe
 80052e8:	4661      	mov	r1, ip
 80052ea:	2200      	movs	r2, #0
 80052ec:	4b60      	ldr	r3, [pc, #384]	; (8005470 <__ieee754_pow+0x3c8>)
 80052ee:	4658      	mov	r0, fp
 80052f0:	f7fa ff32 	bl	8000158 <__aeabi_dsub>
 80052f4:	a354      	add	r3, pc, #336	; (adr r3, 8005448 <__ieee754_pow+0x3a0>)
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	4604      	mov	r4, r0
 80052fc:	460d      	mov	r5, r1
 80052fe:	f7fb f8e3 	bl	80004c8 <__aeabi_dmul>
 8005302:	a353      	add	r3, pc, #332	; (adr r3, 8005450 <__ieee754_pow+0x3a8>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	4606      	mov	r6, r0
 800530a:	460f      	mov	r7, r1
 800530c:	4620      	mov	r0, r4
 800530e:	4629      	mov	r1, r5
 8005310:	f7fb f8da 	bl	80004c8 <__aeabi_dmul>
 8005314:	2200      	movs	r2, #0
 8005316:	4682      	mov	sl, r0
 8005318:	468b      	mov	fp, r1
 800531a:	4b56      	ldr	r3, [pc, #344]	; (8005474 <__ieee754_pow+0x3cc>)
 800531c:	4620      	mov	r0, r4
 800531e:	4629      	mov	r1, r5
 8005320:	f7fb f8d2 	bl	80004c8 <__aeabi_dmul>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	a14b      	add	r1, pc, #300	; (adr r1, 8005458 <__ieee754_pow+0x3b0>)
 800532a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800532e:	f7fa ff13 	bl	8000158 <__aeabi_dsub>
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	f7fb f8c7 	bl	80004c8 <__aeabi_dmul>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	2000      	movs	r0, #0
 8005340:	494d      	ldr	r1, [pc, #308]	; (8005478 <__ieee754_pow+0x3d0>)
 8005342:	f7fa ff09 	bl	8000158 <__aeabi_dsub>
 8005346:	4622      	mov	r2, r4
 8005348:	462b      	mov	r3, r5
 800534a:	4680      	mov	r8, r0
 800534c:	4689      	mov	r9, r1
 800534e:	4620      	mov	r0, r4
 8005350:	4629      	mov	r1, r5
 8005352:	f7fb f8b9 	bl	80004c8 <__aeabi_dmul>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fb f8b3 	bl	80004c8 <__aeabi_dmul>
 8005362:	a33f      	add	r3, pc, #252	; (adr r3, 8005460 <__ieee754_pow+0x3b8>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fb f8ae 	bl	80004c8 <__aeabi_dmul>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4650      	mov	r0, sl
 8005372:	4659      	mov	r1, fp
 8005374:	f7fa fef0 	bl	8000158 <__aeabi_dsub>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4604      	mov	r4, r0
 800537e:	460d      	mov	r5, r1
 8005380:	4630      	mov	r0, r6
 8005382:	4639      	mov	r1, r7
 8005384:	f7fa feea 	bl	800015c <__adddf3>
 8005388:	2000      	movs	r0, #0
 800538a:	468b      	mov	fp, r1
 800538c:	4682      	mov	sl, r0
 800538e:	4632      	mov	r2, r6
 8005390:	463b      	mov	r3, r7
 8005392:	f7fa fee1 	bl	8000158 <__aeabi_dsub>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fa fedb 	bl	8000158 <__aeabi_dsub>
 80053a2:	9b00      	ldr	r3, [sp, #0]
 80053a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	bf0c      	ite	eq
 80053b0:	4c32      	ldreq	r4, [pc, #200]	; (800547c <__ieee754_pow+0x3d4>)
 80053b2:	4c2f      	ldrne	r4, [pc, #188]	; (8005470 <__ieee754_pow+0x3c8>)
 80053b4:	4606      	mov	r6, r0
 80053b6:	e9cd 3400 	strd	r3, r4, [sp]
 80053ba:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053be:	2400      	movs	r4, #0
 80053c0:	460f      	mov	r7, r1
 80053c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c6:	4622      	mov	r2, r4
 80053c8:	462b      	mov	r3, r5
 80053ca:	f7fa fec5 	bl	8000158 <__aeabi_dsub>
 80053ce:	4652      	mov	r2, sl
 80053d0:	465b      	mov	r3, fp
 80053d2:	f7fb f879 	bl	80004c8 <__aeabi_dmul>
 80053d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053da:	4680      	mov	r8, r0
 80053dc:	4689      	mov	r9, r1
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f7fb f871 	bl	80004c8 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4640      	mov	r0, r8
 80053ec:	4649      	mov	r1, r9
 80053ee:	f7fa feb5 	bl	800015c <__adddf3>
 80053f2:	4622      	mov	r2, r4
 80053f4:	462b      	mov	r3, r5
 80053f6:	4680      	mov	r8, r0
 80053f8:	4689      	mov	r9, r1
 80053fa:	4650      	mov	r0, sl
 80053fc:	4659      	mov	r1, fp
 80053fe:	f7fb f863 	bl	80004c8 <__aeabi_dmul>
 8005402:	4604      	mov	r4, r0
 8005404:	460d      	mov	r5, r1
 8005406:	460b      	mov	r3, r1
 8005408:	4602      	mov	r2, r0
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005412:	f7fa fea3 	bl	800015c <__adddf3>
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <__ieee754_pow+0x3d8>)
 8005418:	4682      	mov	sl, r0
 800541a:	4299      	cmp	r1, r3
 800541c:	460f      	mov	r7, r1
 800541e:	460e      	mov	r6, r1
 8005420:	f340 82e1 	ble.w	80059e6 <__ieee754_pow+0x93e>
 8005424:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005428:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800542c:	4303      	orrs	r3, r0
 800542e:	f000 81db 	beq.w	80057e8 <__ieee754_pow+0x740>
 8005432:	a30d      	add	r3, pc, #52	; (adr r3, 8005468 <__ieee754_pow+0x3c0>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800543c:	f7fb f844 	bl	80004c8 <__aeabi_dmul>
 8005440:	a309      	add	r3, pc, #36	; (adr r3, 8005468 <__ieee754_pow+0x3c0>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	e6c4      	b.n	80051d2 <__ieee754_pow+0x12a>
 8005448:	60000000 	.word	0x60000000
 800544c:	3ff71547 	.word	0x3ff71547
 8005450:	f85ddf44 	.word	0xf85ddf44
 8005454:	3e54ae0b 	.word	0x3e54ae0b
 8005458:	55555555 	.word	0x55555555
 800545c:	3fd55555 	.word	0x3fd55555
 8005460:	652b82fe 	.word	0x652b82fe
 8005464:	3ff71547 	.word	0x3ff71547
 8005468:	8800759c 	.word	0x8800759c
 800546c:	7e37e43c 	.word	0x7e37e43c
 8005470:	3ff00000 	.word	0x3ff00000
 8005474:	3fd00000 	.word	0x3fd00000
 8005478:	3fe00000 	.word	0x3fe00000
 800547c:	bff00000 	.word	0xbff00000
 8005480:	408fffff 	.word	0x408fffff
 8005484:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	da08      	bge.n	80054a0 <__ieee754_pow+0x3f8>
 800548e:	4658      	mov	r0, fp
 8005490:	4bcd      	ldr	r3, [pc, #820]	; (80057c8 <__ieee754_pow+0x720>)
 8005492:	4661      	mov	r1, ip
 8005494:	f7fb f818 	bl	80004c8 <__aeabi_dmul>
 8005498:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800549c:	4683      	mov	fp, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	1523      	asrs	r3, r4, #20
 80054a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054a6:	4413      	add	r3, r2
 80054a8:	930c      	str	r3, [sp, #48]	; 0x30
 80054aa:	4bc8      	ldr	r3, [pc, #800]	; (80057cc <__ieee754_pow+0x724>)
 80054ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80054b0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80054b4:	429c      	cmp	r4, r3
 80054b6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80054ba:	dd08      	ble.n	80054ce <__ieee754_pow+0x426>
 80054bc:	4bc4      	ldr	r3, [pc, #784]	; (80057d0 <__ieee754_pow+0x728>)
 80054be:	429c      	cmp	r4, r3
 80054c0:	f340 815b 	ble.w	800577a <__ieee754_pow+0x6d2>
 80054c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80054ca:	3301      	adds	r3, #1
 80054cc:	930c      	str	r3, [sp, #48]	; 0x30
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	4658      	mov	r0, fp
 80054d4:	4629      	mov	r1, r5
 80054d6:	4bbf      	ldr	r3, [pc, #764]	; (80057d4 <__ieee754_pow+0x72c>)
 80054d8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80054dc:	444b      	add	r3, r9
 80054de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80054e6:	461a      	mov	r2, r3
 80054e8:	4623      	mov	r3, r4
 80054ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054ee:	f7fa fe33 	bl	8000158 <__aeabi_dsub>
 80054f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054f6:	4606      	mov	r6, r0
 80054f8:	460f      	mov	r7, r1
 80054fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80054fe:	f7fa fe2d 	bl	800015c <__adddf3>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	2000      	movs	r0, #0
 8005508:	49b3      	ldr	r1, [pc, #716]	; (80057d8 <__ieee754_pow+0x730>)
 800550a:	f7fb f907 	bl	800071c <__aeabi_ddiv>
 800550e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4630      	mov	r0, r6
 8005518:	4639      	mov	r1, r7
 800551a:	f7fa ffd5 	bl	80004c8 <__aeabi_dmul>
 800551e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005522:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005526:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800552a:	2300      	movs	r3, #0
 800552c:	2200      	movs	r2, #0
 800552e:	106d      	asrs	r5, r5, #1
 8005530:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005534:	9304      	str	r3, [sp, #16]
 8005536:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800553a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800553e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8005542:	4650      	mov	r0, sl
 8005544:	4659      	mov	r1, fp
 8005546:	4614      	mov	r4, r2
 8005548:	461d      	mov	r5, r3
 800554a:	f7fa ffbd 	bl	80004c8 <__aeabi_dmul>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4630      	mov	r0, r6
 8005554:	4639      	mov	r1, r7
 8005556:	f7fa fdff 	bl	8000158 <__aeabi_dsub>
 800555a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800555e:	4606      	mov	r6, r0
 8005560:	460f      	mov	r7, r1
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fa fdf7 	bl	8000158 <__aeabi_dsub>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005572:	f7fa fdf1 	bl	8000158 <__aeabi_dsub>
 8005576:	4652      	mov	r2, sl
 8005578:	465b      	mov	r3, fp
 800557a:	f7fa ffa5 	bl	80004c8 <__aeabi_dmul>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4630      	mov	r0, r6
 8005584:	4639      	mov	r1, r7
 8005586:	f7fa fde7 	bl	8000158 <__aeabi_dsub>
 800558a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800558e:	f7fa ff9b 	bl	80004c8 <__aeabi_dmul>
 8005592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005596:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	f7fa ff93 	bl	80004c8 <__aeabi_dmul>
 80055a2:	a377      	add	r3, pc, #476	; (adr r3, 8005780 <__ieee754_pow+0x6d8>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	f7fa ff8c 	bl	80004c8 <__aeabi_dmul>
 80055b0:	a375      	add	r3, pc, #468	; (adr r3, 8005788 <__ieee754_pow+0x6e0>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f7fa fdd1 	bl	800015c <__adddf3>
 80055ba:	4622      	mov	r2, r4
 80055bc:	462b      	mov	r3, r5
 80055be:	f7fa ff83 	bl	80004c8 <__aeabi_dmul>
 80055c2:	a373      	add	r3, pc, #460	; (adr r3, 8005790 <__ieee754_pow+0x6e8>)
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f7fa fdc8 	bl	800015c <__adddf3>
 80055cc:	4622      	mov	r2, r4
 80055ce:	462b      	mov	r3, r5
 80055d0:	f7fa ff7a 	bl	80004c8 <__aeabi_dmul>
 80055d4:	a370      	add	r3, pc, #448	; (adr r3, 8005798 <__ieee754_pow+0x6f0>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f7fa fdbf 	bl	800015c <__adddf3>
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	f7fa ff71 	bl	80004c8 <__aeabi_dmul>
 80055e6:	a36e      	add	r3, pc, #440	; (adr r3, 80057a0 <__ieee754_pow+0x6f8>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fa fdb6 	bl	800015c <__adddf3>
 80055f0:	4622      	mov	r2, r4
 80055f2:	462b      	mov	r3, r5
 80055f4:	f7fa ff68 	bl	80004c8 <__aeabi_dmul>
 80055f8:	a36b      	add	r3, pc, #428	; (adr r3, 80057a8 <__ieee754_pow+0x700>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fdad 	bl	800015c <__adddf3>
 8005602:	4622      	mov	r2, r4
 8005604:	4606      	mov	r6, r0
 8005606:	460f      	mov	r7, r1
 8005608:	462b      	mov	r3, r5
 800560a:	4620      	mov	r0, r4
 800560c:	4629      	mov	r1, r5
 800560e:	f7fa ff5b 	bl	80004c8 <__aeabi_dmul>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4630      	mov	r0, r6
 8005618:	4639      	mov	r1, r7
 800561a:	f7fa ff55 	bl	80004c8 <__aeabi_dmul>
 800561e:	4604      	mov	r4, r0
 8005620:	460d      	mov	r5, r1
 8005622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005626:	4652      	mov	r2, sl
 8005628:	465b      	mov	r3, fp
 800562a:	f7fa fd97 	bl	800015c <__adddf3>
 800562e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005632:	f7fa ff49 	bl	80004c8 <__aeabi_dmul>
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	f7fa fd8f 	bl	800015c <__adddf3>
 800563e:	4652      	mov	r2, sl
 8005640:	4606      	mov	r6, r0
 8005642:	460f      	mov	r7, r1
 8005644:	465b      	mov	r3, fp
 8005646:	4650      	mov	r0, sl
 8005648:	4659      	mov	r1, fp
 800564a:	f7fa ff3d 	bl	80004c8 <__aeabi_dmul>
 800564e:	2200      	movs	r2, #0
 8005650:	4b62      	ldr	r3, [pc, #392]	; (80057dc <__ieee754_pow+0x734>)
 8005652:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005656:	f7fa fd81 	bl	800015c <__adddf3>
 800565a:	4632      	mov	r2, r6
 800565c:	463b      	mov	r3, r7
 800565e:	f7fa fd7d 	bl	800015c <__adddf3>
 8005662:	9804      	ldr	r0, [sp, #16]
 8005664:	460d      	mov	r5, r1
 8005666:	4604      	mov	r4, r0
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4650      	mov	r0, sl
 800566e:	4659      	mov	r1, fp
 8005670:	f7fa ff2a 	bl	80004c8 <__aeabi_dmul>
 8005674:	2200      	movs	r2, #0
 8005676:	4682      	mov	sl, r0
 8005678:	468b      	mov	fp, r1
 800567a:	4b58      	ldr	r3, [pc, #352]	; (80057dc <__ieee754_pow+0x734>)
 800567c:	4620      	mov	r0, r4
 800567e:	4629      	mov	r1, r5
 8005680:	f7fa fd6a 	bl	8000158 <__aeabi_dsub>
 8005684:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005688:	f7fa fd66 	bl	8000158 <__aeabi_dsub>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	f7fa fd60 	bl	8000158 <__aeabi_dsub>
 8005698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800569c:	f7fa ff14 	bl	80004c8 <__aeabi_dmul>
 80056a0:	4622      	mov	r2, r4
 80056a2:	4606      	mov	r6, r0
 80056a4:	460f      	mov	r7, r1
 80056a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056aa:	462b      	mov	r3, r5
 80056ac:	f7fa ff0c 	bl	80004c8 <__aeabi_dmul>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4630      	mov	r0, r6
 80056b6:	4639      	mov	r1, r7
 80056b8:	f7fa fd50 	bl	800015c <__adddf3>
 80056bc:	4606      	mov	r6, r0
 80056be:	460f      	mov	r7, r1
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4650      	mov	r0, sl
 80056c6:	4659      	mov	r1, fp
 80056c8:	f7fa fd48 	bl	800015c <__adddf3>
 80056cc:	a338      	add	r3, pc, #224	; (adr r3, 80057b0 <__ieee754_pow+0x708>)
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	9804      	ldr	r0, [sp, #16]
 80056d4:	460d      	mov	r5, r1
 80056d6:	4604      	mov	r4, r0
 80056d8:	f7fa fef6 	bl	80004c8 <__aeabi_dmul>
 80056dc:	4652      	mov	r2, sl
 80056de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056e2:	465b      	mov	r3, fp
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	f7fa fd36 	bl	8000158 <__aeabi_dsub>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	4630      	mov	r0, r6
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fa fd30 	bl	8000158 <__aeabi_dsub>
 80056f8:	a32f      	add	r3, pc, #188	; (adr r3, 80057b8 <__ieee754_pow+0x710>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fa fee3 	bl	80004c8 <__aeabi_dmul>
 8005702:	a32f      	add	r3, pc, #188	; (adr r3, 80057c0 <__ieee754_pow+0x718>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	4606      	mov	r6, r0
 800570a:	460f      	mov	r7, r1
 800570c:	4620      	mov	r0, r4
 800570e:	4629      	mov	r1, r5
 8005710:	f7fa feda 	bl	80004c8 <__aeabi_dmul>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4630      	mov	r0, r6
 800571a:	4639      	mov	r1, r7
 800571c:	f7fa fd1e 	bl	800015c <__adddf3>
 8005720:	4b2f      	ldr	r3, [pc, #188]	; (80057e0 <__ieee754_pow+0x738>)
 8005722:	444b      	add	r3, r9
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fa fd18 	bl	800015c <__adddf3>
 800572c:	4604      	mov	r4, r0
 800572e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005730:	460d      	mov	r5, r1
 8005732:	f7fa fe5f 	bl	80003f4 <__aeabi_i2d>
 8005736:	4606      	mov	r6, r0
 8005738:	460f      	mov	r7, r1
 800573a:	4b2a      	ldr	r3, [pc, #168]	; (80057e4 <__ieee754_pow+0x73c>)
 800573c:	4622      	mov	r2, r4
 800573e:	444b      	add	r3, r9
 8005740:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005744:	462b      	mov	r3, r5
 8005746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800574a:	f7fa fd07 	bl	800015c <__adddf3>
 800574e:	4642      	mov	r2, r8
 8005750:	464b      	mov	r3, r9
 8005752:	f7fa fd03 	bl	800015c <__adddf3>
 8005756:	4632      	mov	r2, r6
 8005758:	463b      	mov	r3, r7
 800575a:	f7fa fcff 	bl	800015c <__adddf3>
 800575e:	9804      	ldr	r0, [sp, #16]
 8005760:	4632      	mov	r2, r6
 8005762:	463b      	mov	r3, r7
 8005764:	4682      	mov	sl, r0
 8005766:	468b      	mov	fp, r1
 8005768:	f7fa fcf6 	bl	8000158 <__aeabi_dsub>
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	f7fa fcf2 	bl	8000158 <__aeabi_dsub>
 8005774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005778:	e60b      	b.n	8005392 <__ieee754_pow+0x2ea>
 800577a:	f04f 0801 	mov.w	r8, #1
 800577e:	e6a8      	b.n	80054d2 <__ieee754_pow+0x42a>
 8005780:	4a454eef 	.word	0x4a454eef
 8005784:	3fca7e28 	.word	0x3fca7e28
 8005788:	93c9db65 	.word	0x93c9db65
 800578c:	3fcd864a 	.word	0x3fcd864a
 8005790:	a91d4101 	.word	0xa91d4101
 8005794:	3fd17460 	.word	0x3fd17460
 8005798:	518f264d 	.word	0x518f264d
 800579c:	3fd55555 	.word	0x3fd55555
 80057a0:	db6fabff 	.word	0xdb6fabff
 80057a4:	3fdb6db6 	.word	0x3fdb6db6
 80057a8:	33333303 	.word	0x33333303
 80057ac:	3fe33333 	.word	0x3fe33333
 80057b0:	e0000000 	.word	0xe0000000
 80057b4:	3feec709 	.word	0x3feec709
 80057b8:	dc3a03fd 	.word	0xdc3a03fd
 80057bc:	3feec709 	.word	0x3feec709
 80057c0:	145b01f5 	.word	0x145b01f5
 80057c4:	be3e2fe0 	.word	0xbe3e2fe0
 80057c8:	43400000 	.word	0x43400000
 80057cc:	0003988e 	.word	0x0003988e
 80057d0:	000bb679 	.word	0x000bb679
 80057d4:	08005ed0 	.word	0x08005ed0
 80057d8:	3ff00000 	.word	0x3ff00000
 80057dc:	40080000 	.word	0x40080000
 80057e0:	08005ef0 	.word	0x08005ef0
 80057e4:	08005ee0 	.word	0x08005ee0
 80057e8:	a39b      	add	r3, pc, #620	; (adr r3, 8005a58 <__ieee754_pow+0x9b0>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	4640      	mov	r0, r8
 80057f0:	4649      	mov	r1, r9
 80057f2:	f7fa fcb3 	bl	800015c <__adddf3>
 80057f6:	4622      	mov	r2, r4
 80057f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057fc:	462b      	mov	r3, r5
 80057fe:	4650      	mov	r0, sl
 8005800:	4639      	mov	r1, r7
 8005802:	f7fa fca9 	bl	8000158 <__aeabi_dsub>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800580e:	f7fb f8eb 	bl	80009e8 <__aeabi_dcmpgt>
 8005812:	2800      	cmp	r0, #0
 8005814:	f47f ae0d 	bne.w	8005432 <__ieee754_pow+0x38a>
 8005818:	4aa3      	ldr	r2, [pc, #652]	; (8005aa8 <__ieee754_pow+0xa00>)
 800581a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800581e:	4293      	cmp	r3, r2
 8005820:	f340 8103 	ble.w	8005a2a <__ieee754_pow+0x982>
 8005824:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005828:	2000      	movs	r0, #0
 800582a:	151b      	asrs	r3, r3, #20
 800582c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005830:	fa4a f303 	asr.w	r3, sl, r3
 8005834:	4433      	add	r3, r6
 8005836:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800583a:	4f9c      	ldr	r7, [pc, #624]	; (8005aac <__ieee754_pow+0xa04>)
 800583c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005840:	4117      	asrs	r7, r2
 8005842:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005846:	ea23 0107 	bic.w	r1, r3, r7
 800584a:	f1c2 0214 	rsb	r2, r2, #20
 800584e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005852:	fa4a fa02 	asr.w	sl, sl, r2
 8005856:	2e00      	cmp	r6, #0
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4620      	mov	r0, r4
 800585e:	4629      	mov	r1, r5
 8005860:	bfb8      	it	lt
 8005862:	f1ca 0a00 	rsblt	sl, sl, #0
 8005866:	f7fa fc77 	bl	8000158 <__aeabi_dsub>
 800586a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800586e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005872:	4642      	mov	r2, r8
 8005874:	464b      	mov	r3, r9
 8005876:	f7fa fc71 	bl	800015c <__adddf3>
 800587a:	a379      	add	r3, pc, #484	; (adr r3, 8005a60 <__ieee754_pow+0x9b8>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	2000      	movs	r0, #0
 8005882:	460d      	mov	r5, r1
 8005884:	4604      	mov	r4, r0
 8005886:	f7fa fe1f 	bl	80004c8 <__aeabi_dmul>
 800588a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800588e:	4606      	mov	r6, r0
 8005890:	460f      	mov	r7, r1
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	f7fa fc5f 	bl	8000158 <__aeabi_dsub>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	f7fa fc59 	bl	8000158 <__aeabi_dsub>
 80058a6:	a370      	add	r3, pc, #448	; (adr r3, 8005a68 <__ieee754_pow+0x9c0>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fe0c 	bl	80004c8 <__aeabi_dmul>
 80058b0:	a36f      	add	r3, pc, #444	; (adr r3, 8005a70 <__ieee754_pow+0x9c8>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	4680      	mov	r8, r0
 80058b8:	4689      	mov	r9, r1
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	f7fa fe03 	bl	80004c8 <__aeabi_dmul>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4640      	mov	r0, r8
 80058c8:	4649      	mov	r1, r9
 80058ca:	f7fa fc47 	bl	800015c <__adddf3>
 80058ce:	4604      	mov	r4, r0
 80058d0:	460d      	mov	r5, r1
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	f7fa fc3f 	bl	800015c <__adddf3>
 80058de:	4632      	mov	r2, r6
 80058e0:	463b      	mov	r3, r7
 80058e2:	4680      	mov	r8, r0
 80058e4:	4689      	mov	r9, r1
 80058e6:	f7fa fc37 	bl	8000158 <__aeabi_dsub>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4620      	mov	r0, r4
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7fa fc31 	bl	8000158 <__aeabi_dsub>
 80058f6:	4642      	mov	r2, r8
 80058f8:	4606      	mov	r6, r0
 80058fa:	460f      	mov	r7, r1
 80058fc:	464b      	mov	r3, r9
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	f7fa fde1 	bl	80004c8 <__aeabi_dmul>
 8005906:	a35c      	add	r3, pc, #368	; (adr r3, 8005a78 <__ieee754_pow+0x9d0>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	4604      	mov	r4, r0
 800590e:	460d      	mov	r5, r1
 8005910:	f7fa fdda 	bl	80004c8 <__aeabi_dmul>
 8005914:	a35a      	add	r3, pc, #360	; (adr r3, 8005a80 <__ieee754_pow+0x9d8>)
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f7fa fc1d 	bl	8000158 <__aeabi_dsub>
 800591e:	4622      	mov	r2, r4
 8005920:	462b      	mov	r3, r5
 8005922:	f7fa fdd1 	bl	80004c8 <__aeabi_dmul>
 8005926:	a358      	add	r3, pc, #352	; (adr r3, 8005a88 <__ieee754_pow+0x9e0>)
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f7fa fc16 	bl	800015c <__adddf3>
 8005930:	4622      	mov	r2, r4
 8005932:	462b      	mov	r3, r5
 8005934:	f7fa fdc8 	bl	80004c8 <__aeabi_dmul>
 8005938:	a355      	add	r3, pc, #340	; (adr r3, 8005a90 <__ieee754_pow+0x9e8>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fa fc0b 	bl	8000158 <__aeabi_dsub>
 8005942:	4622      	mov	r2, r4
 8005944:	462b      	mov	r3, r5
 8005946:	f7fa fdbf 	bl	80004c8 <__aeabi_dmul>
 800594a:	a353      	add	r3, pc, #332	; (adr r3, 8005a98 <__ieee754_pow+0x9f0>)
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f7fa fc04 	bl	800015c <__adddf3>
 8005954:	4622      	mov	r2, r4
 8005956:	462b      	mov	r3, r5
 8005958:	f7fa fdb6 	bl	80004c8 <__aeabi_dmul>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4640      	mov	r0, r8
 8005962:	4649      	mov	r1, r9
 8005964:	f7fa fbf8 	bl	8000158 <__aeabi_dsub>
 8005968:	4604      	mov	r4, r0
 800596a:	460d      	mov	r5, r1
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fa fda8 	bl	80004c8 <__aeabi_dmul>
 8005978:	2200      	movs	r2, #0
 800597a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800597e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005982:	4620      	mov	r0, r4
 8005984:	4629      	mov	r1, r5
 8005986:	f7fa fbe7 	bl	8000158 <__aeabi_dsub>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005992:	f7fa fec3 	bl	800071c <__aeabi_ddiv>
 8005996:	4632      	mov	r2, r6
 8005998:	4604      	mov	r4, r0
 800599a:	460d      	mov	r5, r1
 800599c:	463b      	mov	r3, r7
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fa fd91 	bl	80004c8 <__aeabi_dmul>
 80059a6:	4632      	mov	r2, r6
 80059a8:	463b      	mov	r3, r7
 80059aa:	f7fa fbd7 	bl	800015c <__adddf3>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4620      	mov	r0, r4
 80059b4:	4629      	mov	r1, r5
 80059b6:	f7fa fbcf 	bl	8000158 <__aeabi_dsub>
 80059ba:	4642      	mov	r2, r8
 80059bc:	464b      	mov	r3, r9
 80059be:	f7fa fbcb 	bl	8000158 <__aeabi_dsub>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	2000      	movs	r0, #0
 80059c8:	4939      	ldr	r1, [pc, #228]	; (8005ab0 <__ieee754_pow+0xa08>)
 80059ca:	f7fa fbc5 	bl	8000158 <__aeabi_dsub>
 80059ce:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80059d2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80059d6:	da2b      	bge.n	8005a30 <__ieee754_pow+0x988>
 80059d8:	4652      	mov	r2, sl
 80059da:	f000 f9b5 	bl	8005d48 <scalbn>
 80059de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059e2:	f7ff bbf6 	b.w	80051d2 <__ieee754_pow+0x12a>
 80059e6:	4b33      	ldr	r3, [pc, #204]	; (8005ab4 <__ieee754_pow+0xa0c>)
 80059e8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80059ec:	429f      	cmp	r7, r3
 80059ee:	f77f af13 	ble.w	8005818 <__ieee754_pow+0x770>
 80059f2:	4b31      	ldr	r3, [pc, #196]	; (8005ab8 <__ieee754_pow+0xa10>)
 80059f4:	440b      	add	r3, r1
 80059f6:	4303      	orrs	r3, r0
 80059f8:	d00b      	beq.n	8005a12 <__ieee754_pow+0x96a>
 80059fa:	a329      	add	r3, pc, #164	; (adr r3, 8005aa0 <__ieee754_pow+0x9f8>)
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a04:	f7fa fd60 	bl	80004c8 <__aeabi_dmul>
 8005a08:	a325      	add	r3, pc, #148	; (adr r3, 8005aa0 <__ieee754_pow+0x9f8>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7ff bbe0 	b.w	80051d2 <__ieee754_pow+0x12a>
 8005a12:	4622      	mov	r2, r4
 8005a14:	462b      	mov	r3, r5
 8005a16:	f7fa fb9f 	bl	8000158 <__aeabi_dsub>
 8005a1a:	4642      	mov	r2, r8
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	f7fa ffd9 	bl	80009d4 <__aeabi_dcmpge>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f43f aef8 	beq.w	8005818 <__ieee754_pow+0x770>
 8005a28:	e7e7      	b.n	80059fa <__ieee754_pow+0x952>
 8005a2a:	f04f 0a00 	mov.w	sl, #0
 8005a2e:	e71e      	b.n	800586e <__ieee754_pow+0x7c6>
 8005a30:	4621      	mov	r1, r4
 8005a32:	e7d4      	b.n	80059de <__ieee754_pow+0x936>
 8005a34:	f04f 0b00 	mov.w	fp, #0
 8005a38:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005ab0 <__ieee754_pow+0xa08>
 8005a3c:	f7ff bb95 	b.w	800516a <__ieee754_pow+0xc2>
 8005a40:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005a44:	f7ff bb91 	b.w	800516a <__ieee754_pow+0xc2>
 8005a48:	4638      	mov	r0, r7
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	f7ff bbc3 	b.w	80051d6 <__ieee754_pow+0x12e>
 8005a50:	9200      	str	r2, [sp, #0]
 8005a52:	f7ff bb9f 	b.w	8005194 <__ieee754_pow+0xec>
 8005a56:	bf00      	nop
 8005a58:	652b82fe 	.word	0x652b82fe
 8005a5c:	3c971547 	.word	0x3c971547
 8005a60:	00000000 	.word	0x00000000
 8005a64:	3fe62e43 	.word	0x3fe62e43
 8005a68:	fefa39ef 	.word	0xfefa39ef
 8005a6c:	3fe62e42 	.word	0x3fe62e42
 8005a70:	0ca86c39 	.word	0x0ca86c39
 8005a74:	be205c61 	.word	0xbe205c61
 8005a78:	72bea4d0 	.word	0x72bea4d0
 8005a7c:	3e663769 	.word	0x3e663769
 8005a80:	c5d26bf1 	.word	0xc5d26bf1
 8005a84:	3ebbbd41 	.word	0x3ebbbd41
 8005a88:	af25de2c 	.word	0xaf25de2c
 8005a8c:	3f11566a 	.word	0x3f11566a
 8005a90:	16bebd93 	.word	0x16bebd93
 8005a94:	3f66c16c 	.word	0x3f66c16c
 8005a98:	5555553e 	.word	0x5555553e
 8005a9c:	3fc55555 	.word	0x3fc55555
 8005aa0:	c2f8f359 	.word	0xc2f8f359
 8005aa4:	01a56e1f 	.word	0x01a56e1f
 8005aa8:	3fe00000 	.word	0x3fe00000
 8005aac:	000fffff 	.word	0x000fffff
 8005ab0:	3ff00000 	.word	0x3ff00000
 8005ab4:	4090cbff 	.word	0x4090cbff
 8005ab8:	3f6f3400 	.word	0x3f6f3400

08005abc <__ieee754_sqrt>:
 8005abc:	4b54      	ldr	r3, [pc, #336]	; (8005c10 <__ieee754_sqrt+0x154>)
 8005abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	438b      	bics	r3, r1
 8005ac4:	4606      	mov	r6, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	460a      	mov	r2, r1
 8005aca:	460c      	mov	r4, r1
 8005acc:	d10f      	bne.n	8005aee <__ieee754_sqrt+0x32>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	f7fa fcf9 	bl	80004c8 <__aeabi_dmul>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4630      	mov	r0, r6
 8005adc:	4629      	mov	r1, r5
 8005ade:	f7fa fb3d 	bl	800015c <__adddf3>
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460d      	mov	r5, r1
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4629      	mov	r1, r5
 8005aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aee:	2900      	cmp	r1, #0
 8005af0:	4607      	mov	r7, r0
 8005af2:	4603      	mov	r3, r0
 8005af4:	dc0e      	bgt.n	8005b14 <__ieee754_sqrt+0x58>
 8005af6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005afa:	ea5c 0707 	orrs.w	r7, ip, r7
 8005afe:	d0f2      	beq.n	8005ae6 <__ieee754_sqrt+0x2a>
 8005b00:	b141      	cbz	r1, 8005b14 <__ieee754_sqrt+0x58>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	f7fa fb27 	bl	8000158 <__aeabi_dsub>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	f7fa fe05 	bl	800071c <__aeabi_ddiv>
 8005b12:	e7e6      	b.n	8005ae2 <__ieee754_sqrt+0x26>
 8005b14:	1512      	asrs	r2, r2, #20
 8005b16:	d074      	beq.n	8005c02 <__ieee754_sqrt+0x146>
 8005b18:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005b1c:	07d5      	lsls	r5, r2, #31
 8005b1e:	f04f 0500 	mov.w	r5, #0
 8005b22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005b26:	bf48      	it	mi
 8005b28:	0fd9      	lsrmi	r1, r3, #31
 8005b2a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005b2e:	bf44      	itt	mi
 8005b30:	005b      	lslmi	r3, r3, #1
 8005b32:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005b36:	1051      	asrs	r1, r2, #1
 8005b38:	0fda      	lsrs	r2, r3, #31
 8005b3a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005b3e:	4628      	mov	r0, r5
 8005b40:	2216      	movs	r2, #22
 8005b42:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	1987      	adds	r7, r0, r6
 8005b4a:	42a7      	cmp	r7, r4
 8005b4c:	bfde      	ittt	le
 8005b4e:	19b8      	addle	r0, r7, r6
 8005b50:	1be4      	suble	r4, r4, r7
 8005b52:	19ad      	addle	r5, r5, r6
 8005b54:	0fdf      	lsrs	r7, r3, #31
 8005b56:	3a01      	subs	r2, #1
 8005b58:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005b64:	d1f0      	bne.n	8005b48 <__ieee754_sqrt+0x8c>
 8005b66:	f04f 0c20 	mov.w	ip, #32
 8005b6a:	4696      	mov	lr, r2
 8005b6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005b70:	4284      	cmp	r4, r0
 8005b72:	eb06 070e 	add.w	r7, r6, lr
 8005b76:	dc02      	bgt.n	8005b7e <__ieee754_sqrt+0xc2>
 8005b78:	d112      	bne.n	8005ba0 <__ieee754_sqrt+0xe4>
 8005b7a:	429f      	cmp	r7, r3
 8005b7c:	d810      	bhi.n	8005ba0 <__ieee754_sqrt+0xe4>
 8005b7e:	2f00      	cmp	r7, #0
 8005b80:	eb07 0e06 	add.w	lr, r7, r6
 8005b84:	da42      	bge.n	8005c0c <__ieee754_sqrt+0x150>
 8005b86:	f1be 0f00 	cmp.w	lr, #0
 8005b8a:	db3f      	blt.n	8005c0c <__ieee754_sqrt+0x150>
 8005b8c:	f100 0801 	add.w	r8, r0, #1
 8005b90:	1a24      	subs	r4, r4, r0
 8005b92:	4640      	mov	r0, r8
 8005b94:	429f      	cmp	r7, r3
 8005b96:	bf88      	it	hi
 8005b98:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8005b9c:	1bdb      	subs	r3, r3, r7
 8005b9e:	4432      	add	r2, r6
 8005ba0:	0064      	lsls	r4, r4, #1
 8005ba2:	f1bc 0c01 	subs.w	ip, ip, #1
 8005ba6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005baa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005bae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bb2:	d1dd      	bne.n	8005b70 <__ieee754_sqrt+0xb4>
 8005bb4:	4323      	orrs	r3, r4
 8005bb6:	d006      	beq.n	8005bc6 <__ieee754_sqrt+0x10a>
 8005bb8:	1c54      	adds	r4, r2, #1
 8005bba:	bf0b      	itete	eq
 8005bbc:	4662      	moveq	r2, ip
 8005bbe:	3201      	addne	r2, #1
 8005bc0:	3501      	addeq	r5, #1
 8005bc2:	f022 0201 	bicne.w	r2, r2, #1
 8005bc6:	106b      	asrs	r3, r5, #1
 8005bc8:	0852      	lsrs	r2, r2, #1
 8005bca:	07e8      	lsls	r0, r5, #31
 8005bcc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005bd0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005bd4:	bf48      	it	mi
 8005bd6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005bda:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005bde:	4616      	mov	r6, r2
 8005be0:	e781      	b.n	8005ae6 <__ieee754_sqrt+0x2a>
 8005be2:	0adc      	lsrs	r4, r3, #11
 8005be4:	3915      	subs	r1, #21
 8005be6:	055b      	lsls	r3, r3, #21
 8005be8:	2c00      	cmp	r4, #0
 8005bea:	d0fa      	beq.n	8005be2 <__ieee754_sqrt+0x126>
 8005bec:	02e6      	lsls	r6, r4, #11
 8005bee:	d50a      	bpl.n	8005c06 <__ieee754_sqrt+0x14a>
 8005bf0:	f1c2 0020 	rsb	r0, r2, #32
 8005bf4:	fa23 f000 	lsr.w	r0, r3, r0
 8005bf8:	1e55      	subs	r5, r2, #1
 8005bfa:	4093      	lsls	r3, r2
 8005bfc:	4304      	orrs	r4, r0
 8005bfe:	1b4a      	subs	r2, r1, r5
 8005c00:	e78a      	b.n	8005b18 <__ieee754_sqrt+0x5c>
 8005c02:	4611      	mov	r1, r2
 8005c04:	e7f0      	b.n	8005be8 <__ieee754_sqrt+0x12c>
 8005c06:	0064      	lsls	r4, r4, #1
 8005c08:	3201      	adds	r2, #1
 8005c0a:	e7ef      	b.n	8005bec <__ieee754_sqrt+0x130>
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	e7bf      	b.n	8005b90 <__ieee754_sqrt+0xd4>
 8005c10:	7ff00000 	.word	0x7ff00000

08005c14 <finite>:
 8005c14:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005c18:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8005c1c:	0fc0      	lsrs	r0, r0, #31
 8005c1e:	4770      	bx	lr

08005c20 <matherr>:
 8005c20:	2000      	movs	r0, #0
 8005c22:	4770      	bx	lr

08005c24 <nan>:
 8005c24:	2000      	movs	r0, #0
 8005c26:	4901      	ldr	r1, [pc, #4]	; (8005c2c <nan+0x8>)
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	7ff80000 	.word	0x7ff80000

08005c30 <rint>:
 8005c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c36:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8005c3a:	f1bc 0f13 	cmp.w	ip, #19
 8005c3e:	4604      	mov	r4, r0
 8005c40:	460d      	mov	r5, r1
 8005c42:	460b      	mov	r3, r1
 8005c44:	4606      	mov	r6, r0
 8005c46:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005c4a:	dc5a      	bgt.n	8005d02 <rint+0xd2>
 8005c4c:	f1bc 0f00 	cmp.w	ip, #0
 8005c50:	da2b      	bge.n	8005caa <rint+0x7a>
 8005c52:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005c56:	4302      	orrs	r2, r0
 8005c58:	d023      	beq.n	8005ca2 <rint+0x72>
 8005c5a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005c5e:	4302      	orrs	r2, r0
 8005c60:	4256      	negs	r6, r2
 8005c62:	4316      	orrs	r6, r2
 8005c64:	0c4b      	lsrs	r3, r1, #17
 8005c66:	0b36      	lsrs	r6, r6, #12
 8005c68:	4934      	ldr	r1, [pc, #208]	; (8005d3c <rint+0x10c>)
 8005c6a:	045b      	lsls	r3, r3, #17
 8005c6c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8005c70:	ea46 0503 	orr.w	r5, r6, r3
 8005c74:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005c78:	4602      	mov	r2, r0
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005c80:	4620      	mov	r0, r4
 8005c82:	4629      	mov	r1, r5
 8005c84:	f7fa fa6a 	bl	800015c <__adddf3>
 8005c88:	e9cd 0100 	strd	r0, r1, [sp]
 8005c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c90:	462b      	mov	r3, r5
 8005c92:	4622      	mov	r2, r4
 8005c94:	f7fa fa60 	bl	8000158 <__aeabi_dsub>
 8005c98:	4604      	mov	r4, r0
 8005c9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c9e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	b003      	add	sp, #12
 8005ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005caa:	4a25      	ldr	r2, [pc, #148]	; (8005d40 <rint+0x110>)
 8005cac:	fa42 f20c 	asr.w	r2, r2, ip
 8005cb0:	4011      	ands	r1, r2
 8005cb2:	4301      	orrs	r1, r0
 8005cb4:	d0f5      	beq.n	8005ca2 <rint+0x72>
 8005cb6:	0852      	lsrs	r2, r2, #1
 8005cb8:	ea05 0102 	and.w	r1, r5, r2
 8005cbc:	ea50 0601 	orrs.w	r6, r0, r1
 8005cc0:	d00c      	beq.n	8005cdc <rint+0xac>
 8005cc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005cc6:	f1bc 0f13 	cmp.w	ip, #19
 8005cca:	bf0c      	ite	eq
 8005ccc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005cd0:	2600      	movne	r6, #0
 8005cd2:	ea25 0202 	bic.w	r2, r5, r2
 8005cd6:	fa43 f30c 	asr.w	r3, r3, ip
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	4917      	ldr	r1, [pc, #92]	; (8005d3c <rint+0x10c>)
 8005cde:	4632      	mov	r2, r6
 8005ce0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8005ce4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ce8:	4620      	mov	r0, r4
 8005cea:	4629      	mov	r1, r5
 8005cec:	f7fa fa36 	bl	800015c <__adddf3>
 8005cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8005cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	f7fa fa2c 	bl	8000158 <__aeabi_dsub>
 8005d00:	e008      	b.n	8005d14 <rint+0xe4>
 8005d02:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8005d06:	dd08      	ble.n	8005d1a <rint+0xea>
 8005d08:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8005d0c:	d1c9      	bne.n	8005ca2 <rint+0x72>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	f7fa fa24 	bl	800015c <__adddf3>
 8005d14:	4604      	mov	r4, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	e7c3      	b.n	8005ca2 <rint+0x72>
 8005d1a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	40ca      	lsrs	r2, r1
 8005d24:	4210      	tst	r0, r2
 8005d26:	d0bc      	beq.n	8005ca2 <rint+0x72>
 8005d28:	0852      	lsrs	r2, r2, #1
 8005d2a:	4210      	tst	r0, r2
 8005d2c:	bf1f      	itttt	ne
 8005d2e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8005d32:	ea20 0202 	bicne.w	r2, r0, r2
 8005d36:	410e      	asrne	r6, r1
 8005d38:	4316      	orrne	r6, r2
 8005d3a:	e7cf      	b.n	8005cdc <rint+0xac>
 8005d3c:	08005f00 	.word	0x08005f00
 8005d40:	000fffff 	.word	0x000fffff
 8005d44:	00000000 	.word	0x00000000

08005d48 <scalbn>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	4616      	mov	r6, r2
 8005d4c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d50:	4604      	mov	r4, r0
 8005d52:	460d      	mov	r5, r1
 8005d54:	460b      	mov	r3, r1
 8005d56:	b982      	cbnz	r2, 8005d7a <scalbn+0x32>
 8005d58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d5c:	4303      	orrs	r3, r0
 8005d5e:	d034      	beq.n	8005dca <scalbn+0x82>
 8005d60:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <scalbn+0xd0>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	f7fa fbb0 	bl	80004c8 <__aeabi_dmul>
 8005d68:	4b2c      	ldr	r3, [pc, #176]	; (8005e1c <scalbn+0xd4>)
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	429e      	cmp	r6, r3
 8005d6e:	460d      	mov	r5, r1
 8005d70:	da0d      	bge.n	8005d8e <scalbn+0x46>
 8005d72:	a325      	add	r3, pc, #148	; (adr r3, 8005e08 <scalbn+0xc0>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	e01c      	b.n	8005db4 <scalbn+0x6c>
 8005d7a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005d7e:	42ba      	cmp	r2, r7
 8005d80:	d109      	bne.n	8005d96 <scalbn+0x4e>
 8005d82:	4602      	mov	r2, r0
 8005d84:	f7fa f9ea 	bl	800015c <__adddf3>
 8005d88:	4604      	mov	r4, r0
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	e01d      	b.n	8005dca <scalbn+0x82>
 8005d8e:	460b      	mov	r3, r1
 8005d90:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d94:	3a36      	subs	r2, #54	; 0x36
 8005d96:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005d9a:	4432      	add	r2, r6
 8005d9c:	428a      	cmp	r2, r1
 8005d9e:	dd0c      	ble.n	8005dba <scalbn+0x72>
 8005da0:	4622      	mov	r2, r4
 8005da2:	462b      	mov	r3, r5
 8005da4:	a11a      	add	r1, pc, #104	; (adr r1, 8005e10 <scalbn+0xc8>)
 8005da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005daa:	f000 f83b 	bl	8005e24 <copysign>
 8005dae:	a318      	add	r3, pc, #96	; (adr r3, 8005e10 <scalbn+0xc8>)
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f7fa fb88 	bl	80004c8 <__aeabi_dmul>
 8005db8:	e7e6      	b.n	8005d88 <scalbn+0x40>
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	dd08      	ble.n	8005dd0 <scalbn+0x88>
 8005dbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005dc2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dc6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005dca:	4620      	mov	r0, r4
 8005dcc:	4629      	mov	r1, r5
 8005dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005dd4:	da0b      	bge.n	8005dee <scalbn+0xa6>
 8005dd6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005dda:	429e      	cmp	r6, r3
 8005ddc:	4622      	mov	r2, r4
 8005dde:	462b      	mov	r3, r5
 8005de0:	dce0      	bgt.n	8005da4 <scalbn+0x5c>
 8005de2:	a109      	add	r1, pc, #36	; (adr r1, 8005e08 <scalbn+0xc0>)
 8005de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de8:	f000 f81c 	bl	8005e24 <copysign>
 8005dec:	e7c1      	b.n	8005d72 <scalbn+0x2a>
 8005dee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005df2:	3236      	adds	r2, #54	; 0x36
 8005df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005df8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	2200      	movs	r2, #0
 8005e02:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <scalbn+0xd8>)
 8005e04:	e7d6      	b.n	8005db4 <scalbn+0x6c>
 8005e06:	bf00      	nop
 8005e08:	c2f8f359 	.word	0xc2f8f359
 8005e0c:	01a56e1f 	.word	0x01a56e1f
 8005e10:	8800759c 	.word	0x8800759c
 8005e14:	7e37e43c 	.word	0x7e37e43c
 8005e18:	43500000 	.word	0x43500000
 8005e1c:	ffff3cb0 	.word	0xffff3cb0
 8005e20:	3c900000 	.word	0x3c900000

08005e24 <copysign>:
 8005e24:	b530      	push	{r4, r5, lr}
 8005e26:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2e:	ea42 0503 	orr.w	r5, r2, r3
 8005e32:	4629      	mov	r1, r5
 8005e34:	bd30      	pop	{r4, r5, pc}
	...

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
